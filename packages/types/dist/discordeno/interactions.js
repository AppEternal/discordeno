/**
 * Types for:
 * - https://discord.com/developers/docs/interactions/receiving-and-responding
 * - https://discord.com/developers/docs/interactions/application-commands
 */ /**
 * Additional properties for:
 * - https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command-permissions
 * - https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions
 *
 * The access token is documented implicitly by the description of the `applications.commands.update` Oauth2 scope
 *
 * @see {@link https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes}
 */ export {}

//# sourceMappingURL=data:application/json;base64,
