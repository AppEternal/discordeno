/** Types for: https://discord.com/developers/docs/resources/channel */ /**
 * - https://discord.com/developers/docs/resources/channel#list-public-archived-threads-query-string-params
 * - https://discord.com/developers/docs/resources/channel#list-private-archived-threads-query-string-params
 * - https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads-query-string-params
 */ export { };

//# sourceMappingURL=data:application/json;base64,