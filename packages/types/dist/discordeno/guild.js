/** Types for: https://discord.com/developers/docs/resources/guild */ /** https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen */ export {}

//# sourceMappingURL=data:application/json;base64,
