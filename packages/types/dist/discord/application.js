/** Types for: https://discord.com/developers/docs/resources/application */ /** https://discord.com/developers/docs/resources/application#application-object-application-integration-types */ export var DiscordApplicationIntegrationType =
  /*#__PURE__*/ (function (DiscordApplicationIntegrationType) {
    /** App is installable to servers */ DiscordApplicationIntegrationType[(DiscordApplicationIntegrationType['GuildInstall'] = 0)] = 'GuildInstall'
    /** App is installable to users */ DiscordApplicationIntegrationType[(DiscordApplicationIntegrationType['UserInstall'] = 1)] = 'UserInstall'
    return DiscordApplicationIntegrationType
  })({})
/** https://discord.com/developers/docs/resources/application#application-object-application-event-webhook-status */ export var DiscordApplicationEventWebhookStatus =
  /*#__PURE__*/ (function (DiscordApplicationEventWebhookStatus) {
    /** Webhook events are disabled by developer */ DiscordApplicationEventWebhookStatus[(DiscordApplicationEventWebhookStatus['Disabled'] = 1)] =
      'Disabled'
    /** Webhook events are enabled by developer */ DiscordApplicationEventWebhookStatus[(DiscordApplicationEventWebhookStatus['Enabled'] = 2)] =
      'Enabled'
    /** Webhook events are disabled by Discord, usually due to inactivity */ DiscordApplicationEventWebhookStatus[
      (DiscordApplicationEventWebhookStatus['DisabledByDiscord'] = 3)
    ] = 'DisabledByDiscord'
    return DiscordApplicationEventWebhookStatus
  })({})
/** https://discord.com/developers/docs/resources/application#application-object-application-flags */ export var ApplicationFlags =
  /*#__PURE__*/ (function (ApplicationFlags) {
    /** Indicates if an app uses the Auto Moderation API. */ ApplicationFlags[(ApplicationFlags['ApplicationAutoModerationRuleCreateBadge'] = 64)] =
      'ApplicationAutoModerationRuleCreateBadge'
    /** Intent required for bots in **100 or more servers** to receive 'presence_update' events */ ApplicationFlags[
      (ApplicationFlags['GatewayPresence'] = 4096)
    ] = 'GatewayPresence'
    /** Intent required for bots in under 100 servers to receive 'presence_update' events */ ApplicationFlags[
      (ApplicationFlags['GatewayPresenceLimited'] = 8192)
    ] = 'GatewayPresenceLimited'
    /** Intent required for bots in **100 or more servers** to receive member-related events like 'guild_member_add'. */ ApplicationFlags[
      (ApplicationFlags['GatewayGuildMembers'] = 16384)
    ] = 'GatewayGuildMembers'
    /** Intent required for bots in under 100 servers to receive member-related events like 'guild_member_add'.  */ ApplicationFlags[
      (ApplicationFlags['GatewayGuildMembersLimited'] = 32768)
    ] = 'GatewayGuildMembersLimited'
    /** Indicates unusual growth of an app that prevents verification */ ApplicationFlags[
      (ApplicationFlags['VerificationPendingGuildLimit'] = 65536)
    ] = 'VerificationPendingGuildLimit'
    /** Indicates if an app is embedded within the Discord client (currently unavailable publicly) */ ApplicationFlags[
      (ApplicationFlags['Embedded'] = 131072)
    ] = 'Embedded'
    /** Intent required for bots in **100 or more servers** to receive message content */ ApplicationFlags[
      (ApplicationFlags['GatewayMessageContent'] = 262144)
    ] = 'GatewayMessageContent'
    /** Intent required for bots in under 100 servers to receive message content, found in Bot Settings */ ApplicationFlags[
      (ApplicationFlags['GatewayMessageContentLimited'] = 524288)
    ] = 'GatewayMessageContentLimited'
    /** Indicates if an app has registered global application commands */ ApplicationFlags[(ApplicationFlags['ApplicationCommandBadge'] = 8388608)] =
      'ApplicationCommandBadge'
    return ApplicationFlags
  })({})
/** https://discord.com/developers/docs/resources/application#get-application-activity-instance-activity-location-kind-enum */ export var DiscordActivityLocationKind =
  /*#__PURE__*/ (function (DiscordActivityLocationKind) {
    /** The Location is a Guild Channel */ DiscordActivityLocationKind['GuildChannel'] = 'gc'
    /** The Location is a Private Channel, such as a DM or GDM */ DiscordActivityLocationKind['PrivateChannel'] = 'pc'
    return DiscordActivityLocationKind
  })({})

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaXNjb3JkL2FwcGxpY2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBUeXBlcyBmb3I6IGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9hcHBsaWNhdGlvbiAqL1xuXG5pbXBvcnQgdHlwZSB7IERpc2NvcmRHdWlsZCB9IGZyb20gJy4vZ3VpbGQuanMnXG5pbXBvcnQgdHlwZSB7IE9BdXRoMlNjb3BlIH0gZnJvbSAnLi9vYXV0aDIuanMnXG5pbXBvcnQgdHlwZSB7IERpc2NvcmRUZWFtIH0gZnJvbSAnLi90ZWFtcy5qcydcbmltcG9ydCB0eXBlIHsgRGlzY29yZFVzZXIgfSBmcm9tICcuL3VzZXIuanMnXG5pbXBvcnQgdHlwZSB7IERpc2NvcmRXZWJob29rRXZlbnRUeXBlIH0gZnJvbSAnLi93ZWJob29rRXZlbnRzLmpzJ1xuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2FwcGxpY2F0aW9uI2FwcGxpY2F0aW9uLW9iamVjdC1hcHBsaWNhdGlvbi1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEFwcGxpY2F0aW9uIHtcbiAgLyoqIElEIG9mIHRoZSBhcHAgKi9cbiAgaWQ6IHN0cmluZ1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIGFwcCAqL1xuICBuYW1lOiBzdHJpbmdcbiAgLyoqIFRoZSBpY29uIGhhc2ggb2YgdGhlIGFwcCAqL1xuICBpY29uOiBzdHJpbmcgfCBudWxsXG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGFwcCAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIC8qKiBBbiBhcnJheSBvZiBycGMgb3JpZ2luIHVybHMsIGlmIHJwYyBpcyBlbmFibGVkICovXG4gIHJwY19vcmlnaW5zPzogc3RyaW5nW11cbiAgLyoqIFdoZW4gZmFsc2Ugb25seSBhcHAgb3duZXIgY2FuIGpvaW4gdGhlIGFwcCdzIGJvdCB0byBndWlsZHMgKi9cbiAgYm90X3B1YmxpYzogYm9vbGVhblxuICAvKiogV2hlbiB0cnVlIHRoZSBhcHAncyBib3Qgd2lsbCBvbmx5IGpvaW4gdXBvbiBjb21wbGV0aW9uIG9mIHRoZSBmdWxsIG9hdXRoMiBjb2RlIGdyYW50IGZsb3cgKi9cbiAgYm90X3JlcXVpcmVfY29kZV9ncmFudDogYm9vbGVhblxuICAvKiogUGFydGlhbCB1c2VyIG9iamVjdCBmb3IgdGhlIGJvdCB1c2VyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXBwICovXG4gIGJvdD86IFBhcnRpYWw8RGlzY29yZFVzZXI+XG4gIC8qKiBUaGUgdXJsIG9mIHRoZSBhcHAncyB0ZXJtcyBvZiBzZXJ2aWNlICovXG4gIHRlcm1zX29mX3NlcnZpY2VfdXJsPzogc3RyaW5nXG4gIC8qKiBUaGUgdXJsIG9mIHRoZSBhcHAncyBwcml2YWN5IHBvbGljeSAqL1xuICBwcml2YWN5X3BvbGljeV91cmw/OiBzdHJpbmdcbiAgLyoqIFBhcnRpYWwgdXNlciBvYmplY3QgY29udGFpbmluZyBpbmZvIG9uIHRoZSBvd25lciBvZiB0aGUgYXBwbGljYXRpb24gKi9cbiAgb3duZXI/OiBQYXJ0aWFsPERpc2NvcmRVc2VyPlxuICAvKiogVGhlIGhleCBlbmNvZGVkIGtleSBmb3IgdmVyaWZpY2F0aW9uIGluIGludGVyYWN0aW9ucyBhbmQgdGhlIEdhbWVTREsncyBHZXRUaWNrZXQgKi9cbiAgdmVyaWZ5X2tleTogc3RyaW5nXG4gIC8qKiBJZiB0aGUgYXBwbGljYXRpb24gYmVsb25ncyB0byBhIHRlYW0sIHRoaXMgd2lsbCBiZSBhIGxpc3Qgb2YgdGhlIG1lbWJlcnMgb2YgdGhhdCB0ZWFtICovXG4gIHRlYW06IERpc2NvcmRUZWFtIHwgbnVsbFxuICAvKiogR3VpbGQgYXNzb2NpYXRlZCB3aXRoIHRoZSBhcHAuIEZvciBleGFtcGxlLCBhIGRldmVsb3BlciBzdXBwb3J0IHNlcnZlci4gKi9cbiAgZ3VpbGRfaWQ/OiBzdHJpbmdcbiAgLyoqIEEgcGFydGlhbCBvYmplY3Qgb2YgdGhlIGFzc29jaWF0ZWQgZ3VpbGQgKi9cbiAgZ3VpbGQ/OiBQYXJ0aWFsPERpc2NvcmRHdWlsZD5cbiAgLyoqIElmIHRoaXMgYXBwbGljYXRpb24gaXMgYSBnYW1lIHNvbGQgb24gRGlzY29yZCwgdGhpcyBmaWVsZCB3aWxsIGJlIHRoZSBpZCBvZiB0aGUgXCJHYW1lIFNLVVwiIHRoYXQgaXMgY3JlYXRlZCwgaWYgZXhpc3RzICovXG4gIHByaW1hcnlfc2t1X2lkPzogc3RyaW5nXG4gIC8qKiBJZiB0aGlzIGFwcGxpY2F0aW9uIGlzIGEgZ2FtZSBzb2xkIG9uIERpc2NvcmQsIHRoaXMgZmllbGQgd2lsbCBiZSB0aGUgVVJMIHNsdWcgdGhhdCBsaW5rcyB0byB0aGUgc3RvcmUgcGFnZSAqL1xuICBzbHVnPzogc3RyaW5nXG4gIC8qKiBJZiB0aGlzIGFwcGxpY2F0aW9uIGlzIGEgZ2FtZSBzb2xkIG9uIERpc2NvcmQsIHRoaXMgZmllbGQgd2lsbCBiZSB0aGUgaGFzaCBvZiB0aGUgaW1hZ2Ugb24gc3RvcmUgZW1iZWRzICovXG4gIGNvdmVyX2ltYWdlPzogc3RyaW5nXG4gIC8qKiBUaGUgYXBwbGljYXRpb24ncyBwdWJsaWMgZmxhZ3MgKi9cbiAgZmxhZ3M/OiBBcHBsaWNhdGlvbkZsYWdzXG4gIC8qKiBBbiBhcHByb3hpbWF0ZSBjb3VudCBvZiB0aGUgYXBwJ3MgZ3VpbGQgbWVtYmVyc2hpcC4gKi9cbiAgYXBwcm94aW1hdGVfZ3VpbGRfY291bnQ/OiBudW1iZXJcbiAgLyoqIEFwcHJveGltYXRlIGNvdW50IG9mIHVzZXJzIHRoYXQgaGF2ZSBpbnN0YWxsZWQgdGhlIGFwcC4gKGF1dGhvcml6ZWQgd2l0aCBgYXBwbGljYXRpb24uY29tbWFuZHNgIGFzIGEgc2NvcGUpICovXG4gIGFwcHJveGltYXRlX3VzZXJfaW5zdGFsbF9jb3VudD86IG51bWJlclxuICAvKiogQXBwcm94aW1hdGUgY291bnQgb2YgdXNlcnMgdGhhdCBoYXZlIE9BdXRoMiBhdXRob3JpemF0aW9ucyBmb3IgdGhlIGFwcCAqL1xuICBhcHByb3hpbWF0ZV91c2VyX2F1dGhvcml6YXRpb25fY291bnQ/OiBudW1iZXJcbiAgLyoqIEFycmF5IG9mIHJlZGlyZWN0IFVSSXMgZm9yIHRoZSBhcHAgKi9cbiAgcmVkaXJlY3RfdXJpcz86IHN0cmluZ1tdXG4gIC8qKiBJbnRlcmFjdGlvbnMgZW5kcG9pbnQgVVJMIGZvciB0aGUgYXBwICovXG4gIGludGVyYWN0aW9uc19lbmRwb2ludF91cmw/OiBzdHJpbmcgfCBudWxsXG4gIC8qKiB0aGUgYXBwbGljYXRpb24ncyByb2xlIGNvbm5lY3Rpb24gdmVyaWZpY2F0aW9uIGVudHJ5IHBvaW50LCB3aGljaCB3aGVuIGNvbmZpZ3VyZWQgd2lsbCByZW5kZXIgdGhlIGFwcCBhcyBhIHZlcmlmaWNhdGlvbiBtZXRob2QgaW4gdGhlIGd1aWxkIHJvbGUgdmVyaWZpY2F0aW9uIGNvbmZpZ3VyYXRpb24gKi9cbiAgcm9sZV9jb25uZWN0aW9uc192ZXJpZmljYXRpb25fdXJsPzogc3RyaW5nIHwgbnVsbFxuICAvKiogRXZlbnQgd2ViaG9vayBVUkwgZm9yIHRoZSBhcHAgdG8gcmVjZWl2ZSB3ZWJob29rIGV2ZW50cyAqL1xuICBldmVudF93ZWJob29rc191cmw/OiBzdHJpbmcgfCBudWxsXG4gIC8qKiBJZiB3ZWJob29rIGV2ZW50cyBhcmUgZW5hYmxlZCBmb3IgdGhlIGFwcC4gMSB0byBkaXNhYmxlLCBhbmQgMiB0byBlbmFibGUuICovXG4gIGV2ZW50X3dlYmhvb2tzX3N0YXR1czogRGlzY29yZEFwcGxpY2F0aW9uRXZlbnRXZWJob29rU3RhdHVzXG4gIC8qKiBMaXN0IG9mIFdlYmhvb2sgZXZlbnQgdHlwZXMgdGhlIGFwcCBzdWJzY3JpYmVzIHRvICovXG4gIGV2ZW50X3dlYmhvb2tzX3R5cGVzPzogRGlzY29yZFdlYmhvb2tFdmVudFR5cGVbXVxuICAvKiogdXAgdG8gNSB0YWdzIGRlc2NyaWJpbmcgdGhlIGNvbnRlbnQgYW5kIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIGFwcGxpY2F0aW9uICovXG4gIHRhZ3M/OiBzdHJpbmdbXVxuICAvKiogc2V0dGluZ3MgZm9yIHRoZSBhcHBsaWNhdGlvbidzIGRlZmF1bHQgaW4tYXBwIGF1dGhvcml6YXRpb24gbGluaywgaWYgZW5hYmxlZCAqL1xuICBpbnN0YWxsX3BhcmFtcz86IERpc2NvcmRJbnN0YWxsUGFyYW1zXG4gIC8qKiBEZWZhdWx0IHNjb3BlcyBhbmQgcGVybWlzc2lvbnMgZm9yIGVhY2ggc3VwcG9ydGVkIGluc3RhbGxhdGlvbiBjb250ZXh0LiAqL1xuICBpbnRlZ3JhdGlvbl90eXBlc19jb25maWc/OiBQYXJ0aWFsPFJlY29yZDxgJHtEaXNjb3JkQXBwbGljYXRpb25JbnRlZ3JhdGlvblR5cGV9YCwgRGlzY29yZEFwcGxpY2F0aW9uSW50ZWdyYXRpb25UeXBlQ29uZmlndXJhdGlvbj4+XG4gIC8qKiB0aGUgYXBwbGljYXRpb24ncyBkZWZhdWx0IGN1c3RvbSBhdXRob3JpemF0aW9uIGxpbmssIGlmIGVuYWJsZWQgKi9cbiAgY3VzdG9tX2luc3RhbGxfdXJsPzogc3RyaW5nXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvYXBwbGljYXRpb24jYXBwbGljYXRpb24tb2JqZWN0LWFwcGxpY2F0aW9uLWludGVncmF0aW9uLXR5cGVzICovXG5leHBvcnQgZW51bSBEaXNjb3JkQXBwbGljYXRpb25JbnRlZ3JhdGlvblR5cGUge1xuICAvKiogQXBwIGlzIGluc3RhbGxhYmxlIHRvIHNlcnZlcnMgKi9cbiAgR3VpbGRJbnN0YWxsID0gMCxcbiAgLyoqIEFwcCBpcyBpbnN0YWxsYWJsZSB0byB1c2VycyAqL1xuICBVc2VySW5zdGFsbCA9IDEsXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvYXBwbGljYXRpb24jYXBwbGljYXRpb24tb2JqZWN0LWFwcGxpY2F0aW9uLWludGVncmF0aW9uLXR5cGUtY29uZmlndXJhdGlvbi1vYmplY3QgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEFwcGxpY2F0aW9uSW50ZWdyYXRpb25UeXBlQ29uZmlndXJhdGlvbiB7XG4gIC8qKiBJbnN0YWxsIHBhcmFtcyBmb3IgZWFjaCBpbnN0YWxsYXRpb24gY29udGV4dCdzIGRlZmF1bHQgaW4tYXBwIGF1dGhvcml6YXRpb24gbGluayAqL1xuICBvYXV0aDJfaW5zdGFsbF9wYXJhbXM/OiBEaXNjb3JkSW5zdGFsbFBhcmFtc1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2FwcGxpY2F0aW9uI2FwcGxpY2F0aW9uLW9iamVjdC1hcHBsaWNhdGlvbi1ldmVudC13ZWJob29rLXN0YXR1cyAqL1xuZXhwb3J0IGVudW0gRGlzY29yZEFwcGxpY2F0aW9uRXZlbnRXZWJob29rU3RhdHVzIHtcbiAgLyoqIFdlYmhvb2sgZXZlbnRzIGFyZSBkaXNhYmxlZCBieSBkZXZlbG9wZXIgKi9cbiAgRGlzYWJsZWQgPSAxLFxuICAvKiogV2ViaG9vayBldmVudHMgYXJlIGVuYWJsZWQgYnkgZGV2ZWxvcGVyICovXG4gIEVuYWJsZWQgPSAyLFxuICAvKiogV2ViaG9vayBldmVudHMgYXJlIGRpc2FibGVkIGJ5IERpc2NvcmQsIHVzdWFsbHkgZHVlIHRvIGluYWN0aXZpdHkgKi9cbiAgRGlzYWJsZWRCeURpc2NvcmQgPSAzLFxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2FwcGxpY2F0aW9uI2FwcGxpY2F0aW9uLW9iamVjdC1hcHBsaWNhdGlvbi1mbGFncyAqL1xuZXhwb3J0IGVudW0gQXBwbGljYXRpb25GbGFncyB7XG4gIC8qKiBJbmRpY2F0ZXMgaWYgYW4gYXBwIHVzZXMgdGhlIEF1dG8gTW9kZXJhdGlvbiBBUEkuICovXG4gIEFwcGxpY2F0aW9uQXV0b01vZGVyYXRpb25SdWxlQ3JlYXRlQmFkZ2UgPSAxIDw8IDYsXG4gIC8qKiBJbnRlbnQgcmVxdWlyZWQgZm9yIGJvdHMgaW4gKioxMDAgb3IgbW9yZSBzZXJ2ZXJzKiogdG8gcmVjZWl2ZSAncHJlc2VuY2VfdXBkYXRlJyBldmVudHMgKi9cbiAgR2F0ZXdheVByZXNlbmNlID0gMSA8PCAxMixcbiAgLyoqIEludGVudCByZXF1aXJlZCBmb3IgYm90cyBpbiB1bmRlciAxMDAgc2VydmVycyB0byByZWNlaXZlICdwcmVzZW5jZV91cGRhdGUnIGV2ZW50cyAqL1xuICBHYXRld2F5UHJlc2VuY2VMaW1pdGVkID0gMSA8PCAxMyxcbiAgLyoqIEludGVudCByZXF1aXJlZCBmb3IgYm90cyBpbiAqKjEwMCBvciBtb3JlIHNlcnZlcnMqKiB0byByZWNlaXZlIG1lbWJlci1yZWxhdGVkIGV2ZW50cyBsaWtlICdndWlsZF9tZW1iZXJfYWRkJy4gKi9cbiAgR2F0ZXdheUd1aWxkTWVtYmVycyA9IDEgPDwgMTQsXG4gIC8qKiBJbnRlbnQgcmVxdWlyZWQgZm9yIGJvdHMgaW4gdW5kZXIgMTAwIHNlcnZlcnMgdG8gcmVjZWl2ZSBtZW1iZXItcmVsYXRlZCBldmVudHMgbGlrZSAnZ3VpbGRfbWVtYmVyX2FkZCcuICAqL1xuICBHYXRld2F5R3VpbGRNZW1iZXJzTGltaXRlZCA9IDEgPDwgMTUsXG4gIC8qKiBJbmRpY2F0ZXMgdW51c3VhbCBncm93dGggb2YgYW4gYXBwIHRoYXQgcHJldmVudHMgdmVyaWZpY2F0aW9uICovXG4gIFZlcmlmaWNhdGlvblBlbmRpbmdHdWlsZExpbWl0ID0gMSA8PCAxNixcbiAgLyoqIEluZGljYXRlcyBpZiBhbiBhcHAgaXMgZW1iZWRkZWQgd2l0aGluIHRoZSBEaXNjb3JkIGNsaWVudCAoY3VycmVudGx5IHVuYXZhaWxhYmxlIHB1YmxpY2x5KSAqL1xuICBFbWJlZGRlZCA9IDEgPDwgMTcsXG4gIC8qKiBJbnRlbnQgcmVxdWlyZWQgZm9yIGJvdHMgaW4gKioxMDAgb3IgbW9yZSBzZXJ2ZXJzKiogdG8gcmVjZWl2ZSBtZXNzYWdlIGNvbnRlbnQgKi9cbiAgR2F0ZXdheU1lc3NhZ2VDb250ZW50ID0gMSA8PCAxOCxcbiAgLyoqIEludGVudCByZXF1aXJlZCBmb3IgYm90cyBpbiB1bmRlciAxMDAgc2VydmVycyB0byByZWNlaXZlIG1lc3NhZ2UgY29udGVudCwgZm91bmQgaW4gQm90IFNldHRpbmdzICovXG4gIEdhdGV3YXlNZXNzYWdlQ29udGVudExpbWl0ZWQgPSAxIDw8IDE5LFxuICAvKiogSW5kaWNhdGVzIGlmIGFuIGFwcCBoYXMgcmVnaXN0ZXJlZCBnbG9iYWwgYXBwbGljYXRpb24gY29tbWFuZHMgKi9cbiAgQXBwbGljYXRpb25Db21tYW5kQmFkZ2UgPSAxIDw8IDIzLFxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2FwcGxpY2F0aW9uI2luc3RhbGwtcGFyYW1zLW9iamVjdC1pbnN0YWxsLXBhcmFtcy1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEluc3RhbGxQYXJhbXMge1xuICAvKiogU2NvcGVzIHRvIGFkZCB0aGUgYXBwbGljYXRpb24gdG8gdGhlIHNlcnZlciB3aXRoICovXG4gIHNjb3BlczogT0F1dGgyU2NvcGVbXVxuICAvKiogUGVybWlzc2lvbnMgdG8gcmVxdWVzdCBmb3IgdGhlIGJvdCByb2xlICovXG4gIHBlcm1pc3Npb25zOiBzdHJpbmdcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9hcHBsaWNhdGlvbiNnZXQtYXBwbGljYXRpb24tYWN0aXZpdHktaW5zdGFuY2UtYWN0aXZpdHktaW5zdGFuY2Utb2JqZWN0ICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2NvcmRBY3Rpdml0eUluc3RhbmNlIHtcbiAgLyoqIEFwcGxpY2F0aW9uIElEICovXG4gIGFwcGxpY2F0aW9uX2lkOiBzdHJpbmdcbiAgLyoqIEFjdGl2aXR5IEluc3RhbmNlIElEICovXG4gIGluc3RhbmNlX2lkOiBzdHJpbmdcbiAgLyoqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbGF1bmNoICovXG4gIGxhdW5jaF9pZDogc3RyaW5nXG4gIC8qKiBUaGUgTG9jYXRpb24gdGhlIGluc3RhbmNlIGlzIHJ1bm5pbmcgaW4gKi9cbiAgbG9jYXRpb246IERpc2NvcmRBY3Rpdml0eUxvY2F0aW9uXG4gIC8qKiBUaGUgSURzIG9mIHRoZSBVc2VycyBjdXJyZW50bHkgY29ubmVjdGVkIHRvIHRoZSBpbnN0YW5jZSAqL1xuICB1c2Vyczogc3RyaW5nW11cbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9hcHBsaWNhdGlvbiNnZXQtYXBwbGljYXRpb24tYWN0aXZpdHktaW5zdGFuY2UtYWN0aXZpdHktbG9jYXRpb24tb2JqZWN0ICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2NvcmRBY3Rpdml0eUxvY2F0aW9uIHtcbiAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGxvY2F0aW9uICovXG4gIGlkOiBzdHJpbmdcbiAgLyoqIEVudW0gZGVzY3JpYmluZyBraW5kIG9mIGxvY2F0aW9uICovXG4gIGtpbmQ6IERpc2NvcmRBY3Rpdml0eUxvY2F0aW9uS2luZFxuICAvKiogVGhlIGlkIG9mIHRoZSBDaGFubmVsICovXG4gIGNoYW5uZWxfaWQ6IHN0cmluZ1xuICAvKiogVGhlIGlkIG9mIHRoZSBHdWlsZCAqL1xuICBndWlsZF9pZD86IHN0cmluZyB8IG51bGxcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9hcHBsaWNhdGlvbiNnZXQtYXBwbGljYXRpb24tYWN0aXZpdHktaW5zdGFuY2UtYWN0aXZpdHktbG9jYXRpb24ta2luZC1lbnVtICovXG5leHBvcnQgZW51bSBEaXNjb3JkQWN0aXZpdHlMb2NhdGlvbktpbmQge1xuICAvKiogVGhlIExvY2F0aW9uIGlzIGEgR3VpbGQgQ2hhbm5lbCAqL1xuICBHdWlsZENoYW5uZWwgPSAnZ2MnLFxuICAvKiogVGhlIExvY2F0aW9uIGlzIGEgUHJpdmF0ZSBDaGFubmVsLCBzdWNoIGFzIGEgRE0gb3IgR0RNICovXG4gIFByaXZhdGVDaGFubmVsID0gJ3BjJyxcbn1cbiJdLCJuYW1lcyI6WyJEaXNjb3JkQXBwbGljYXRpb25JbnRlZ3JhdGlvblR5cGUiLCJEaXNjb3JkQXBwbGljYXRpb25FdmVudFdlYmhvb2tTdGF0dXMiLCJBcHBsaWNhdGlvbkZsYWdzIiwiRGlzY29yZEFjdGl2aXR5TG9jYXRpb25LaW5kIl0sIm1hcHBpbmdzIjoiQUFBQSx5RUFBeUUsR0E0RXpFLCtHQUErRyxHQUMvRyxPQUFPLElBQUEsQUFBS0EsMkRBQUFBO0lBQ1Ysa0NBQWtDO0lBRWxDLGdDQUFnQztXQUh0QkE7TUFLWDtBQVFELGtIQUFrSCxHQUNsSCxPQUFPLElBQUEsQUFBS0MsOERBQUFBO0lBQ1YsNkNBQTZDO0lBRTdDLDRDQUE0QztJQUU1QyxzRUFBc0U7V0FMNURBO01BT1g7QUFFRCxtR0FBbUcsR0FDbkcsT0FBTyxJQUFBLEFBQUtDLDBDQUFBQTtJQUNWLHNEQUFzRDtJQUV0RCw0RkFBNEY7SUFFNUYsc0ZBQXNGO0lBRXRGLGtIQUFrSDtJQUVsSCw2R0FBNkc7SUFFN0csa0VBQWtFO0lBRWxFLCtGQUErRjtJQUUvRixtRkFBbUY7SUFFbkYsb0dBQW9HO0lBRXBHLG1FQUFtRTtXQW5CekRBO01BcUJYO0FBb0NELDRIQUE0SCxHQUM1SCxPQUFPLElBQUEsQUFBS0MscURBQUFBO0lBQ1Ysb0NBQW9DO0lBRXBDLDJEQUEyRDtXQUhqREE7TUFLWCJ9
