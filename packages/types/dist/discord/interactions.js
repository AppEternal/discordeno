/**
 * Types for:
 * - https://discord.com/developers/docs/interactions/receiving-and-responding
 * - https://discord.com/developers/docs/interactions/application-commands
 */ /** https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type */ export var InteractionTypes =
  /*#__PURE__*/ (function (InteractionTypes) {
    InteractionTypes[(InteractionTypes['Ping'] = 1)] = 'Ping'
    InteractionTypes[(InteractionTypes['ApplicationCommand'] = 2)] = 'ApplicationCommand'
    InteractionTypes[(InteractionTypes['MessageComponent'] = 3)] = 'MessageComponent'
    InteractionTypes[(InteractionTypes['ApplicationCommandAutocomplete'] = 4)] = 'ApplicationCommandAutocomplete'
    InteractionTypes[(InteractionTypes['ModalSubmit'] = 5)] = 'ModalSubmit'
    return InteractionTypes
  })({})
/** https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-context-types */ export var DiscordInteractionContextType =
  /*#__PURE__*/ (function (DiscordInteractionContextType) {
    /** Interaction can be used within servers */ DiscordInteractionContextType[(DiscordInteractionContextType['Guild'] = 0)] = 'Guild'
    /** Interaction can be used within DMs with the app's bot user */ DiscordInteractionContextType[(DiscordInteractionContextType['BotDm'] = 1)] =
      'BotDm'
    /** Interaction can be used within Group DMs and DMs other than the app's bot user */ DiscordInteractionContextType[
      (DiscordInteractionContextType['PrivateChannel'] = 2)
    ] = 'PrivateChannel'
    return DiscordInteractionContextType
  })({})
/** https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type */ export var InteractionResponseTypes =
  /*#__PURE__*/ (function (InteractionResponseTypes) {
    /** ACK a `Ping` */ InteractionResponseTypes[(InteractionResponseTypes['Pong'] = 1)] = 'Pong'
    /** Respond to an interaction with a message */ InteractionResponseTypes[(InteractionResponseTypes['ChannelMessageWithSource'] = 4)] =
      'ChannelMessageWithSource'
    /** ACK an interaction and edit a response later, the user sees a loading state */ InteractionResponseTypes[
      (InteractionResponseTypes['DeferredChannelMessageWithSource'] = 5)
    ] = 'DeferredChannelMessageWithSource'
    /** For components, ACK an interaction and edit the original message later; the user does not see a loading state */ InteractionResponseTypes[
      (InteractionResponseTypes['DeferredUpdateMessage'] = 6)
    ] = 'DeferredUpdateMessage'
    /** For components, edit the message the component was attached to */ InteractionResponseTypes[(InteractionResponseTypes['UpdateMessage'] = 7)] =
      'UpdateMessage'
    /** For Application Command Options, send an autocomplete result */ InteractionResponseTypes[
      (InteractionResponseTypes['ApplicationCommandAutocompleteResult'] = 8)
    ] = 'ApplicationCommandAutocompleteResult'
    /** For Command or Component interactions, send a Modal response */ InteractionResponseTypes[(InteractionResponseTypes['Modal'] = 9)] = 'Modal'
    /**
     * Respond to an interaction with an upgrade button, only available for apps with monetization enabled
     *
     * @deprecated You should migrate to the premium button components
     */ InteractionResponseTypes[(InteractionResponseTypes['PremiumRequired'] = 10)] = 'PremiumRequired'
    /**
     * Launch the Activity associated with the app.
     *
     * @remarks
     * Only available for apps with Activities enabled
     */ InteractionResponseTypes[(InteractionResponseTypes['LaunchActivity'] = 12)] = 'LaunchActivity'
    return InteractionResponseTypes
  })({})
/** https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-types */ export var ApplicationCommandTypes =
  /*#__PURE__*/ (function (ApplicationCommandTypes) {
    /** A text-based command that shows up when a user types `/` */ ApplicationCommandTypes[(ApplicationCommandTypes['ChatInput'] = 1)] = 'ChatInput'
    /** A UI-based command that shows up when you right click or tap on a user */ ApplicationCommandTypes[(ApplicationCommandTypes['User'] = 2)] =
      'User'
    /** A UI-based command that shows up when you right click or tap on a message */ ApplicationCommandTypes[
      (ApplicationCommandTypes['Message'] = 3)
    ] = 'Message'
    /** A UI-based command that represents the primary way to invoke an app's Activity */ ApplicationCommandTypes[
      (ApplicationCommandTypes['PrimaryEntryPoint'] = 4)
    ] = 'PrimaryEntryPoint'
    return ApplicationCommandTypes
  })({})
/** https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type */ export var ApplicationCommandOptionTypes =
  /*#__PURE__*/ (function (ApplicationCommandOptionTypes) {
    ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['SubCommand'] = 1)] = 'SubCommand'
    ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['SubCommandGroup'] = 2)] = 'SubCommandGroup'
    ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['String'] = 3)] = 'String'
    /** Any integer between -2^53 and 2^53 */ ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['Integer'] = 4)] = 'Integer'
    ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['Boolean'] = 5)] = 'Boolean'
    ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['User'] = 6)] = 'User'
    /** Includes all channel types + categories */ ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['Channel'] = 7)] = 'Channel'
    ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['Role'] = 8)] = 'Role'
    /** Includes users and roles */ ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['Mentionable'] = 9)] = 'Mentionable'
    /** Any double between -2^53 and 2^53 */ ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['Number'] = 10)] = 'Number'
    /** Attachment object */ ApplicationCommandOptionTypes[(ApplicationCommandOptionTypes['Attachment'] = 11)] = 'Attachment'
    return ApplicationCommandOptionTypes
  })({})
/** https://discord.com/developers/docs/interactions/application-commands#application-command-object-entry-point-command-handler-types */ export var DiscordInteractionEntryPointCommandHandlerType =
  /*#__PURE__*/ (function (DiscordInteractionEntryPointCommandHandlerType) {
    /** The app handles the interaction using an interaction token */ DiscordInteractionEntryPointCommandHandlerType[
      (DiscordInteractionEntryPointCommandHandlerType['AppHandler'] = 1)
    ] = 'AppHandler'
    /** Discord handles the interaction by launching an Activity and sending a follow-up message without coordinating with the app */ DiscordInteractionEntryPointCommandHandlerType[
      (DiscordInteractionEntryPointCommandHandlerType['DiscordLaunchActivity'] = 2)
    ] = 'DiscordLaunchActivity'
    return DiscordInteractionEntryPointCommandHandlerType
  })({})
/** https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type */ export var ApplicationCommandPermissionTypes =
  /*#__PURE__*/ (function (ApplicationCommandPermissionTypes) {
    ApplicationCommandPermissionTypes[(ApplicationCommandPermissionTypes['Role'] = 1)] = 'Role'
    ApplicationCommandPermissionTypes[(ApplicationCommandPermissionTypes['User'] = 2)] = 'User'
    ApplicationCommandPermissionTypes[(ApplicationCommandPermissionTypes['Channel'] = 3)] = 'Channel'
    return ApplicationCommandPermissionTypes
  })({})

//# sourceMappingURL=data:application/json;base64,
