/**
 * Types for:
 *  - https://discord.com/developers/docs/events/gateway
 *  - https://discord.com/developers/docs/events/gateway-events
 */ /** https://discord.com/developers/docs/events/gateway#list-of-intents */ export var GatewayIntents = /*#__PURE__*/ (function (GatewayIntents) {
  /**
   * - GUILD_CREATE
   * - GUILD_UPDATE
   * - GUILD_DELETE
   * - GUILD_ROLE_CREATE
   * - GUILD_ROLE_UPDATE
   * - GUILD_ROLE_DELETE
   * - CHANNEL_CREATE
   * - CHANNEL_UPDATE
   * - CHANNEL_DELETE
   * - CHANNEL_PINS_UPDATE
   * - THREAD_CREATE
   * - THREAD_UPDATE
   * - THREAD_DELETE
   * - THREAD_LIST_SYNC
   * - THREAD_MEMBER_UPDATE
   * - THREAD_MEMBERS_UPDATE
   * - STAGE_INSTANCE_CREATE
   * - STAGE_INSTANCE_UPDATE
   * - STAGE_INSTANCE_DELETE
   */ GatewayIntents[(GatewayIntents['Guilds'] = 1)] = 'Guilds'
  /**
   * - GUILD_MEMBER_ADD
   * - GUILD_MEMBER_UPDATE
   * - GUILD_MEMBER_REMOVE
   * - THREAD_MEMBERS_UPDATE
   *
   * This is a privileged intent.
   */ GatewayIntents[(GatewayIntents['GuildMembers'] = 2)] = 'GuildMembers'
  /**
   * - GUILD_AUDIT_LOG_ENTRY_CREATE
   * - GUILD_BAN_ADD
   * - GUILD_BAN_REMOVE
   */ GatewayIntents[(GatewayIntents['GuildModeration'] = 4)] = 'GuildModeration'
  /**
   * - GUILD_EMOJIS_UPDATE
   * - GUILD_STICKERS_UPDATE
   * - GUILD_SOUNDBOARD_SOUND_CREATE
   * - GUILD_SOUNDBOARD_SOUND_UPDATE
   * - GUILD_SOUNDBOARD_SOUND_DELETE
   * - GUILD_SOUNDBOARD_SOUNDS_UPDATE
   */ GatewayIntents[(GatewayIntents['GuildExpressions'] = 8)] = 'GuildExpressions'
  /**
   * - GUILD_INTEGRATIONS_UPDATE
   * - INTEGRATION_CREATE
   * - INTEGRATION_UPDATE
   * - INTEGRATION_DELETE
   */ GatewayIntents[(GatewayIntents['GuildIntegrations'] = 16)] = 'GuildIntegrations'
  /**
   * - WEBHOOKS_UPDATE
   */ GatewayIntents[(GatewayIntents['GuildWebhooks'] = 32)] = 'GuildWebhooks'
  /**
   * - INVITE_CREATE
   * - INVITE_DELETE
   */ GatewayIntents[(GatewayIntents['GuildInvites'] = 64)] = 'GuildInvites'
  /**
   * - VOICE_STATE_UPDATE
   * - VOICE_CHANNEL_EFFECT_SEND
   */ GatewayIntents[(GatewayIntents['GuildVoiceStates'] = 128)] = 'GuildVoiceStates'
  /**
   * - PRESENCE_UPDATE
   *
   * This is a privileged intent.
   */ GatewayIntents[(GatewayIntents['GuildPresences'] = 256)] = 'GuildPresences'
  /**
   * - MESSAGE_CREATE
   * - MESSAGE_UPDATE
   * - MESSAGE_DELETE
   * - MESSAGE_DELETE_BULK
   *
   * The messages do not contain content by default.
   * If you want to receive their content too, you need to turn on the privileged `MESSAGE_CONTENT` intent. */ GatewayIntents[
    (GatewayIntents['GuildMessages'] = 512)
  ] = 'GuildMessages'
  /**
   * - MESSAGE_REACTION_ADD
   * - MESSAGE_REACTION_REMOVE
   * - MESSAGE_REACTION_REMOVE_ALL
   * - MESSAGE_REACTION_REMOVE_EMOJI
   */ GatewayIntents[(GatewayIntents['GuildMessageReactions'] = 1024)] = 'GuildMessageReactions'
  /**
   * - TYPING_START
   */ GatewayIntents[(GatewayIntents['GuildMessageTyping'] = 2048)] = 'GuildMessageTyping'
  /**
   * - CHANNEL_CREATE
   * - MESSAGE_CREATE
   * - MESSAGE_UPDATE
   * - MESSAGE_DELETE
   * - CHANNEL_PINS_UPDATE
   */ GatewayIntents[(GatewayIntents['DirectMessages'] = 4096)] = 'DirectMessages'
  /**
   * - MESSAGE_REACTION_ADD
   * - MESSAGE_REACTION_REMOVE
   * - MESSAGE_REACTION_REMOVE_ALL
   * - MESSAGE_REACTION_REMOVE_EMOJI
   */ GatewayIntents[(GatewayIntents['DirectMessageReactions'] = 8192)] = 'DirectMessageReactions'
  /**
   * - TYPING_START
   */ GatewayIntents[(GatewayIntents['DirectMessageTyping'] = 16384)] = 'DirectMessageTyping'
  /**
   * This intent will add all content related values to message events.
   *
   * This is a privileged intent.
   */ GatewayIntents[(GatewayIntents['MessageContent'] = 32768)] = 'MessageContent'
  /**
   * - GUILD_SCHEDULED_EVENT_CREATE
   * - GUILD_SCHEDULED_EVENT_UPDATE
   * - GUILD_SCHEDULED_EVENT_DELETE
   * - GUILD_SCHEDULED_EVENT_USER_ADD this is experimental and unstable.
   * - GUILD_SCHEDULED_EVENT_USER_REMOVE this is experimental and unstable.
   */ GatewayIntents[(GatewayIntents['GuildScheduledEvents'] = 65536)] = 'GuildScheduledEvents'
  /**
   * - AUTO_MODERATION_RULE_CREATE
   * - AUTO_MODERATION_RULE_UPDATE
   * - AUTO_MODERATION_RULE_DELETE
   */ GatewayIntents[(GatewayIntents['AutoModerationConfiguration'] = 1048576)] = 'AutoModerationConfiguration'
  /**
   * - AUTO_MODERATION_ACTION_EXECUTION
   */ GatewayIntents[(GatewayIntents['AutoModerationExecution'] = 2097152)] = 'AutoModerationExecution'
  /**
   * - MESSAGE_POLL_VOTE_ADD
   * - MESSAGE_POLL_VOTE_REMOVE
   */ GatewayIntents[(GatewayIntents['GuildMessagePolls'] = 16777216)] = 'GuildMessagePolls'
  /**
   * - MESSAGE_POLL_VOTE_ADD
   * - MESSAGE_POLL_VOTE_REMOVE
   */ GatewayIntents[(GatewayIntents['DirectMessagePolls'] = 33554432)] = 'DirectMessagePolls'
  return GatewayIntents
})({})
export { GatewayIntents as Intents }
/** https://discord.com/developers/docs/events/gateway-events#update-presence-status-types */ export var PresenceStatus = /*#__PURE__*/ (function (
  PresenceStatus,
) {
  PresenceStatus[(PresenceStatus['online'] = 0)] = 'online'
  PresenceStatus[(PresenceStatus['dnd'] = 1)] = 'dnd'
  PresenceStatus[(PresenceStatus['idle'] = 2)] = 'idle'
  PresenceStatus[(PresenceStatus['invisible'] = 3)] = 'invisible'
  PresenceStatus[(PresenceStatus['offline'] = 4)] = 'offline'
  return PresenceStatus
})({})
/** https://discord.com/developers/docs/events/gateway-events#activity-object-activity-types */ export var ActivityTypes = /*#__PURE__*/ (function (
  ActivityTypes,
) {
  ActivityTypes[(ActivityTypes['Playing'] = 0)] = 'Playing'
  ActivityTypes[(ActivityTypes['Streaming'] = 1)] = 'Streaming'
  ActivityTypes[(ActivityTypes['Listening'] = 2)] = 'Listening'
  ActivityTypes[(ActivityTypes['Watching'] = 3)] = 'Watching'
  ActivityTypes[(ActivityTypes['Custom'] = 4)] = 'Custom'
  ActivityTypes[(ActivityTypes['Competing'] = 5)] = 'Competing'
  return ActivityTypes
})({})
/** https://discord.com/developers/docs/events/gateway-events#activity-object-status-display-types */ export var DiscordStatusDisplayType =
  /*#__PURE__*/ (function (DiscordStatusDisplayType) {
    /** Example: "Listening to Spotify" */ DiscordStatusDisplayType[(DiscordStatusDisplayType['Name'] = 0)] = 'Name'
    /** Example: "Listening to Rick Astley" */ DiscordStatusDisplayType[(DiscordStatusDisplayType['State'] = 1)] = 'State'
    /** Example: "Listening to Never Gonna Give You Up" */ DiscordStatusDisplayType[(DiscordStatusDisplayType['Details'] = 2)] = 'Details'
    return DiscordStatusDisplayType
  })({})
/** https://discord.com/developers/docs/events/gateway-events#activity-object-activity-flags */ export var ActivityFlags = /*#__PURE__*/ (function (
  ActivityFlags,
) {
  ActivityFlags[(ActivityFlags['Instance'] = 1)] = 'Instance'
  ActivityFlags[(ActivityFlags['Join'] = 2)] = 'Join'
  ActivityFlags[(ActivityFlags['Spectate'] = 4)] = 'Spectate'
  ActivityFlags[(ActivityFlags['JoinRequest'] = 8)] = 'JoinRequest'
  ActivityFlags[(ActivityFlags['Sync'] = 16)] = 'Sync'
  ActivityFlags[(ActivityFlags['Play'] = 32)] = 'Play'
  ActivityFlags[(ActivityFlags['PartyPrivacyFriends'] = 64)] = 'PartyPrivacyFriends'
  ActivityFlags[(ActivityFlags['PartyPrivacyVoiceChannel'] = 128)] = 'PartyPrivacyVoiceChannel'
  ActivityFlags[(ActivityFlags['Embedded'] = 256)] = 'Embedded'
  return ActivityFlags
})({})
/** https://discord.com/developers/docs/events/gateway-events#voice-channel-effect-send-animation-types */ export var DiscordVoiceChannelEffectAnimationType =
  /*#__PURE__*/ (function (DiscordVoiceChannelEffectAnimationType) {
    /** A fun animation, sent by a Nitro subscriber */ DiscordVoiceChannelEffectAnimationType[
      (DiscordVoiceChannelEffectAnimationType['Premium'] = 0)
    ] = 'Premium'
    /** The standard animation */ DiscordVoiceChannelEffectAnimationType[(DiscordVoiceChannelEffectAnimationType['Basic'] = 1)] = 'Basic'
    return DiscordVoiceChannelEffectAnimationType
  })({})

//# sourceMappingURL=data:application/json;base64,
