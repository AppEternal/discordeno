/** Types for: https://discord.com/developers/docs/resources/message */ /** https://discord.com/developers/docs/resources/message#message-object-message-types */ export var MessageTypes =
  /*#__PURE__*/ (function (MessageTypes) {
    MessageTypes[(MessageTypes['Default'] = 0)] = 'Default'
    MessageTypes[(MessageTypes['RecipientAdd'] = 1)] = 'RecipientAdd'
    MessageTypes[(MessageTypes['RecipientRemove'] = 2)] = 'RecipientRemove'
    MessageTypes[(MessageTypes['Call'] = 3)] = 'Call'
    MessageTypes[(MessageTypes['ChannelNameChange'] = 4)] = 'ChannelNameChange'
    MessageTypes[(MessageTypes['ChannelIconChange'] = 5)] = 'ChannelIconChange'
    MessageTypes[(MessageTypes['ChannelPinnedMessage'] = 6)] = 'ChannelPinnedMessage'
    MessageTypes[(MessageTypes['UserJoin'] = 7)] = 'UserJoin'
    MessageTypes[(MessageTypes['GuildBoost'] = 8)] = 'GuildBoost'
    MessageTypes[(MessageTypes['GuildBoostTier1'] = 9)] = 'GuildBoostTier1'
    MessageTypes[(MessageTypes['GuildBoostTier2'] = 10)] = 'GuildBoostTier2'
    MessageTypes[(MessageTypes['GuildBoostTier3'] = 11)] = 'GuildBoostTier3'
    MessageTypes[(MessageTypes['ChannelFollowAdd'] = 12)] = 'ChannelFollowAdd'
    MessageTypes[(MessageTypes['GuildDiscoveryDisqualified'] = 14)] = 'GuildDiscoveryDisqualified'
    MessageTypes[(MessageTypes['GuildDiscoveryRequalified'] = 15)] = 'GuildDiscoveryRequalified'
    MessageTypes[(MessageTypes['GuildDiscoveryGracePeriodInitialWarning'] = 16)] = 'GuildDiscoveryGracePeriodInitialWarning'
    MessageTypes[(MessageTypes['GuildDiscoveryGracePeriodFinalWarning'] = 17)] = 'GuildDiscoveryGracePeriodFinalWarning'
    MessageTypes[(MessageTypes['ThreadCreated'] = 18)] = 'ThreadCreated'
    MessageTypes[(MessageTypes['Reply'] = 19)] = 'Reply'
    MessageTypes[(MessageTypes['ChatInputCommand'] = 20)] = 'ChatInputCommand'
    MessageTypes[(MessageTypes['ThreadStarterMessage'] = 21)] = 'ThreadStarterMessage'
    MessageTypes[(MessageTypes['GuildInviteReminder'] = 22)] = 'GuildInviteReminder'
    MessageTypes[(MessageTypes['ContextMenuCommand'] = 23)] = 'ContextMenuCommand'
    MessageTypes[(MessageTypes['AutoModerationAction'] = 24)] = 'AutoModerationAction'
    MessageTypes[(MessageTypes['RoleSubscriptionPurchase'] = 25)] = 'RoleSubscriptionPurchase'
    MessageTypes[(MessageTypes['InteractionPremiumUpsell'] = 26)] = 'InteractionPremiumUpsell'
    MessageTypes[(MessageTypes['StageStart'] = 27)] = 'StageStart'
    MessageTypes[(MessageTypes['StageEnd'] = 28)] = 'StageEnd'
    MessageTypes[(MessageTypes['StageSpeaker'] = 29)] = 'StageSpeaker'
    MessageTypes[(MessageTypes['StageTopic'] = 31)] = 'StageTopic'
    MessageTypes[(MessageTypes['GuildApplicationPremiumSubscription'] = 32)] = 'GuildApplicationPremiumSubscription'
    MessageTypes[(MessageTypes['GuildIncidentAlertModeEnabled'] = 36)] = 'GuildIncidentAlertModeEnabled'
    MessageTypes[(MessageTypes['GuildIncidentAlertModeDisabled'] = 37)] = 'GuildIncidentAlertModeDisabled'
    MessageTypes[(MessageTypes['GuildIncidentReportRaid'] = 38)] = 'GuildIncidentReportRaid'
    MessageTypes[(MessageTypes['GuildIncidentReportFalseAlarm'] = 39)] = 'GuildIncidentReportFalseAlarm'
    MessageTypes[(MessageTypes['PurchaseNotification'] = 44)] = 'PurchaseNotification'
    MessageTypes[(MessageTypes['PollResult'] = 46)] = 'PollResult'
    return MessageTypes
  })({})
/** https://discord.com/developers/docs/resources/message#message-object-message-activity-types */ export var MessageActivityTypes =
  /*#__PURE__*/ (function (MessageActivityTypes) {
    MessageActivityTypes[(MessageActivityTypes['Join'] = 1)] = 'Join'
    MessageActivityTypes[(MessageActivityTypes['Spectate'] = 2)] = 'Spectate'
    MessageActivityTypes[(MessageActivityTypes['Listen'] = 3)] = 'Listen'
    MessageActivityTypes[(MessageActivityTypes['JoinRequest'] = 5)] = 'JoinRequest'
    return MessageActivityTypes
  })({})
/** https://discord.com/developers/docs/resources/message#message-object-message-flags */ export var MessageFlags = /*#__PURE__*/ (function (
  MessageFlags,
) {
  /** This message has been published to subscribed channels (via Channel Following) */ MessageFlags[(MessageFlags['Crossposted'] = 1)] =
    'Crossposted'
  /** This message originated from a message in another channel (via Channel Following) */ MessageFlags[(MessageFlags['IsCrosspost'] = 2)] =
    'IsCrosspost'
  /** Do not include any embeds when serializing this message */ MessageFlags[(MessageFlags['SuppressEmbeds'] = 4)] = 'SuppressEmbeds'
  /** The source message for this crosspost has been deleted (via Channel Following) */ MessageFlags[(MessageFlags['SourceMessageDeleted'] = 8)] =
    'SourceMessageDeleted'
  /** This message came from the urgent message system */ MessageFlags[(MessageFlags['Urgent'] = 16)] = 'Urgent'
  /** This message has an associated thread, with the same id as the message */ MessageFlags[(MessageFlags['HasThread'] = 32)] = 'HasThread'
  /** This message is only visible to the user who invoked the Interaction */ MessageFlags[(MessageFlags['Ephemeral'] = 64)] = 'Ephemeral'
  /** This message is an Interaction Response and the bot is "thinking" */ MessageFlags[(MessageFlags['Loading'] = 128)] = 'Loading'
  /** This message failed to mention some roles and add their members to the thread */ MessageFlags[
    (MessageFlags['FailedToMentionSomeRolesInThread'] = 256)
  ] = 'FailedToMentionSomeRolesInThread'
  /** This message will not trigger push and desktop notifications */ MessageFlags[(MessageFlags['SuppressNotifications'] = 4096)] =
    'SuppressNotifications'
  /** This message is a voice message */ MessageFlags[(MessageFlags['IsVoiceMessage'] = 8192)] = 'IsVoiceMessage'
  /** This message has a snapshot (via Message Forwarding) */ MessageFlags[(MessageFlags['HasSnapshot'] = 16384)] = 'HasSnapshot'
  /**
   * Allows you to create fully component-driven messages
   *
   * @remarks
   * Once a message has been sent with this flag, it can't be removed from that message.
   */ MessageFlags[(MessageFlags['IsComponentsV2'] = 32768)] = 'IsComponentsV2'
  return MessageFlags
})({})
/** https://discord.com/developers/docs/resources/message#message-reference-types */ export var DiscordMessageReferenceType =
  /*#__PURE__*/ (function (DiscordMessageReferenceType) {
    /**
     * A standard reference used by replies.
     *
     * @remarks
     * When the type is set to this value, the field referenced_message on the message will be present
     */ DiscordMessageReferenceType[(DiscordMessageReferenceType['Default'] = 0)] = 'Default'
    /**
     * Reference used to point to a message at a point in time.
     *
     * @remarks
     * When the type is set to this value, the field message_snapshot on the message will be present
     *
     * This value can only be used for basic messages;
     * i.e. messages which do not have strong bindings to a non global entity.
     * Thus we support only messages with type `DEFAULT`, `REPLY`, `CHAT_INPUT_COMMAND`, or `CONTEXT_MENU_COMMAND`, and don't support messages with a poll, call, or activity.
     */ DiscordMessageReferenceType[(DiscordMessageReferenceType['Forward'] = 1)] = 'Forward'
    return DiscordMessageReferenceType
  })({})
/** https://discord.com/developers/docs/resources/message#attachment-object-attachment-flags */ export var AttachmentFlags = /*#__PURE__*/ (function (
  AttachmentFlags,
) {
  AttachmentFlags[(AttachmentFlags['None'] = 0)] = 'None'
  /** This attachment has been edited using the remix feature on mobile */ AttachmentFlags[(AttachmentFlags['IsRemix'] = 4)] = 'IsRemix'
  return AttachmentFlags
})({})
/** https://discord.com/developers/docs/resources/message#allowed-mentions-object-allowed-mention-types */ export var AllowedMentionsTypes =
  /*#__PURE__*/ (function (AllowedMentionsTypes) {
    /** Controls role mentions */ AllowedMentionsTypes['RoleMentions'] = 'roles'
    /** Controls user mentions */ AllowedMentionsTypes['UserMentions'] = 'users'
    /** Controls \@everyone and \@here mentions */ AllowedMentionsTypes['EveryoneMentions'] = 'everyone'
    return AllowedMentionsTypes
  })({})
/** https://discord.com/developers/docs/resources/message#get-reactions-reaction-types */ export var DiscordReactionType = /*#__PURE__*/ (function (
  DiscordReactionType,
) {
  DiscordReactionType[(DiscordReactionType['Normal'] = 0)] = 'Normal'
  DiscordReactionType[(DiscordReactionType['Burst'] = 1)] = 'Burst'
  return DiscordReactionType
})({})

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaXNjb3JkL21lc3NhZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFR5cGVzIGZvcjogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UgKi9cblxuaW1wb3J0IHR5cGUgeyBEaXNjb3JkQXBwbGljYXRpb24gfSBmcm9tICcuL2FwcGxpY2F0aW9uLmpzJ1xuaW1wb3J0IHR5cGUgeyBEaXNjb3JkQ2hhbm5lbCwgRGlzY29yZFRocmVhZE1lbWJlciB9IGZyb20gJy4vY2hhbm5lbC5qcydcbmltcG9ydCB0eXBlIHsgRGlzY29yZE1lc3NhZ2VDb21wb25lbnRzIH0gZnJvbSAnLi9jb21wb25lbnRzLmpzJ1xuaW1wb3J0IHR5cGUgeyBEaXNjb3JkRW1vamkgfSBmcm9tICcuL2Vtb2ppLmpzJ1xuaW1wb3J0IHR5cGUgeyBEaXNjb3JkTWVzc2FnZUNyZWF0ZUV4dHJhIH0gZnJvbSAnLi9nYXRld2F5LmpzJ1xuaW1wb3J0IHR5cGUge1xuICBEaXNjb3JkQXV0aG9yaXppbmdJbnRlZ3JhdGlvbk93bmVycyxcbiAgRGlzY29yZEludGVyYWN0aW9uRGF0YVJlc29sdmVkLFxuICBEaXNjb3JkTWVzc2FnZUludGVyYWN0aW9uLFxuICBJbnRlcmFjdGlvblR5cGVzLFxufSBmcm9tICcuL2ludGVyYWN0aW9ucy5qcydcbmltcG9ydCB0eXBlIHsgRGlzY29yZFBvbGwgfSBmcm9tICcuL3BvbGwuanMnXG5pbXBvcnQgdHlwZSB7IERpc2NvcmRTdGlja2VyLCBEaXNjb3JkU3RpY2tlckl0ZW0gfSBmcm9tICcuL3N0aWNrZXIuanMnXG5pbXBvcnQgdHlwZSB7IERpc2NvcmRVc2VyIH0gZnJvbSAnLi91c2VyLmpzJ1xuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjbWVzc2FnZS1vYmplY3QtbWVzc2FnZS1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZE1lc3NhZ2UgZXh0ZW5kcyBQYXJ0aWFsPERpc2NvcmRNZXNzYWdlQ3JlYXRlRXh0cmE+IHtcbiAgLyoqIGlkIG9mIHRoZSBtZXNzYWdlICovXG4gIGlkOiBzdHJpbmdcbiAgLyoqIGlkIG9mIHRoZSBjaGFubmVsIHRoZSBtZXNzYWdlIHdhcyBzZW50IGluICovXG4gIGNoYW5uZWxfaWQ6IHN0cmluZ1xuICAvKipcbiAgICogVGhlIGF1dGhvciBvZiB0aGlzIG1lc3NhZ2UgKG5vdCBndWFyYW50ZWVkIHRvIGJlIGEgdmFsaWQgdXNlcilcbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogVGhlIGF1dGhvciBvYmplY3QgZm9sbG93cyB0aGUgc3RydWN0dXJlIG9mIHRoZSB1c2VyIG9iamVjdCwgYnV0IGlzIG9ubHkgYSB2YWxpZCB1c2VyIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBtZXNzYWdlIGlzIGdlbmVyYXRlZCBieSBhIHVzZXIgb3IgYm90IHVzZXIuIElmIHRoZSBtZXNzYWdlIGlzIGdlbmVyYXRlZCBieSBhIHdlYmhvb2ssIHRoZSBhdXRob3Igb2JqZWN0IGNvcnJlc3BvbmRzIHRvIHRoZSB3ZWJob29rJ3MgaWQsIHVzZXJuYW1lLCBhbmQgYXZhdGFyLiBZb3UgY2FuIHRlbGwgaWYgYSBtZXNzYWdlIGlzIGdlbmVyYXRlZCBieSBhIHdlYmhvb2sgYnkgY2hlY2tpbmcgZm9yIHRoZSB3ZWJob29rX2lkIG9uIHRoZSBtZXNzYWdlIG9iamVjdC5cbiAgICovXG4gIGF1dGhvcjogRGlzY29yZFVzZXJcbiAgLyoqIENvbnRlbnRzIG9mIHRoZSBtZXNzYWdlICovXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICAvKiogV2hlbiB0aGlzIG1lc3NhZ2Ugd2FzIHNlbnQgKi9cbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgLyoqIFdoZW4gdGhpcyBtZXNzYWdlIHdhcyBlZGl0ZWQgKG9yIG51bGwgaWYgbmV2ZXIpICovXG4gIGVkaXRlZF90aW1lc3RhbXA6IHN0cmluZyB8IG51bGxcbiAgLyoqIFdoZXRoZXIgdGhpcyB3YXMgYSBUVFMgbWVzc2FnZSAqL1xuICB0dHM6IGJvb2xlYW5cbiAgLyoqIFdoZXRoZXIgdGhpcyBtZXNzYWdlIG1lbnRpb25zIGV2ZXJ5b25lICovXG4gIG1lbnRpb25fZXZlcnlvbmU6IGJvb2xlYW5cbiAgLy8gVE9ETzogV2hlbiB3ZSBzZXBhcmF0ZSB0aGUgdHlwZXMgYmV0d2VlbiB3aXRoIGV4dHJhIGZpZWxkcyBmcm9tIGdhdGV3YXkgYW5kIG5vbiwgd2Ugc2hvdWxkIGFkZCBiYWNrIHRoZSBtZW50aW9ucyBmaWVsZCBiZWxvd1xuICAvLyAgICAgICBGb3Igbm93IGl0IGNhbiByZW1haW4gZnJvbSB0aGUgZ2F0ZXdheSBleHRyYSBmaWVsZHMgdG8gYXZvaWQgYnJlYWtpbmcgY2hhbmdlcyBmb3Igbm93LlxuICAvLyAvKiogVXNlcnMgc3BlY2lmaWNhbGx5IG1lbnRpb25lZCBpbiB0aGUgbWVzc2FnZSAqL1xuICAvLyBtZW50aW9uczogRGlzY29yZFVzZXJbXVxuICAvKiogUm9sZXMgc3BlY2lmaWNhbGx5IG1lbnRpb25lZCBpbiB0aGlzIG1lc3NhZ2UgKi9cbiAgbWVudGlvbl9yb2xlczogc3RyaW5nW11cbiAgLyoqXG4gICAqIENoYW5uZWxzIHNwZWNpZmljYWxseSBtZW50aW9uZWQgaW4gdGhpcyBtZXNzYWdlXG4gICAqIE5vdGU6IE5vdCBhbGwgY2hhbm5lbCBtZW50aW9ucyBpbiBhIG1lc3NhZ2Ugd2lsbCBhcHBlYXIgaW4gYG1lbnRpb25fY2hhbm5lbHNgLiBPbmx5IHRleHR1YWwgY2hhbm5lbHMgdGhhdCBhcmUgdmlzaWJsZSB0byBldmVyeW9uZSBpbiBhIGRpc2NvdmVyYWJsZSBndWlsZCB3aWxsIGV2ZXIgYmUgaW5jbHVkZWQuIE9ubHkgY3Jvc3Nwb3N0ZWQgbWVzc2FnZXMgKHZpYSBDaGFubmVsIEZvbGxvd2luZykgY3VycmVudGx5IGluY2x1ZGUgYG1lbnRpb25fY2hhbm5lbHNgIGF0IGFsbC4gSWYgbm8gbWVudGlvbnMgaW4gdGhlIG1lc3NhZ2UgbWVldCB0aGVzZSByZXF1aXJlbWVudHMsIHRoaXMgZmllbGQgd2lsbCBub3QgYmUgc2VudC5cbiAgICovXG4gIG1lbnRpb25fY2hhbm5lbHM/OiBEaXNjb3JkQ2hhbm5lbE1lbnRpb25bXVxuICAvKiogQW55IGF0dGFjaGVkIGZpbGVzICovXG4gIGF0dGFjaG1lbnRzOiBEaXNjb3JkQXR0YWNobWVudFtdXG4gIC8qKiBBbnkgZW1iZWRkZWQgY29udGVudCAqL1xuICBlbWJlZHM6IERpc2NvcmRFbWJlZFtdXG4gIC8qKiBSZWFjdGlvbnMgdG8gdGhlIG1lc3NhZ2UgKi9cbiAgcmVhY3Rpb25zPzogRGlzY29yZFJlYWN0aW9uW11cbiAgLyoqIFVzZWQgZm9yIHZhbGlkYXRpbmcgYSBtZXNzYWdlIHdhcyBzZW50ICovXG4gIG5vbmNlPzogbnVtYmVyIHwgc3RyaW5nXG4gIC8qKiBXaGV0aGVyIHRoaXMgbWVzc2FnZSBpcyBwaW5uZWQgKi9cbiAgcGlubmVkOiBib29sZWFuXG4gIC8qKiBJZiB0aGUgbWVzc2FnZSBpcyBnZW5lcmF0ZWQgYnkgYSB3ZWJob29rLCB0aGlzIGlzIHRoZSB3ZWJob29rJ3MgaWQgKi9cbiAgd2ViaG9va19pZD86IHN0cmluZ1xuICAvKiogVHlwZSBvZiBtZXNzYWdlICovXG4gIHR5cGU6IE1lc3NhZ2VUeXBlc1xuICAvKiogU2VudCB3aXRoIFJpY2ggUHJlc2VuY2UtcmVsYXRlZCBjaGF0IGVtYmVkcyAqL1xuICBhY3Rpdml0eT86IERpc2NvcmRNZXNzYWdlQWN0aXZpdHlcbiAgLyoqIFNlbnQgd2l0aCBSaWNoIFByZXNlbmNlLXJlbGF0ZWQgY2hhdCBlbWJlZHMgKi9cbiAgYXBwbGljYXRpb24/OiBQYXJ0aWFsPERpc2NvcmRBcHBsaWNhdGlvbj5cbiAgLyoqIGlmIHRoZSBtZXNzYWdlIGlzIGFuIEludGVyYWN0aW9uIG9yIGFwcGxpY2F0aW9uLW93bmVkIHdlYmhvb2ssIHRoaXMgaXMgdGhlIGlkIG9mIHRoZSBhcHBsaWNhdGlvbiAqL1xuICBhcHBsaWNhdGlvbl9pZD86IHN0cmluZ1xuICAvKiogTWVzc2FnZSBmbGFncyBjb21iaW5lZCBhcyBhIGJpdGZpZWxkICovXG4gIGZsYWdzPzogTWVzc2FnZUZsYWdzXG4gIC8qKiBEYXRhIHNob3dpbmcgdGhlIHNvdXJjZSBvZiBhIGNyb3NzcG9zdCwgY2hhbm5lbCBmb2xsb3cgYWRkLCBwaW4sIG9yIHJlcGx5IG1lc3NhZ2UgKi9cbiAgbWVzc2FnZV9yZWZlcmVuY2U/OiBPbWl0PERpc2NvcmRNZXNzYWdlUmVmZXJlbmNlLCAnZmFpbElmTm90RXhpc3RzJz5cbiAgLyoqIFRoZSBtZXNzYWdlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYG1lc3NhZ2VfcmVmZXJlbmNlYC4gVGhpcyBpcyBhIG1pbmltYWwgc3Vic2V0IG9mIGZpZWxkcyBpbiBhIG1lc3NhZ2UgKGUuZy4gYGF1dGhvcmAgaXMgZXhjbHVkZWQuKSAgKi9cbiAgbWVzc2FnZV9zbmFwc2hvdHM/OiBEaXNjb3JkTWVzc2FnZVNuYXBzaG90W11cbiAgLyoqXG4gICAqIFRoZSBtZXNzYWdlIGFzc29jaWF0ZWQgd2l0aCB0aGUgJ21lc3NhZ2VfcmVmZXJlbmNlJ1xuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBUaGlzIGZpZWxkIGlzIG9ubHkgcmV0dXJuZWQgZm9yIG1lc3NhZ2VzIHdpdGggYSAndHlwZScgb2YgJzE5JywgJzIxJywgb3IgJzIzJy4gSWYgdGhlIG1lc3NhZ2UgaXMgb25lIG9mIHRoZXNlIGJ1dCB0aGUgJ3JlZmVyZW5jZWRfbWVzc2FnZScgZmllbGQgaXMgbm90IHByZXNlbnQsIHRoZSBiYWNrZW5kIGRpZCBub3QgYXR0ZW1wdCB0byBmZXRjaCB0aGUgbWVzc2FnZSB0aGF0IHdhcyBiZWluZyByZXBsaWVkIHRvLCBzbyBpdHMgc3RhdGUgaXMgdW5rbm93bi4gSWYgdGhlIGZpZWxkIGV4aXN0cyBidXQgaXMgbnVsbCwgdGhlIHJlZmVyZW5jZWQgbWVzc2FnZSB3YXMgZGVsZXRlZC5cbiAgICovXG4gIHJlZmVyZW5jZWRfbWVzc2FnZT86IERpc2NvcmRNZXNzYWdlIHwgbnVsbFxuICAvKiogc2VudCBpZiB0aGUgbWVzc2FnZSBpcyBzZW50IGFzIGEgcmVzdWx0IG9mIGFuIGludGVyYWN0aW9uICovXG4gIGludGVyYWN0aW9uX21ldGFkYXRhPzogRGlzY29yZE1lc3NhZ2VJbnRlcmFjdGlvbk1ldGFkYXRhXG4gIC8qKlxuICAgKiBTZW50IGlmIHRoZSBtZXNzYWdlIGlzIGEgcmVzcG9uc2UgdG8gYW4gSW50ZXJhY3Rpb25cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiB7QGxpbmsgaW50ZXJhY3Rpb25fbWV0YWRhdGF9XG4gICAqL1xuICBpbnRlcmFjdGlvbj86IERpc2NvcmRNZXNzYWdlSW50ZXJhY3Rpb25cbiAgLyoqIFRoZSB0aHJlYWQgdGhhdCB3YXMgc3RhcnRlZCBmcm9tIHRoaXMgbWVzc2FnZSwgaW5jbHVkZXMgdGhyZWFkIG1lbWJlciBvYmplY3QgKi9cbiAgdGhyZWFkPzogT21pdDxEaXNjb3JkQ2hhbm5lbCwgJ21lbWJlcic+ICYgeyBtZW1iZXI6IERpc2NvcmRUaHJlYWRNZW1iZXIgfVxuICAvKiogVGhlIGNvbXBvbmVudHMgcmVsYXRlZCB0byB0aGlzIG1lc3NhZ2UgKi9cbiAgY29tcG9uZW50cz86IERpc2NvcmRNZXNzYWdlQ29tcG9uZW50c1xuICAvKiogU2VudCBpZiB0aGUgbWVzc2FnZSBjb250YWlucyBzdGlja2VycyAqL1xuICBzdGlja2VyX2l0ZW1zPzogRGlzY29yZFN0aWNrZXJJdGVtW11cbiAgLyoqXG4gICAqIFRoZSBzdGlja2VycyBzZW50IHdpdGggdGhlIG1lc3NhZ2UgKGJvdHMgY3VycmVudGx5IGNhbiBvbmx5IHJlY2VpdmUgbWVzc2FnZXMgd2l0aCBzdGlja2Vycywgbm90IHNlbmQpXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBzdGlja2Vycz86IERpc2NvcmRTdGlja2VyW11cbiAgLyoqIEEgZ2VuZXJhbGx5IGluY3JlYXNpbmcgaW50ZWdlciAodGhlcmUgbWF5IGJlIGdhcHMgb3IgZHVwbGljYXRlcykgdGhhdCByZXByZXNlbnRzIHRoZSBhcHByb3hpbWF0ZSBwb3NpdGlvbiBvZiB0aGUgbWVzc2FnZSBpbiBhIHRocmVhZCwgaXQgY2FuIGJlIHVzZWQgdG8gZXN0aW1hdGUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBtZXNzYWdlIGluIGEgdGhyZWFkIGluIGNvbXBhbnkgd2l0aCBgdG90YWxfbWVzc2FnZV9zZW50YCBvbiBwYXJlbnQgdGhyZWFkICovXG4gIHBvc2l0aW9uPzogbnVtYmVyXG4gIC8qKiBkYXRhIG9mIHRoZSByb2xlIHN1YnNjcmlwdGlvbiBwdXJjaGFzZSBvciByZW5ld2FsIHRoYXQgcHJvbXB0ZWQgdGhpcyBST0xFX1NVQlNDUklQVElPTl9QVVJDSEFTRSBtZXNzYWdlICovXG4gIHJvbGVfc3Vic2NyaXB0aW9uX2RhdGE/OiBEaXNjb3JkUm9sZVN1YnNjcmlwdGlvbkRhdGFcbiAgLyoqIGRhdGEgZm9yIHVzZXJzLCBtZW1iZXJzLCBjaGFubmVscywgYW5kIHJvbGVzIGluIHRoZSBtZXNzYWdlJ3MgYXV0by1wb3B1bGF0ZWQgc2VsZWN0IG1lbnVzICovXG4gIHJlc29sdmVkPzogRGlzY29yZEludGVyYWN0aW9uRGF0YVJlc29sdmVkXG4gIC8qKiBUaGUgcG9sbCBvYmplY3QgKi9cbiAgcG9sbD86IERpc2NvcmRQb2xsXG4gIC8qKiBUaGUgY2FsbCBhc3NvY2lhdGVkIHdpdGggdGhlIG1lc3NhZ2UgKi9cbiAgY2FsbD86IERpc2NvcmRNZXNzYWdlQ2FsbFxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjbWVzc2FnZS1vYmplY3QtbWVzc2FnZS10eXBlcyAqL1xuZXhwb3J0IGVudW0gTWVzc2FnZVR5cGVzIHtcbiAgRGVmYXVsdCxcbiAgUmVjaXBpZW50QWRkLFxuICBSZWNpcGllbnRSZW1vdmUsXG4gIENhbGwsXG4gIENoYW5uZWxOYW1lQ2hhbmdlLFxuICBDaGFubmVsSWNvbkNoYW5nZSxcbiAgQ2hhbm5lbFBpbm5lZE1lc3NhZ2UsXG4gIFVzZXJKb2luLFxuICBHdWlsZEJvb3N0LFxuICBHdWlsZEJvb3N0VGllcjEsXG4gIEd1aWxkQm9vc3RUaWVyMixcbiAgR3VpbGRCb29zdFRpZXIzLFxuICBDaGFubmVsRm9sbG93QWRkLFxuICBHdWlsZERpc2NvdmVyeURpc3F1YWxpZmllZCA9IDE0LFxuICBHdWlsZERpc2NvdmVyeVJlcXVhbGlmaWVkLFxuICBHdWlsZERpc2NvdmVyeUdyYWNlUGVyaW9kSW5pdGlhbFdhcm5pbmcsXG4gIEd1aWxkRGlzY292ZXJ5R3JhY2VQZXJpb2RGaW5hbFdhcm5pbmcsXG4gIFRocmVhZENyZWF0ZWQsXG4gIFJlcGx5LFxuICBDaGF0SW5wdXRDb21tYW5kLFxuICBUaHJlYWRTdGFydGVyTWVzc2FnZSxcbiAgR3VpbGRJbnZpdGVSZW1pbmRlcixcbiAgQ29udGV4dE1lbnVDb21tYW5kLFxuICBBdXRvTW9kZXJhdGlvbkFjdGlvbixcbiAgUm9sZVN1YnNjcmlwdGlvblB1cmNoYXNlLFxuICBJbnRlcmFjdGlvblByZW1pdW1VcHNlbGwsXG4gIFN0YWdlU3RhcnQsXG4gIFN0YWdlRW5kLFxuICBTdGFnZVNwZWFrZXIsXG4gIFN0YWdlVG9waWMgPSAzMSxcbiAgR3VpbGRBcHBsaWNhdGlvblByZW1pdW1TdWJzY3JpcHRpb24sXG4gIEd1aWxkSW5jaWRlbnRBbGVydE1vZGVFbmFibGVkID0gMzYsXG4gIEd1aWxkSW5jaWRlbnRBbGVydE1vZGVEaXNhYmxlZCxcbiAgR3VpbGRJbmNpZGVudFJlcG9ydFJhaWQsXG4gIEd1aWxkSW5jaWRlbnRSZXBvcnRGYWxzZUFsYXJtLFxuICBQdXJjaGFzZU5vdGlmaWNhdGlvbiA9IDQ0LFxuICBQb2xsUmVzdWx0ID0gNDYsXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNtZXNzYWdlLW9iamVjdC1tZXNzYWdlLWFjdGl2aXR5LXN0cnVjdHVyZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNjb3JkTWVzc2FnZUFjdGl2aXR5IHtcbiAgLyoqIFR5cGUgb2YgbWVzc2FnZSBhY3Rpdml0eSAqL1xuICB0eXBlOiBNZXNzYWdlQWN0aXZpdHlUeXBlc1xuICAvKiogYHBhcnR5X2lkYCBmcm9tIGEgUmljaCBQcmVzZW5jZSBldmVudCAqL1xuICBwYXJ0eV9pZD86IHN0cmluZ1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjbWVzc2FnZS1vYmplY3QtbWVzc2FnZS1hY3Rpdml0eS10eXBlcyAqL1xuZXhwb3J0IGVudW0gTWVzc2FnZUFjdGl2aXR5VHlwZXMge1xuICBKb2luID0gMSxcbiAgU3BlY3RhdGUgPSAyLFxuICBMaXN0ZW4gPSAzLFxuICBKb2luUmVxdWVzdCA9IDUsXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNtZXNzYWdlLW9iamVjdC1tZXNzYWdlLWZsYWdzICovXG5leHBvcnQgZW51bSBNZXNzYWdlRmxhZ3Mge1xuICAvKiogVGhpcyBtZXNzYWdlIGhhcyBiZWVuIHB1Ymxpc2hlZCB0byBzdWJzY3JpYmVkIGNoYW5uZWxzICh2aWEgQ2hhbm5lbCBGb2xsb3dpbmcpICovXG4gIENyb3NzcG9zdGVkID0gMSA8PCAwLFxuICAvKiogVGhpcyBtZXNzYWdlIG9yaWdpbmF0ZWQgZnJvbSBhIG1lc3NhZ2UgaW4gYW5vdGhlciBjaGFubmVsICh2aWEgQ2hhbm5lbCBGb2xsb3dpbmcpICovXG4gIElzQ3Jvc3Nwb3N0ID0gMSA8PCAxLFxuICAvKiogRG8gbm90IGluY2x1ZGUgYW55IGVtYmVkcyB3aGVuIHNlcmlhbGl6aW5nIHRoaXMgbWVzc2FnZSAqL1xuICBTdXBwcmVzc0VtYmVkcyA9IDEgPDwgMixcbiAgLyoqIFRoZSBzb3VyY2UgbWVzc2FnZSBmb3IgdGhpcyBjcm9zc3Bvc3QgaGFzIGJlZW4gZGVsZXRlZCAodmlhIENoYW5uZWwgRm9sbG93aW5nKSAqL1xuICBTb3VyY2VNZXNzYWdlRGVsZXRlZCA9IDEgPDwgMyxcbiAgLyoqIFRoaXMgbWVzc2FnZSBjYW1lIGZyb20gdGhlIHVyZ2VudCBtZXNzYWdlIHN5c3RlbSAqL1xuICBVcmdlbnQgPSAxIDw8IDQsXG4gIC8qKiBUaGlzIG1lc3NhZ2UgaGFzIGFuIGFzc29jaWF0ZWQgdGhyZWFkLCB3aXRoIHRoZSBzYW1lIGlkIGFzIHRoZSBtZXNzYWdlICovXG4gIEhhc1RocmVhZCA9IDEgPDwgNSxcbiAgLyoqIFRoaXMgbWVzc2FnZSBpcyBvbmx5IHZpc2libGUgdG8gdGhlIHVzZXIgd2hvIGludm9rZWQgdGhlIEludGVyYWN0aW9uICovXG4gIEVwaGVtZXJhbCA9IDEgPDwgNixcbiAgLyoqIFRoaXMgbWVzc2FnZSBpcyBhbiBJbnRlcmFjdGlvbiBSZXNwb25zZSBhbmQgdGhlIGJvdCBpcyBcInRoaW5raW5nXCIgKi9cbiAgTG9hZGluZyA9IDEgPDwgNyxcbiAgLyoqIFRoaXMgbWVzc2FnZSBmYWlsZWQgdG8gbWVudGlvbiBzb21lIHJvbGVzIGFuZCBhZGQgdGhlaXIgbWVtYmVycyB0byB0aGUgdGhyZWFkICovXG4gIEZhaWxlZFRvTWVudGlvblNvbWVSb2xlc0luVGhyZWFkID0gMSA8PCA4LFxuICAvKiogVGhpcyBtZXNzYWdlIHdpbGwgbm90IHRyaWdnZXIgcHVzaCBhbmQgZGVza3RvcCBub3RpZmljYXRpb25zICovXG4gIFN1cHByZXNzTm90aWZpY2F0aW9ucyA9IDEgPDwgMTIsXG4gIC8qKiBUaGlzIG1lc3NhZ2UgaXMgYSB2b2ljZSBtZXNzYWdlICovXG4gIElzVm9pY2VNZXNzYWdlID0gMSA8PCAxMyxcbiAgLyoqIFRoaXMgbWVzc2FnZSBoYXMgYSBzbmFwc2hvdCAodmlhIE1lc3NhZ2UgRm9yd2FyZGluZykgKi9cbiAgSGFzU25hcHNob3QgPSAxIDw8IDE0LFxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byBjcmVhdGUgZnVsbHkgY29tcG9uZW50LWRyaXZlbiBtZXNzYWdlc1xuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBPbmNlIGEgbWVzc2FnZSBoYXMgYmVlbiBzZW50IHdpdGggdGhpcyBmbGFnLCBpdCBjYW4ndCBiZSByZW1vdmVkIGZyb20gdGhhdCBtZXNzYWdlLlxuICAgKi9cbiAgSXNDb21wb25lbnRzVjIgPSAxIDw8IDE1LFxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjbWVzc2FnZS1pbnRlcmFjdGlvbi1tZXRhZGF0YS1vYmplY3QgKi9cbmV4cG9ydCB0eXBlIERpc2NvcmRNZXNzYWdlSW50ZXJhY3Rpb25NZXRhZGF0YSA9XG4gIHwgRGlzY29yZEFwcGxpY2F0aW9uQ29tbWFuZEludGVyYWN0aW9uTWV0YWRhdGFcbiAgfCBEaXNjb3JkTWVzc2FnZUNvbXBvbmVudEludGVyYWN0aW9uTWV0YWRhdGFcbiAgfCBEaXNjb3JkTW9kYWxTdWJtaXRJbnRlcmFjdGlvbk1ldGFkYXRhXG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNtZXNzYWdlLWludGVyYWN0aW9uLW1ldGFkYXRhLW9iamVjdC1hcHBsaWNhdGlvbi1jb21tYW5kLWludGVyYWN0aW9uLW1ldGFkYXRhLXN0cnVjdHVyZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNjb3JkQXBwbGljYXRpb25Db21tYW5kSW50ZXJhY3Rpb25NZXRhZGF0YSB7XG4gIC8qKiBJZCBvZiB0aGUgaW50ZXJhY3Rpb24gKi9cbiAgaWQ6IHN0cmluZ1xuICAvKiogVGhlIHR5cGUgb2YgaW50ZXJhY3Rpb24gKi9cbiAgdHlwZTogSW50ZXJhY3Rpb25UeXBlc1xuICAvKiogVXNlciB3aG8gdHJpZ2dlcmVkIHRoZSBpbnRlcmFjdGlvbiAqL1xuICB1c2VyOiBEaXNjb3JkVXNlclxuICAvKiogSURzIGZvciBpbnN0YWxsYXRpb24gY29udGV4dChzKSByZWxhdGVkIHRvIGFuIGludGVyYWN0aW9uICovXG4gIGF1dGhvcml6aW5nX2ludGVncmF0aW9uX293bmVyczogRGlzY29yZEF1dGhvcml6aW5nSW50ZWdyYXRpb25Pd25lcnNcbiAgLyoqIElEIG9mIHRoZSBvcmlnaW5hbCByZXNwb25zZSBtZXNzYWdlLCBwcmVzZW50IG9ubHkgb24gZm9sbG93LXVwIG1lc3NhZ2VzICovXG4gIG9yaWdpbmFsX3Jlc3BvbnNlX21lc3NhZ2VfaWQ/OiBzdHJpbmdcbiAgLyoqIFRoZSB1c2VyIHRoZSBjb21tYW5kIHdhcyBydW4gb24sIHByZXNlbnQgb25seSBvbiB1c2VyIGNvbW1hbmQgaW50ZXJhY3Rpb25zICovXG4gIHRhcmdldF91c2VyPzogRGlzY29yZFVzZXJcbiAgLyoqIFRoZSBJRCBvZiB0aGUgbWVzc2FnZSB0aGUgY29tbWFuZCB3YXMgcnVuIG9uLCBwcmVzZW50IG9ubHkgb24gbWVzc2FnZSBjb21tYW5kIGludGVyYWN0aW9ucy4gVGhlIG9yaWdpbmFsIHJlc3BvbnNlIG1lc3NhZ2Ugd2lsbCBhbHNvIGhhdmUgbWVzc2FnZV9yZWZlcmVuY2UgYW5kIHJlZmVyZW5jZWRfbWVzc2FnZSBwb2ludGluZyB0byB0aGlzIG1lc3NhZ2UuICovXG4gIHRhcmdldF9tZXNzYWdlX2lkPzogc3RyaW5nXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNtZXNzYWdlLWludGVyYWN0aW9uLW1ldGFkYXRhLW9iamVjdC1tZXNzYWdlLWNvbXBvbmVudC1pbnRlcmFjdGlvbi1tZXRhZGF0YS1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZE1lc3NhZ2VDb21wb25lbnRJbnRlcmFjdGlvbk1ldGFkYXRhIHtcbiAgLyoqIElkIG9mIHRoZSBpbnRlcmFjdGlvbiAqL1xuICBpZDogc3RyaW5nXG4gIC8qKiBUaGUgdHlwZSBvZiBpbnRlcmFjdGlvbiAqL1xuICB0eXBlOiBJbnRlcmFjdGlvblR5cGVzXG4gIC8qKiBVc2VyIHdobyB0cmlnZ2VyZWQgdGhlIGludGVyYWN0aW9uICovXG4gIHVzZXI6IERpc2NvcmRVc2VyXG4gIC8qKiBJRHMgZm9yIGluc3RhbGxhdGlvbiBjb250ZXh0KHMpIHJlbGF0ZWQgdG8gYW4gaW50ZXJhY3Rpb24gKi9cbiAgYXV0aG9yaXppbmdfaW50ZWdyYXRpb25fb3duZXJzOiBEaXNjb3JkQXV0aG9yaXppbmdJbnRlZ3JhdGlvbk93bmVyc1xuICAvKiogSUQgb2YgdGhlIG9yaWdpbmFsIHJlc3BvbnNlIG1lc3NhZ2UsIHByZXNlbnQgb25seSBvbiBmb2xsb3ctdXAgbWVzc2FnZXMgKi9cbiAgb3JpZ2luYWxfcmVzcG9uc2VfbWVzc2FnZV9pZD86IHN0cmluZ1xuICAvKiogSUQgb2YgdGhlIG1lc3NhZ2UgdGhhdCBjb250YWluZWQgaW50ZXJhY3RpdmUgY29tcG9uZW50LCBwcmVzZW50IG9ubHkgb24gbWVzc2FnZXMgY3JlYXRlZCBmcm9tIGNvbXBvbmVudCBpbnRlcmFjdGlvbnMgKi9cbiAgaW50ZXJhY3RlZF9tZXNzYWdlX2lkOiBzdHJpbmdcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI21lc3NhZ2UtaW50ZXJhY3Rpb24tbWV0YWRhdGEtb2JqZWN0LW1vZGFsLXN1Ym1pdC1pbnRlcmFjdGlvbi1tZXRhZGF0YS1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZE1vZGFsU3VibWl0SW50ZXJhY3Rpb25NZXRhZGF0YSB7XG4gIC8qKiBJZCBvZiB0aGUgaW50ZXJhY3Rpb24gKi9cbiAgaWQ6IHN0cmluZ1xuICAvKiogVGhlIHR5cGUgb2YgaW50ZXJhY3Rpb24gKi9cbiAgdHlwZTogSW50ZXJhY3Rpb25UeXBlc1xuICAvKiogVXNlciB3aG8gdHJpZ2dlcmVkIHRoZSBpbnRlcmFjdGlvbiAqL1xuICB1c2VyOiBEaXNjb3JkVXNlclxuICAvKiogSURzIGZvciBpbnN0YWxsYXRpb24gY29udGV4dChzKSByZWxhdGVkIHRvIGFuIGludGVyYWN0aW9uICovXG4gIGF1dGhvcml6aW5nX2ludGVncmF0aW9uX293bmVyczogRGlzY29yZEF1dGhvcml6aW5nSW50ZWdyYXRpb25Pd25lcnNcbiAgLyoqIElEIG9mIHRoZSBvcmlnaW5hbCByZXNwb25zZSBtZXNzYWdlLCBwcmVzZW50IG9ubHkgb24gZm9sbG93LXVwIG1lc3NhZ2VzICovXG4gIG9yaWdpbmFsX3Jlc3BvbnNlX21lc3NhZ2VfaWQ/OiBzdHJpbmdcbiAgLyoqIE1ldGFkYXRhIGZvciB0aGUgaW50ZXJhY3Rpb24gdGhhdCB3YXMgdXNlZCB0byBvcGVuIHRoZSBtb2RhbCwgcHJlc2VudCBvbmx5IG9uIG1vZGFsIHN1Ym1pdCBpbnRlcmFjdGlvbnMgKi9cbiAgdHJpZ2dlcmluZ19pbnRlcmFjdGlvbl9tZXRhZGF0YTogRGlzY29yZEFwcGxpY2F0aW9uQ29tbWFuZEludGVyYWN0aW9uTWV0YWRhdGEgfCBEaXNjb3JkTWVzc2FnZUNvbXBvbmVudEludGVyYWN0aW9uTWV0YWRhdGFcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI21lc3NhZ2UtY2FsbC1vYmplY3QtbWVzc2FnZS1jYWxsLW9iamVjdC1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZE1lc3NhZ2VDYWxsIHtcbiAgLyoqIEFycmF5IG9mIHVzZXIgb2JqZWN0IGlkcyB0aGF0IHBhcnRpY2lwYXRlZCBpbiB0aGUgY2FsbCAqL1xuICBwYXJ0aWNpcGFudHM6IHN0cmluZ1tdXG4gIC8qKiBUaW1lIHdoZW4gY2FsbCBlbmRlZCAqL1xuICBlbmRlZF90aW1lc3RhbXA/OiBzdHJpbmcgfCBudWxsXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNtZXNzYWdlLXJlZmVyZW5jZS1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZE1lc3NhZ2VSZWZlcmVuY2Uge1xuICAvKiogVHlwZSBvZiByZWZlcmVuY2UgKi9cbiAgdHlwZT86IERpc2NvcmRNZXNzYWdlUmVmZXJlbmNlVHlwZVxuICAvKiogaWQgb2YgdGhlIG9yaWdpbmF0aW5nIG1lc3NhZ2UgKi9cbiAgbWVzc2FnZV9pZD86IHN0cmluZ1xuICAvKipcbiAgICogaWQgb2YgdGhlIG9yaWdpbmF0aW5nIG1lc3NhZ2UncyBjaGFubmVsXG4gICAqIE5vdGU6IGBjaGFubmVsX2lkYCBpcyBvcHRpb25hbCB3aGVuIGNyZWF0aW5nIGEgcmVwbHksIGJ1dCB3aWxsIGFsd2F5cyBiZSBwcmVzZW50IHdoZW4gcmVjZWl2aW5nIGFuIGV2ZW50L3Jlc3BvbnNlIHRoYXQgaW5jbHVkZXMgdGhpcyBkYXRhIG1vZGVsLlxuICAgKi9cbiAgY2hhbm5lbF9pZD86IHN0cmluZ1xuICAvKiogaWQgb2YgdGhlIG9yaWdpbmF0aW5nIG1lc3NhZ2UncyBndWlsZCAqL1xuICBndWlsZF9pZD86IHN0cmluZ1xuICAvKiogV2hlbiBzZW5kaW5nLCB3aGV0aGVyIHRvIGVycm9yIGlmIHRoZSByZWZlcmVuY2VkIG1lc3NhZ2UgZG9lc24ndCBleGlzdCBpbnN0ZWFkIG9mIHNlbmRpbmcgYXMgYSBub3JtYWwgKG5vbi1yZXBseSkgbWVzc2FnZSwgZGVmYXVsdCB0cnVlICovXG4gIGZhaWxfaWZfbm90X2V4aXN0cz86IGJvb2xlYW5cbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI21lc3NhZ2UtcmVmZXJlbmNlLXR5cGVzICovXG5leHBvcnQgZW51bSBEaXNjb3JkTWVzc2FnZVJlZmVyZW5jZVR5cGUge1xuICAvKipcbiAgICogQSBzdGFuZGFyZCByZWZlcmVuY2UgdXNlZCBieSByZXBsaWVzLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBXaGVuIHRoZSB0eXBlIGlzIHNldCB0byB0aGlzIHZhbHVlLCB0aGUgZmllbGQgcmVmZXJlbmNlZF9tZXNzYWdlIG9uIHRoZSBtZXNzYWdlIHdpbGwgYmUgcHJlc2VudFxuICAgKi9cbiAgRGVmYXVsdCxcbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB1c2VkIHRvIHBvaW50IHRvIGEgbWVzc2FnZSBhdCBhIHBvaW50IGluIHRpbWUuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFdoZW4gdGhlIHR5cGUgaXMgc2V0IHRvIHRoaXMgdmFsdWUsIHRoZSBmaWVsZCBtZXNzYWdlX3NuYXBzaG90IG9uIHRoZSBtZXNzYWdlIHdpbGwgYmUgcHJlc2VudFxuICAgKlxuICAgKiBUaGlzIHZhbHVlIGNhbiBvbmx5IGJlIHVzZWQgZm9yIGJhc2ljIG1lc3NhZ2VzO1xuICAgKiBpLmUuIG1lc3NhZ2VzIHdoaWNoIGRvIG5vdCBoYXZlIHN0cm9uZyBiaW5kaW5ncyB0byBhIG5vbiBnbG9iYWwgZW50aXR5LlxuICAgKiBUaHVzIHdlIHN1cHBvcnQgb25seSBtZXNzYWdlcyB3aXRoIHR5cGUgYERFRkFVTFRgLCBgUkVQTFlgLCBgQ0hBVF9JTlBVVF9DT01NQU5EYCwgb3IgYENPTlRFWFRfTUVOVV9DT01NQU5EYCwgYW5kIGRvbid0IHN1cHBvcnQgbWVzc2FnZXMgd2l0aCBhIHBvbGwsIGNhbGwsIG9yIGFjdGl2aXR5LlxuICAgKi9cbiAgRm9yd2FyZCxcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI21lc3NhZ2Utc25hcHNob3Qtc3RydWN0dXJlICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2NvcmRNZXNzYWdlU25hcHNob3Qge1xuICAvKiogTWluaW1hbCBzdWJzZXQgb2YgZmllbGRzIGluIHRoZSBmb3J3YXJkZWQgbWVzc2FnZSAqL1xuICBtZXNzYWdlOiBQaWNrPFxuICAgIERpc2NvcmRNZXNzYWdlLFxuICAgIHwgJ3R5cGUnXG4gICAgfCAnY29udGVudCdcbiAgICB8ICdlbWJlZHMnXG4gICAgfCAnYXR0YWNobWVudHMnXG4gICAgfCAndGltZXN0YW1wJ1xuICAgIHwgJ2VkaXRlZF90aW1lc3RhbXAnXG4gICAgfCAnZmxhZ3MnXG4gICAgfCAnbWVudGlvbnMnXG4gICAgfCAnbWVudGlvbl9yb2xlcydcbiAgICB8ICdzdGlja2VycydcbiAgICB8ICdzdGlja2VyX2l0ZW1zJ1xuICAgIHwgJ2NvbXBvbmVudHMnXG4gID5cbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI3JlYWN0aW9uLW9iamVjdC1yZWFjdGlvbi1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZFJlYWN0aW9uIHtcbiAgLyoqIFRvdGFsIG51bWJlciBvZiB0aW1lcyB0aGlzIGVtb2ppIGhhcyBiZWVuIHVzZWQgdG8gcmVhY3QgKGluY2x1ZGluZyBzdXBlciByZWFjdHMpICovXG4gIGNvdW50OiBudW1iZXJcbiAgLyoqXHRSZWFjdGlvbiBjb3VudCBkZXRhaWxzIG9iamVjdCAqL1xuICBjb3VudF9kZXRhaWxzOiBEaXNjb3JkUmVhY3Rpb25Db3VudERldGFpbHNcbiAgLyoqIFdoZXRoZXIgdGhlIGN1cnJlbnQgdXNlciByZWFjdGVkIHVzaW5nIHRoaXMgZW1vamkgKi9cbiAgbWU6IGJvb2xlYW5cbiAgLyoqXHRXaGV0aGVyIHRoZSBjdXJyZW50IHVzZXIgc3VwZXItcmVhY3RlZCB1c2luZyB0aGlzIGVtb2ppICovXG4gIG1lX2J1cnN0OiBib29sZWFuXG4gIC8qKiBFbW9qaSBpbmZvcm1hdGlvbiAqL1xuICBlbW9qaTogUGFydGlhbDxEaXNjb3JkRW1vamk+XG4gIC8qKiBIRVggY29sb3JzIHVzZWQgZm9yIHN1cGVyIHJlYWN0aW9uICovXG4gIGJ1cnN0X2NvbG9yczogc3RyaW5nW11cbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI3JlYWN0aW9uLWNvdW50LWRldGFpbHMtb2JqZWN0LXJlYWN0aW9uLWNvdW50LWRldGFpbHMtc3RydWN0dXJlICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2NvcmRSZWFjdGlvbkNvdW50RGV0YWlscyB7XG4gIC8qKiBDb3VudCBvZiBzdXBlciByZWFjdGlvbnMgKi9cbiAgYnVyc3Q6IG51bWJlclxuICAvKipcdENvdW50IG9mIG5vcm1hbCByZWFjdGlvbnMgKi9cbiAgbm9ybWFsOiBudW1iZXJcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI2VtYmVkLW9iamVjdC1lbWJlZC1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEVtYmVkIHtcbiAgLyoqIFRpdGxlIG9mIGVtYmVkICovXG4gIHRpdGxlPzogc3RyaW5nXG4gIC8qKiBUeXBlIG9mIGVtYmVkIChhbHdheXMgXCJyaWNoXCIgZm9yIHdlYmhvb2sgZW1iZWRzKSAqL1xuICB0eXBlPzogRW1iZWRUeXBlc1xuICAvKiogRGVzY3JpcHRpb24gb2YgZW1iZWQgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmdcbiAgLyoqIFVybCBvZiBlbWJlZCAqL1xuICB1cmw/OiBzdHJpbmdcbiAgLyoqIFRpbWVzdGFtcCBvZiBlbWJlZCBjb250ZW50ICovXG4gIHRpbWVzdGFtcD86IHN0cmluZ1xuICAvKiogQ29sb3IgY29kZSBvZiB0aGUgZW1iZWQgKi9cbiAgY29sb3I/OiBudW1iZXJcbiAgLyoqIEZvb3RlciBpbmZvcm1hdGlvbiAqL1xuICBmb290ZXI/OiBEaXNjb3JkRW1iZWRGb290ZXJcbiAgLyoqIEltYWdlIGluZm9ybWF0aW9uICovXG4gIGltYWdlPzogRGlzY29yZEVtYmVkSW1hZ2VcbiAgLyoqIFRodW1ibmFpbCBpbmZvcm1hdGlvbiAqL1xuICB0aHVtYm5haWw/OiBEaXNjb3JkRW1iZWRUaHVtYm5haWxcbiAgLyoqIFZpZGVvIGluZm9ybWF0aW9uICovXG4gIHZpZGVvPzogRGlzY29yZEVtYmVkVmlkZW9cbiAgLyoqIFByb3ZpZGVyIGluZm9ybWF0aW9uICovXG4gIHByb3ZpZGVyPzogRGlzY29yZEVtYmVkUHJvdmlkZXJcbiAgLyoqIEF1dGhvciBpbmZvcm1hdGlvbiAqL1xuICBhdXRob3I/OiBEaXNjb3JkRW1iZWRBdXRob3JcbiAgLyoqIEZpZWxkcyBpbmZvcm1hdGlvbiAqL1xuICBmaWVsZHM/OiBEaXNjb3JkRW1iZWRGaWVsZFtdXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNlbWJlZC1vYmplY3QtZW1iZWQtdHlwZXMgKi9cbmV4cG9ydCB0eXBlIEVtYmVkVHlwZXMgPSAncmljaCcgfCAnaW1hZ2UnIHwgJ3ZpZGVvJyB8ICdnaWZ2JyB8ICdhcnRpY2xlJyB8ICdsaW5rJyB8ICdwb2xsX3Jlc3VsdCdcblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI2VtYmVkLW9iamVjdC1lbWJlZC10aHVtYm5haWwtc3RydWN0dXJlICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2NvcmRFbWJlZFRodW1ibmFpbCB7XG4gIC8qKiBTb3VyY2UgdXJsIG9mIHRodW1ibmFpbCAob25seSBzdXBwb3J0cyBodHRwKHMpIGFuZCBhdHRhY2htZW50cykgKi9cbiAgdXJsOiBzdHJpbmdcbiAgLyoqIEEgcHJveGllZCB1cmwgb2YgdGhlIHRodW1ibmFpbCAqL1xuICBwcm94eV91cmw/OiBzdHJpbmdcbiAgLyoqIEhlaWdodCBvZiB0aHVtYm5haWwgKi9cbiAgaGVpZ2h0PzogbnVtYmVyXG4gIC8qKiBXaWR0aCBvZiB0aHVtYm5haWwgKi9cbiAgd2lkdGg/OiBudW1iZXJcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI2VtYmVkLW9iamVjdC1lbWJlZC12aWRlby1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEVtYmVkVmlkZW8ge1xuICAvKiogU291cmNlIHVybCBvZiB2aWRlbyAqL1xuICB1cmw/OiBzdHJpbmdcbiAgLyoqIEEgcHJveGllZCB1cmwgb2YgdGhlIHZpZGVvICovXG4gIHByb3h5X3VybD86IHN0cmluZ1xuICAvKiogSGVpZ2h0IG9mIHZpZGVvICovXG4gIGhlaWdodD86IG51bWJlclxuICAvKiogV2lkdGggb2YgdmlkZW8gKi9cbiAgd2lkdGg/OiBudW1iZXJcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI2VtYmVkLW9iamVjdC1lbWJlZC1pbWFnZS1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEVtYmVkSW1hZ2Uge1xuICAvKiogU291cmNlIHVybCBvZiBpbWFnZSAob25seSBzdXBwb3J0cyBodHRwKHMpIGFuZCBhdHRhY2htZW50cykgKi9cbiAgdXJsOiBzdHJpbmdcbiAgLyoqIEEgcHJveGllZCB1cmwgb2YgdGhlIGltYWdlICovXG4gIHByb3h5X3VybD86IHN0cmluZ1xuICAvKiogSGVpZ2h0IG9mIGltYWdlICovXG4gIGhlaWdodD86IG51bWJlclxuICAvKiogV2lkdGggb2YgaW1hZ2UgKi9cbiAgd2lkdGg/OiBudW1iZXJcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI2VtYmVkLW9iamVjdC1lbWJlZC1wcm92aWRlci1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEVtYmVkUHJvdmlkZXIge1xuICAvKiogTmFtZSBvZiBwcm92aWRlciAqL1xuICBuYW1lPzogc3RyaW5nXG4gIC8qKiBVcmwgb2YgcHJvdmlkZXIgKi9cbiAgdXJsPzogc3RyaW5nXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNlbWJlZC1vYmplY3QtZW1iZWQtYXV0aG9yLXN0cnVjdHVyZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNjb3JkRW1iZWRBdXRob3Ige1xuICAvKiogTmFtZSBvZiBhdXRob3IgKi9cbiAgbmFtZTogc3RyaW5nXG4gIC8qKiBVcmwgb2YgYXV0aG9yICovXG4gIHVybD86IHN0cmluZ1xuICAvKiogVXJsIG9mIGF1dGhvciBpY29uIChvbmx5IHN1cHBvcnRzIGh0dHAocykgYW5kIGF0dGFjaG1lbnRzKSAqL1xuICBpY29uX3VybD86IHN0cmluZ1xuICAvKiogQSBwcm94aWVkIHVybCBvZiBhdXRob3IgaWNvbiAqL1xuICBwcm94eV9pY29uX3VybD86IHN0cmluZ1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjZW1iZWQtb2JqZWN0LWVtYmVkLWZvb3Rlci1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEVtYmVkRm9vdGVyIHtcbiAgLyoqIEZvb3RlciB0ZXh0ICovXG4gIHRleHQ6IHN0cmluZ1xuICAvKiogVXJsIG9mIGZvb3RlciBpY29uIChvbmx5IHN1cHBvcnRzIGh0dHAocykgYW5kIGF0dGFjaG1lbnRzKSAqL1xuICBpY29uX3VybD86IHN0cmluZ1xuICAvKiogQSBwcm94aWVkIHVybCBvZiBmb290ZXIgaWNvbiAqL1xuICBwcm94eV9pY29uX3VybD86IHN0cmluZ1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjZW1iZWQtb2JqZWN0LWVtYmVkLWZpZWxkLXN0cnVjdHVyZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNjb3JkRW1iZWRGaWVsZCB7XG4gIC8qKiBOYW1lIG9mIHRoZSBmaWVsZCAqL1xuICBuYW1lOiBzdHJpbmdcbiAgLyoqIFZhbHVlIG9mIHRoZSBmaWVsZCAqL1xuICB2YWx1ZTogc3RyaW5nXG4gIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGZpZWxkIHNob3VsZCBkaXNwbGF5IGlubGluZSAqL1xuICBpbmxpbmU/OiBib29sZWFuXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNhdHRhY2htZW50LW9iamVjdC1hdHRhY2htZW50LXN0cnVjdHVyZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNjb3JkQXR0YWNobWVudCB7XG4gIC8qKiBBdHRhY2htZW50IGlkICovXG4gIGlkOiBzdHJpbmdcbiAgLyoqIE5hbWUgb2YgZmlsZSBhdHRhY2hlZCAqL1xuICBmaWxlbmFtZTogc3RyaW5nXG4gIC8qKiBUaGUgdGl0bGUgb2YgdGhlIGZpbGUgKi9cbiAgdGl0bGU/OiBzdHJpbmdcbiAgLyoqIGRlc2NyaXB0aW9uIGZvciB0aGUgZmlsZSAobWF4IDEwMjQgY2hhcmFjdGVycykgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmdcbiAgLyoqIFRoZSBhdHRhY2htZW50J3MgW21lZGlhIHR5cGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01lZGlhX3R5cGUpICovXG4gIGNvbnRlbnRfdHlwZT86IHN0cmluZ1xuICAvKiogU2l6ZSBvZiBmaWxlIGluIGJ5dGVzICovXG4gIHNpemU6IG51bWJlclxuICAvKiogU291cmNlIHVybCBvZiBmaWxlICovXG4gIHVybDogc3RyaW5nXG4gIC8qKiBBIHByb3hpZWQgdXJsIG9mIGZpbGUgKi9cbiAgcHJveHlfdXJsOiBzdHJpbmdcbiAgLyoqIEhlaWdodCBvZiBmaWxlIChpZiBpbWFnZSkgKi9cbiAgaGVpZ2h0PzogbnVtYmVyIHwgbnVsbFxuICAvKiogV2lkdGggb2YgZmlsZSAoaWYgaW1hZ2UpICovXG4gIHdpZHRoPzogbnVtYmVyIHwgbnVsbFxuICAvKiogd2hldGhlciB0aGlzIGF0dGFjaG1lbnQgaXMgZXBoZW1lcmFsLiBFcGhlbWVyYWwgYXR0YWNobWVudHMgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHJlbW92ZWQgYWZ0ZXIgYSBzZXQgcGVyaW9kIG9mIHRpbWUuIEVwaGVtZXJhbCBhdHRhY2htZW50cyBvbiBtZXNzYWdlcyBhcmUgZ3VhcmFudGVlZCB0byBiZSBhdmFpbGFibGUgYXMgbG9uZyBhcyB0aGUgbWVzc2FnZSBpdHNlbGYgZXhpc3RzLiAqL1xuICBlcGhlbWVyYWw/OiBib29sZWFuXG4gIC8qKiBUaGUgZHVyYXRpb24gb2YgdGhlIGF1ZGlvIGZpbGUgZm9yIGEgdm9pY2UgbWVzc2FnZSAqL1xuICBkdXJhdGlvbl9zZWNzPzogbnVtYmVyXG4gIC8qKiBBIGJhc2U2NCBlbmNvZGVkIGJ5dGVhcnJheSByZXByZXNlbnRpbmcgYSBzYW1wbGVkIHdhdmVmb3JtIGZvciBhIHZvaWNlIG1lc3NhZ2UgKi9cbiAgd2F2ZWZvcm0/OiBzdHJpbmdcbiAgLyoqIEF0dGFjaG1lbnQgZmxhZ3MgY29tYmluZWQgYXMgYSBiaXRmaWVsZCAqL1xuICBmbGFncz86IEF0dGFjaG1lbnRGbGFnc1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjYXR0YWNobWVudC1vYmplY3QtYXR0YWNobWVudC1mbGFncyAqL1xuZXhwb3J0IGVudW0gQXR0YWNobWVudEZsYWdzIHtcbiAgTm9uZSxcbiAgLyoqIFRoaXMgYXR0YWNobWVudCBoYXMgYmVlbiBlZGl0ZWQgdXNpbmcgdGhlIHJlbWl4IGZlYXR1cmUgb24gbW9iaWxlICovXG4gIElzUmVtaXggPSAxIDw8IDIsXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNjaGFubmVsLW1lbnRpb24tb2JqZWN0LWNoYW5uZWwtbWVudGlvbi1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZENoYW5uZWxNZW50aW9uIHtcbiAgLyoqIGlkIG9mIHRoZSBjaGFubmVsICovXG4gIGlkOiBzdHJpbmdcbiAgLyoqIGlkIG9mIHRoZSBndWlsZCBjb250YWluaW5nIHRoZSBjaGFubmVsICovXG4gIGd1aWxkX2lkOiBzdHJpbmdcbiAgLyoqIFRoZSB0eXBlIG9mIGNoYW5uZWwgKi9cbiAgdHlwZTogbnVtYmVyXG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgY2hhbm5lbCAqL1xuICBuYW1lOiBzdHJpbmdcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI2FsbG93ZWQtbWVudGlvbnMtb2JqZWN0LWFsbG93ZWQtbWVudGlvbi10eXBlcyAqL1xuZXhwb3J0IGVudW0gQWxsb3dlZE1lbnRpb25zVHlwZXMge1xuICAvKiogQ29udHJvbHMgcm9sZSBtZW50aW9ucyAqL1xuICBSb2xlTWVudGlvbnMgPSAncm9sZXMnLFxuICAvKiogQ29udHJvbHMgdXNlciBtZW50aW9ucyAqL1xuICBVc2VyTWVudGlvbnMgPSAndXNlcnMnLFxuICAvKiogQ29udHJvbHMgXFxAZXZlcnlvbmUgYW5kIFxcQGhlcmUgbWVudGlvbnMgKi9cbiAgRXZlcnlvbmVNZW50aW9ucyA9ICdldmVyeW9uZScsXG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvbWVzc2FnZSNhbGxvd2VkLW1lbnRpb25zLW9iamVjdC1hbGxvd2VkLW1lbnRpb25zLXN0cnVjdHVyZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNjb3JkQWxsb3dlZE1lbnRpb25zIHtcbiAgLyoqIEFuIGFycmF5IG9mIGFsbG93ZWQgbWVudGlvbiB0eXBlcyB0byBwYXJzZSBmcm9tIHRoZSBjb250ZW50LiAqL1xuICBwYXJzZT86IEFsbG93ZWRNZW50aW9uc1R5cGVzW11cbiAgLyoqIEFycmF5IG9mIHJvbGVfaWRzIHRvIG1lbnRpb24gKE1heCBzaXplIG9mIDEwMCkgKi9cbiAgcm9sZXM/OiBzdHJpbmdbXVxuICAvKiogQXJyYXkgb2YgdXNlcl9pZHMgdG8gbWVudGlvbiAoTWF4IHNpemUgb2YgMTAwKSAqL1xuICB1c2Vycz86IHN0cmluZ1tdXG4gIC8qKiBGb3IgcmVwbGllcywgd2hldGhlciB0byBtZW50aW9uIHRoZSBhdXRob3Igb2YgdGhlIG1lc3NhZ2UgYmVpbmcgcmVwbGllZCB0byAoZGVmYXVsdCBmYWxzZSkgKi9cbiAgcmVwbGllZF91c2VyPzogYm9vbGVhblxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2Ujcm9sZS1zdWJzY3JpcHRpb24tZGF0YS1vYmplY3Qtcm9sZS1zdWJzY3JpcHRpb24tZGF0YS1vYmplY3Qtc3RydWN0dXJlICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2NvcmRSb2xlU3Vic2NyaXB0aW9uRGF0YSB7XG4gIC8qKiB0aGUgaWQgb2YgdGhlIHNrdSBhbmQgbGlzdGluZyB0aGF0IHRoZSB1c2VyIGlzIHN1YnNjcmliZWQgdG8gKi9cbiAgcm9sZV9zdWJzY3JpcHRpb25fbGlzdGluZ19pZDogc3RyaW5nXG4gIC8qKiB0aGUgbmFtZSBvZiB0aGUgdGllciB0aGF0IHRoZSB1c2VyIGlzIHN1YnNjcmliZWQgdG8gKi9cbiAgdGllcl9uYW1lOiBzdHJpbmdcbiAgLyoqIHRoZSBjdW11bGF0aXZlIG51bWJlciBvZiBtb250aHMgdGhhdCB0aGUgdXNlciBoYXMgYmVlbiBzdWJzY3JpYmVkICAqL1xuICB0b3RhbF9tb250aHNfc3Vic2NyaWJlZDogbnVtYmVyXG4gIC8qKiB3aGV0aGVyIHRoaXMgbm90aWZpY2F0aW9uIGlzIGZvciBhIHJlbmV3YWwgcmF0aGVyIHRoYW4gYSBuZXcgcHVyY2hhc2UgKi9cbiAgaXNfcmVuZXdhbDogYm9vbGVhblxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjbWVzc2FnZS1waW4tb2JqZWN0LW1lc3NhZ2UtcGluLW9iamVjdC1zdHJ1dHVyZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNjb3JkTWVzc2FnZVBpbiB7XG4gIC8qKiB0aGUgdGltZSB0aGUgbWVzc2FnZSB3YXMgcGlubmVkICovXG4gIHBpbm5lZF9hdDogc3RyaW5nXG4gIC8qKiB0aGUgcGlubmVkIG1lc3NhZ2UgKi9cbiAgbWVzc2FnZTogRGlzY29yZE1lc3NhZ2Vcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9tZXNzYWdlI2dldC1yZWFjdGlvbnMtcmVhY3Rpb24tdHlwZXMgKi9cbmV4cG9ydCBlbnVtIERpc2NvcmRSZWFjdGlvblR5cGUge1xuICBOb3JtYWwsXG4gIEJ1cnN0LFxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL21lc3NhZ2UjZ2V0LWNoYW5uZWwtcGlucy1yZXNwb25zZS1zdHJ1Y3R1cmUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzY29yZEdldENoYW5uZWxQaW5zIHtcbiAgaXRlbXM6IERpc2NvcmRNZXNzYWdlUGluW11cbiAgaGFzX21vcmU6IGJvb2xlYW5cbn1cbiJdLCJuYW1lcyI6WyJNZXNzYWdlVHlwZXMiLCJNZXNzYWdlQWN0aXZpdHlUeXBlcyIsIk1lc3NhZ2VGbGFncyIsIkRpc2NvcmRNZXNzYWdlUmVmZXJlbmNlVHlwZSIsIkF0dGFjaG1lbnRGbGFncyIsIkFsbG93ZWRNZW50aW9uc1R5cGVzIiwiRGlzY29yZFJlYWN0aW9uVHlwZSJdLCJtYXBwaW5ncyI6IkFBQUEscUVBQXFFLEdBbUhyRSx1RkFBdUYsR0FDdkYsT0FBTyxJQUFBLEFBQUtBLHNDQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FBQUE7TUFzQ1g7QUFVRCxnR0FBZ0csR0FDaEcsT0FBTyxJQUFBLEFBQUtDLDhDQUFBQTs7Ozs7V0FBQUE7TUFLWDtBQUVELHVGQUF1RixHQUN2RixPQUFPLElBQUEsQUFBS0Msc0NBQUFBO0lBQ1YsbUZBQW1GO0lBRW5GLHNGQUFzRjtJQUV0Riw0REFBNEQ7SUFFNUQsbUZBQW1GO0lBRW5GLHFEQUFxRDtJQUVyRCwyRUFBMkU7SUFFM0UseUVBQXlFO0lBRXpFLHNFQUFzRTtJQUV0RSxrRkFBa0Y7SUFFbEYsaUVBQWlFO0lBRWpFLG9DQUFvQztJQUVwQyx5REFBeUQ7SUFFekQ7Ozs7O0dBS0M7V0E5QlNBO01BZ0NYO0FBbUZELGtGQUFrRixHQUNsRixPQUFPLElBQUEsQUFBS0MscURBQUFBO0lBQ1Y7Ozs7O0dBS0M7SUFFRDs7Ozs7Ozs7O0dBU0M7V0FqQlNBO01BbUJYO0FBMkxELDZGQUE2RixHQUM3RixPQUFPLElBQUEsQUFBS0MseUNBQUFBOztJQUVWLHNFQUFzRTtXQUY1REE7TUFJWDtBQWNELHdHQUF3RyxHQUN4RyxPQUFPLElBQUEsQUFBS0MsOENBQUFBO0lBQ1YsMkJBQTJCO0lBRTNCLDJCQUEyQjtJQUUzQiw0Q0FBNEM7V0FMbENBO01BT1g7QUFrQ0QsdUZBQXVGLEdBQ3ZGLE9BQU8sSUFBQSxBQUFLQyw2Q0FBQUE7OztXQUFBQTtNQUdYIn0=
