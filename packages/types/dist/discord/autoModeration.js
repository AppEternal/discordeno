/** Types for: https://discord.com/developers/docs/resources/auto-moderation */ /** https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-auto-moderation-rule-structure */ /** https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types */ export var AutoModerationTriggerTypes =
  /*#__PURE__*/ (function (AutoModerationTriggerTypes) {
    /** Check if content contains words from a user defined list of keywords. Max 6 per guild */ AutoModerationTriggerTypes[
      (AutoModerationTriggerTypes['Keyword'] = 1)
    ] = 'Keyword'
    /** Check if content represents generic spam. Max 1 per guild */ AutoModerationTriggerTypes[(AutoModerationTriggerTypes['Spam'] = 3)] = 'Spam'
    /** Check if content contains words from internal pre-defined word sets. Max 1 per guild */ AutoModerationTriggerTypes[
      (AutoModerationTriggerTypes['KeywordPreset'] = 4)
    ] = 'KeywordPreset'
    /** Check if content contains more unique mentions than allowed. Max 1 per guild */ AutoModerationTriggerTypes[
      (AutoModerationTriggerTypes['MentionSpam'] = 5)
    ] = 'MentionSpam'
    /** Check if member profile contains words from a user defined list of keywords. Max 1 per guild */ AutoModerationTriggerTypes[
      (AutoModerationTriggerTypes['MemberProfile'] = 6)
    ] = 'MemberProfile'
    return AutoModerationTriggerTypes
  })({})
/** https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-keyword-preset-types */ export var DiscordAutoModerationRuleTriggerMetadataPresets =
  /*#__PURE__*/ (function (DiscordAutoModerationRuleTriggerMetadataPresets) {
    /** Words that may be considered forms of swearing or cursing */ DiscordAutoModerationRuleTriggerMetadataPresets[
      (DiscordAutoModerationRuleTriggerMetadataPresets['Profanity'] = 1)
    ] = 'Profanity'
    /** Words that refer to sexually explicit behavior or activity */ DiscordAutoModerationRuleTriggerMetadataPresets[
      (DiscordAutoModerationRuleTriggerMetadataPresets['SexualContent'] = 2)
    ] = 'SexualContent'
    /** Personal insults or words that may be considered hate speech */ DiscordAutoModerationRuleTriggerMetadataPresets[
      (DiscordAutoModerationRuleTriggerMetadataPresets['Slurs'] = 3)
    ] = 'Slurs'
    return DiscordAutoModerationRuleTriggerMetadataPresets
  })({})
/** https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types */ export var AutoModerationEventTypes =
  /*#__PURE__*/ (function (AutoModerationEventTypes) {
    /** When a user sends a message */ AutoModerationEventTypes[(AutoModerationEventTypes['MessageSend'] = 1)] = 'MessageSend'
    /** Wen a member edits their profile */ AutoModerationEventTypes[(AutoModerationEventTypes['MemberUpdate'] = 2)] = 'MemberUpdate'
    return AutoModerationEventTypes
  })({})
/** https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-action-object-action-types */ export var AutoModerationActionType =
  /*#__PURE__*/ (function (AutoModerationActionType) {
    /** Blocks the content of a message according to the rule */ AutoModerationActionType[(AutoModerationActionType['BlockMessage'] = 1)] =
      'BlockMessage'
    /** Logs user content to a specified channel */ AutoModerationActionType[(AutoModerationActionType['SendAlertMessage'] = 2)] = 'SendAlertMessage'
    /**
     * Times out user for specified duration
     *
     * @remarks
     * A timeout action can only be set up for {@link AutoModerationTriggerTypes.Keyword} and {@link AutoModerationTriggerTypes.MentionSpam} rules.
     *
     * The `MODERATE_MEMBERS` permission is required to use the timeout action type.
     */ AutoModerationActionType[(AutoModerationActionType['Timeout'] = 3)] = 'Timeout'
    /** prevents a member from using text, voice, or other interactions */ AutoModerationActionType[
      (AutoModerationActionType['BlockMemberInteraction'] = 4)
    ] = 'BlockMemberInteraction'
    return AutoModerationActionType
  })({})

//# sourceMappingURL=data:application/json;base64,
