/** Types for: https://discord.com/developers/docs/topics/opcodes-and-status-codes */ /** https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes */ export var GatewayOpcodes = /*#__PURE__*/ function(GatewayOpcodes) {
    /** An event was dispatched. */ GatewayOpcodes[GatewayOpcodes["Dispatch"] = 0] = "Dispatch";
    /** Fired periodically by the client to keep the connection alive. */ GatewayOpcodes[GatewayOpcodes["Heartbeat"] = 1] = "Heartbeat";
    /** Starts a new session during the initial handshake. */ GatewayOpcodes[GatewayOpcodes["Identify"] = 2] = "Identify";
    /** Update the client's presence. */ GatewayOpcodes[GatewayOpcodes["PresenceUpdate"] = 3] = "PresenceUpdate";
    /** Used to join/leave or move between voice channels. */ GatewayOpcodes[GatewayOpcodes["VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
    /** Resume a previous session that was disconnected. */ GatewayOpcodes[GatewayOpcodes["Resume"] = 6] = "Resume";
    /** You should attempt to reconnect and resume immediately. */ GatewayOpcodes[GatewayOpcodes["Reconnect"] = 7] = "Reconnect";
    /** Request information about offline guild members in a large guild. */ GatewayOpcodes[GatewayOpcodes["RequestGuildMembers"] = 8] = "RequestGuildMembers";
    /** The session has been invalidated. You should reconnect and identify/resume accordingly. */ GatewayOpcodes[GatewayOpcodes["InvalidSession"] = 9] = "InvalidSession";
    /** Sent immediately after connecting, contains the `heartbeat_interval` to use. */ GatewayOpcodes[GatewayOpcodes["Hello"] = 10] = "Hello";
    /** Sent in response to receiving a heartbeat to acknowledge that it has been received. */ GatewayOpcodes[GatewayOpcodes["HeartbeatACK"] = 11] = "HeartbeatACK";
    /** Used to request soundboard sounds for a list of guilds. */ GatewayOpcodes[GatewayOpcodes["RequestSoundboardSounds"] = 31] = "RequestSoundboardSounds";
    return GatewayOpcodes;
}({});
/** https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-close-event-codes */ export var GatewayCloseEventCodes = /*#__PURE__*/ function(GatewayCloseEventCodes) {
    /** A normal closure of the gateway. You may attempt to reconnect. */ GatewayCloseEventCodes[GatewayCloseEventCodes["NormalClosure"] = 1000] = "NormalClosure";
    /** The endpoint is going away. Invalidates bot and bot will appear offline.  */ GatewayCloseEventCodes[GatewayCloseEventCodes["GoingAway"] = 1001] = "GoingAway";
    /** We're not sure what went wrong. Try reconnecting? */ GatewayCloseEventCodes[GatewayCloseEventCodes["UnknownError"] = 4000] = "UnknownError";
    /** You sent an invalid [Gateway opcode](https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes) or an invalid payload for an opcode. Don't do that! */ GatewayCloseEventCodes[GatewayCloseEventCodes["UnknownOpcode"] = 4001] = "UnknownOpcode";
    /** You sent an invalid [payload](https://discord.com/developers/docs/topics/gateway#sending-payloads) to us. Don't do that! */ GatewayCloseEventCodes[GatewayCloseEventCodes["DecodeError"] = 4002] = "DecodeError";
    /** You sent us a payload prior to [identifying](https://discord.com/developers/docs/topics/gateway-events#identify), or this session has been invalidated. */ GatewayCloseEventCodes[GatewayCloseEventCodes["NotAuthenticated"] = 4003] = "NotAuthenticated";
    /** The account token sent with your [identify payload](https://discord.com/developers/docs/topics/gateway-events#identify) is incorrect. */ GatewayCloseEventCodes[GatewayCloseEventCodes["AuthenticationFailed"] = 4004] = "AuthenticationFailed";
    /** You sent more than one identify payload. Don't do that! */ GatewayCloseEventCodes[GatewayCloseEventCodes["AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
    /** The sequence sent when [resuming](https://discord.com/developers/docs/topics/gateway-events#resume) the session was invalid. Reconnect and start a new session. */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidSeq"] = 4007] = "InvalidSeq";
    /** Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this. */ GatewayCloseEventCodes[GatewayCloseEventCodes["RateLimited"] = 4008] = "RateLimited";
    /** Your session timed out. Reconnect and start a new one. */ GatewayCloseEventCodes[GatewayCloseEventCodes["SessionTimedOut"] = 4009] = "SessionTimedOut";
    /** You sent us an invalid [shard when identifying](https://discord.com/developers/docs/topics/gateway#sharding). */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidShard"] = 4010] = "InvalidShard";
    /** The session would have handled too many guilds - you are required to [shard](https://discord.com/developers/docs/topics/gateway#sharding) your connection in order to connect. */ GatewayCloseEventCodes[GatewayCloseEventCodes["ShardingRequired"] = 4011] = "ShardingRequired";
    /** You sent an invalid version for the gateway. */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidApiVersion"] = 4012] = "InvalidApiVersion";
    /** You sent an invalid intent for a [Gateway Intent](https://discord.com/developers/docs/topics/gateway#gateway-intents). You may have incorrectly calculated the bitwise value. */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidIntents"] = 4013] = "InvalidIntents";
    /** You sent a disallowed intent for a [Gateway Intent](https://discord.com/developers/docs/topics/gateway#gateway-intents). You may have tried to specify an intent that you [have not enabled or are not approved for](https://discord.com/developers/docs/topics/gateway#privileged-intents). */ GatewayCloseEventCodes[GatewayCloseEventCodes["DisallowedIntents"] = 4014] = "DisallowedIntents";
    return GatewayCloseEventCodes;
}({});
/** https://discord.com/developers/docs/topics/opcodes-and-status-codes#json-json-error-codes */ export var HTTPJsonErrorCodes = /*#__PURE__*/ function(HTTPJsonErrorCodes) {
    /** General error (such as a malformed request body, amongst other things) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["General"] = 0] = "General";
    /** Unknown account */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownAccount"] = 10001] = "UnknownAccount";
    /** Unknown application */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownApplication"] = 10002] = "UnknownApplication";
    /** Unknown channel */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownChannel"] = 10003] = "UnknownChannel";
    /** Unknown guild */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownGuild"] = 10004] = "UnknownGuild";
    /** Unknown integration */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownIntegration"] = 10005] = "UnknownIntegration";
    /** Unknown invite */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownInvite"] = 10006] = "UnknownInvite";
    /** Unknown member */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownMember"] = 10007] = "UnknownMember";
    /** Unknown message */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownMessage"] = 10008] = "UnknownMessage";
    /** Unknown permission overwrite */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownPermissionOverwrite"] = 10009] = "UnknownPermissionOverwrite";
    /** Unknown provider */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownProvider"] = 10010] = "UnknownProvider";
    /** Unknown role */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownRole"] = 10011] = "UnknownRole";
    /** Unknown token */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownToken"] = 10012] = "UnknownToken";
    /** Unknown user */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownUser"] = 10013] = "UnknownUser";
    /** Unknown emoji */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownEmoji"] = 10014] = "UnknownEmoji";
    /** Unknown webhook */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownWebhook"] = 10015] = "UnknownWebhook";
    /** Unknown webhook service */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownWebhookService"] = 10016] = "UnknownWebhookService";
    /** Unknown session */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownSession"] = 10020] = "UnknownSession";
    /** Unknown Asset */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownAsset"] = 10021] = "UnknownAsset";
    /** Unknown ban */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownBan"] = 10026] = "UnknownBan";
    /** Unknown SKU */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownSKU"] = 10027] = "UnknownSKU";
    /** Unknown Store Listing */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownStoreListing"] = 10028] = "UnknownStoreListing";
    /** Unknown entitlement */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownEntitlement"] = 10029] = "UnknownEntitlement";
    /** Unknown build */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownBuild"] = 10030] = "UnknownBuild";
    /** Unknown lobby */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownLobby"] = 10031] = "UnknownLobby";
    /** Unknown branch */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownBranch"] = 10032] = "UnknownBranch";
    /** Unknown store directory layout */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownStoreDirectoryLayout"] = 10033] = "UnknownStoreDirectoryLayout";
    /** Unknown redistributable */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownRedistributable"] = 10036] = "UnknownRedistributable";
    /** Unknown gift code */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownGiftCode"] = 10038] = "UnknownGiftCode";
    /** Unknown stream */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownStream"] = 10049] = "UnknownStream";
    /** Unknown premium server subscribe cooldown */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownPremiumServerSubscribeCooldown"] = 10050] = "UnknownPremiumServerSubscribeCooldown";
    /** Unknown guild template */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownGuildTemplate"] = 10057] = "UnknownGuildTemplate";
    /** Unknown discoverable server category */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownDiscoverableServerCategory"] = 10059] = "UnknownDiscoverableServerCategory";
    /** Unknown sticker */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownSticker"] = 10060] = "UnknownSticker";
    /** Unknown sticker pack */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownStickerPack"] = 10061] = "UnknownStickerPack";
    /** Unknown interaction */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownInteraction"] = 10062] = "UnknownInteraction";
    /** Unknown application command */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownApplicationCommand"] = 10063] = "UnknownApplicationCommand";
    /** Unknown voice state */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownVoiceState"] = 10065] = "UnknownVoiceState";
    /** Unknown application command permissions */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownApplicationCommandPermissions"] = 10066] = "UnknownApplicationCommandPermissions";
    /** Unknown Stage Instance */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownStageInstance"] = 10067] = "UnknownStageInstance";
    /** Unknown Guild Member Verification Form */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownGuildMemberVerificationForm"] = 10068] = "UnknownGuildMemberVerificationForm";
    /** Unknown Guild Welcome Screen */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownGuildWelcomeScreen"] = 10069] = "UnknownGuildWelcomeScreen";
    /** Unknown Guild Scheduled Event */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownGuildScheduledEvent"] = 10070] = "UnknownGuildScheduledEvent";
    /** Unknown Guild Scheduled Event User */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownGuildScheduledEventUser"] = 10071] = "UnknownGuildScheduledEventUser";
    /** Unknown Tag */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownTag"] = 10087] = "UnknownTag";
    /** Unknown sound */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnknownSound"] = 10097] = "UnknownSound";
    /** Bots cannot use this endpoint */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BotsCannotUseThis"] = 20001] = "BotsCannotUseThis";
    /** Only bots can use this endpoint */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OnlyBotsCanUseThis"] = 20002] = "OnlyBotsCanUseThis";
    /** Explicit content cannot be sent to the desired recipient(s) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ExplicitContent"] = 20009] = "ExplicitContent";
    /** You are not authorized to perform this action on this application */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnauthorizedAction"] = 20012] = "UnauthorizedAction";
    /** This action cannot be performed due to slowmode rate limit */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["SlowmodeRateLimit"] = 20016] = "SlowmodeRateLimit";
    /** Only the owner of this account can perform this action */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OnlyOwnerCanDo"] = 20018] = "OnlyOwnerCanDo";
    /** This message cannot be edited due to announcement rate limits */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["AnnouncementRateLimits"] = 20022] = "AnnouncementRateLimits";
    /** Under minimum age */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UnderMinimumAge"] = 20024] = "UnderMinimumAge";
    /** The channel you are writing has hit the write rate limit */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ChannelWriteRateLimit"] = 20028] = "ChannelWriteRateLimit";
    /** The write action you are performing on the server has hit the write rate limit */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ServerWriteRateLimit"] = 20029] = "ServerWriteRateLimit";
    /** Your Stage topic, server name, server description, or channel names contain words that are not allowed */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BadWords"] = 20031] = "BadWords";
    /** Guild premium subscription level too low */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["PremiumSubscriptionTooLow"] = 20035] = "PremiumSubscriptionTooLow";
    /** Maximum number of guilds reached (100) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxGuildsReached"] = 30001] = "MaxGuildsReached";
    /** Maximum number of friends reached (1000) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxFriendsReached"] = 30002] = "MaxFriendsReached";
    /** Maximum number of pins reached for the channel (50) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxPinsReached"] = 30003] = "MaxPinsReached";
    /** Maximum number of recipients reached (10) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxRecipientsReached"] = 30004] = "MaxRecipientsReached";
    /** Maximum number of guild roles reached (250) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxRolesReached"] = 30005] = "MaxRolesReached";
    /** Maximum number of webhooks reached (15) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxWebhooksReached"] = 30007] = "MaxWebhooksReached";
    /** Maximum number of emojis reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxEmojisReached"] = 30008] = "MaxEmojisReached";
    /** Maximum number of reactions reached (20) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxReactionsReached"] = 30010] = "MaxReactionsReached";
    /** Maximum number of group DMs reached (10) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxGroupDMsReached"] = 30011] = "MaxGroupDMsReached";
    /** Maximum number of guild channels reached (500) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxChannelsReached"] = 30013] = "MaxChannelsReached";
    /** Maximum number of attachments in a message reached (10) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxAttachmentsReached"] = 30015] = "MaxAttachmentsReached";
    /** Maximum number of invites reached (1000) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxInvitesReached"] = 30016] = "MaxInvitesReached";
    /** Maximum number of animated emojis reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxAnimatedEmojisReached"] = 30018] = "MaxAnimatedEmojisReached";
    /** Maximum number of server members reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxMembersReached"] = 30019] = "MaxMembersReached";
    /** Maximum number of server categories has been reached (5) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxCategoriesReached"] = 30030] = "MaxCategoriesReached";
    /** Guild already has a template */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["AlreadyHasTemplate"] = 30031] = "AlreadyHasTemplate";
    /** Maximum number of application commands reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxApplicationCommandsReached"] = 30032] = "MaxApplicationCommandsReached";
    /** Maximum number of thread participants has been reached (1000) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxThreadParticipantsReached"] = 30033] = "MaxThreadParticipantsReached";
    /** Maximum number of daily application command creates has been reached (200) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxDailyCommandCreatesReached"] = 30034] = "MaxDailyCommandCreatesReached";
    /** Maximum number of bans for non-guild members have been exceeded */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxNonGuildBansExceeded"] = 30035] = "MaxNonGuildBansExceeded";
    /** Maximum number of bans fetches has been reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxBansFetchesReached"] = 30037] = "MaxBansFetchesReached";
    /** Maximum number of uncompleted guild scheduled events reached (100) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxUncompletedEventsReached"] = 30038] = "MaxUncompletedEventsReached";
    /** Maximum number of stickers reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxStickersReached"] = 30039] = "MaxStickersReached";
    /** Maximum number of prune requests has been reached. Try again later */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxPruneRequestsReached"] = 30040] = "MaxPruneRequestsReached";
    /** Maximum number of guild widget settings updates has been reached. Try again later */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxWidgetUpdatesReached"] = 30042] = "MaxWidgetUpdatesReached";
    /** Maximum number of soundboard sounds reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxSoundboardSoundsReached"] = 30045] = "MaxSoundboardSoundsReached";
    /** Maximum number of edits to messages older than 1 hour reached. Try again later */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxOldMessageEditsReached"] = 30046] = "MaxOldMessageEditsReached";
    /** Maximum number of pinned threads in a forum channel has been reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxPinnedThreadsReached"] = 30047] = "MaxPinnedThreadsReached";
    /** Maximum number of tags in a forum channel has been reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxTagsReached"] = 30048] = "MaxTagsReached";
    /** Bitrate is too high for channel of this type */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BitrateTooHigh"] = 30052] = "BitrateTooHigh";
    /** Maximum number of premium emojis reached (25) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxPremiumEmojisReached"] = 30056] = "MaxPremiumEmojisReached";
    /** Maximum number of webhooks per guild reached (1000) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxWebhooksPerGuildReached"] = 30058] = "MaxWebhooksPerGuildReached";
    /** Maximum number of channel permission overwrites reached (1000) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxChannelPermissionOverwritesReached"] = 30060] = "MaxChannelPermissionOverwritesReached";
    /** The channels for this guild are too large */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ChannelsTooLarge"] = 30061] = "ChannelsTooLarge";
    /** Unauthorized. Provide a valid token and try again */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["Unauthorized"] = 40001] = "Unauthorized";
    /** You need to verify your account in order to perform this action */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["VerifyAccount"] = 40002] = "VerifyAccount";
    /** You are opening direct messages too fast */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["DMsTooFast"] = 40003] = "DMsTooFast";
    /** Send messages has been temporarily disabled */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["SendMessagesDisabled"] = 40004] = "SendMessagesDisabled";
    /** Request entity too large. Try sending something smaller in size */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["RequestTooLarge"] = 40005] = "RequestTooLarge";
    /** This feature has been temporarily disabled server-side */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["FeatureDisabled"] = 40006] = "FeatureDisabled";
    /** The user is banned from this guild */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UserBanned"] = 40007] = "UserBanned";
    /** Connection has been revoked */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ConnectionRevoked"] = 40012] = "ConnectionRevoked";
    /** Only consumable SKUs can be consumed */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OnlyConsumableSKUs"] = 40018] = "OnlyConsumableSKUs";
    /** You can only delete sandbox entitlements. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OnlyDeleteSandboxEntitlements"] = 40019] = "OnlyDeleteSandboxEntitlements";
    /** Target user is not connected to voice */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UserNotConnectedToVoice"] = 40032] = "UserNotConnectedToVoice";
    /** This message has already been crossposted */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["AlreadyCrossposted"] = 40033] = "AlreadyCrossposted";
    /** An application command with that name already exists */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["DuplicateCommandName"] = 40041] = "DuplicateCommandName";
    /** Application interaction failed to send */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InteractionFailedToSend"] = 40043] = "InteractionFailedToSend";
    /** Cannot send a message in a forum channel */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoForumMessages"] = 40058] = "NoForumMessages";
    /** Interaction has already been acknowledged */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InteractionAcknowledged"] = 40060] = "InteractionAcknowledged";
    /** Tag names must be unique */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UniqueTagNames"] = 40061] = "UniqueTagNames";
    /** Service resource is being rate limited */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ServiceRateLimited"] = 40062] = "ServiceRateLimited";
    /** There are no tags available that can be set by non-moderators */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoTagsForNonMods"] = 40066] = "NoTagsForNonMods";
    /** A tag is required to create a forum post in this channel */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["TagRequiredForForumPost"] = 40067] = "TagRequiredForForumPost";
    /** An entitlement has already been granted for this resource */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["EntitlementAlreadyGranted"] = 40074] = "EntitlementAlreadyGranted";
    /** This interaction has hit the maximum number of follow up messages */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxFollowUpMessages"] = 40094] = "MaxFollowUpMessages";
    /** Cloudflare is blocking your request. This can often be resolved by setting a proper User Agent */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["CloudflareBlocked"] = 40333] = "CloudflareBlocked";
    /** Missing access */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MissingAccess"] = 50001] = "MissingAccess";
    /** Invalid account type */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidAccountType"] = 50002] = "InvalidAccountType";
    /** Cannot execute action on a DM channel */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoDMAction"] = 50003] = "NoDMAction";
    /** Guild widget disabled */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["WidgetDisabled"] = 50004] = "WidgetDisabled";
    /** Cannot edit a message authored by another user */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["EditOtherUsersMessage"] = 50005] = "EditOtherUsersMessage";
    /** Cannot send an empty message */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["EmptyMessage"] = 50006] = "EmptyMessage";
    /** Cannot send messages to this user */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["CantMessageUser"] = 50007] = "CantMessageUser";
    /** Cannot send messages in a non-text channel */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoTextChannelMessages"] = 50008] = "NoTextChannelMessages";
    /** Channel verification level is too high for you to gain access */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["HighVerification"] = 50009] = "HighVerification";
    /** OAuth2 application does not have a bot */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoOAuth2Bot"] = 50010] = "NoOAuth2Bot";
    /** OAuth2 application limit reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OAuth2LimitReached"] = 50011] = "OAuth2LimitReached";
    /** Invalid OAuth2 state */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidOAuth2State"] = 50012] = "InvalidOAuth2State";
    /** You lack permissions to perform that action */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MissingPermissions"] = 50013] = "MissingPermissions";
    /** Invalid authentication token provided */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidToken"] = 50014] = "InvalidToken";
    /** Note was too long */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoteTooLong"] = 50015] = "NoteTooLong";
    /** Provided too few or too many messages to delete. Must provide at least 2 and fewer than 100 messages to delete */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BadBulkDelete"] = 50016] = "BadBulkDelete";
    /** Invalid MFA Level */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidMFALevel"] = 50017] = "InvalidMFALevel";
    /** A message can only be pinned to the channel it was sent in */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BadPin"] = 50019] = "BadPin";
    /** Invite code was either invalid or taken */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidInvite"] = 50020] = "InvalidInvite";
    /** Cannot execute action on a system message */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["SystemMessageAction"] = 50021] = "SystemMessageAction";
    /** Cannot execute action on this channel type */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BadChannelType"] = 50024] = "BadChannelType";
    /** Invalid OAuth2 access token provided */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidOAuth2Token"] = 50025] = "InvalidOAuth2Token";
    /** Missing required OAuth2 scope */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MissingOAuth2Scope"] = 50026] = "MissingOAuth2Scope";
    /** Invalid webhook token provided */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidWebhookToken"] = 50027] = "InvalidWebhookToken";
    /** Invalid role */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidRole"] = 50028] = "InvalidRole";
    /** Invalid Recipient(s) */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidRecipients"] = 50033] = "InvalidRecipients";
    /** A message provided was too old to bulk delete */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OldBulkDelete"] = 50034] = "OldBulkDelete";
    /** Invalid form body (returned for both application/json and multipart/form-data bodies), or invalid Content-Type provided */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidFormBody"] = 50035] = "InvalidFormBody";
    /** An invite was accepted to a guild the application's bot is not in */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InviteForOtherBot"] = 50036] = "InviteForOtherBot";
    /** Invalid Activity Action */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidActivityAction"] = 50039] = "InvalidActivityAction";
    /** Invalid API version provided */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidAPIVersion"] = 50041] = "InvalidAPIVersion";
    /** File uploaded exceeds the maximum size */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["FileTooLarge"] = 50045] = "FileTooLarge";
    /** Invalid file uploaded */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidFile"] = 50046] = "InvalidFile";
    /** Cannot self-redeem this gift */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["SelfRedeemGift"] = 50054] = "SelfRedeemGift";
    /** Invalid Guild */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidGuild"] = 50055] = "InvalidGuild";
    /** Invalid SKU */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidSKU"] = 50057] = "InvalidSKU";
    /** Invalid request origin */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidRequestOrigin"] = 50067] = "InvalidRequestOrigin";
    /** Invalid message type */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidMessageType"] = 50068] = "InvalidMessageType";
    /** Payment source required to redeem gift */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["PaymentRequiredForGift"] = 50070] = "PaymentRequiredForGift";
    /** Cannot modify a system webhook */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ModifySystemWebhook"] = 50073] = "ModifySystemWebhook";
    /** Cannot delete a channel required for Community guilds */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["DeleteCommunityChannel"] = 50074] = "DeleteCommunityChannel";
    /** Cannot edit stickers within a message */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["EditMessageStickers"] = 50080] = "EditMessageStickers";
    /** Invalid sticker sent */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidSticker"] = 50081] = "InvalidSticker";
    /** Tried to perform an operation on an archived thread, such as editing a message or adding a user to the thread */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ArchivedThreadAction"] = 50083] = "ArchivedThreadAction";
    /** Invalid thread notification settings */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidThreadSettings"] = 50084] = "InvalidThreadSettings";
    /** before value is earlier than the thread creation date */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BeforeThreadCreation"] = 50085] = "BeforeThreadCreation";
    /** Community server channels must be text channels */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["CommunityTextChannelsOnly"] = 50086] = "CommunityTextChannelsOnly";
    /** The entity type of the event is different from the entity you are trying to start the event for */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["EventTypeMismatch"] = 50091] = "EventTypeMismatch";
    /** This server is not available in your location */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ServerUnavailable"] = 50095] = "ServerUnavailable";
    /** This server needs monetization enabled in order to perform this action */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MonetizationRequired"] = 50097] = "MonetizationRequired";
    /** This server needs more boosts to perform this action */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BoostsRequired"] = 50101] = "BoostsRequired";
    /** The request body contains invalid JSON. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidJSON"] = 50109] = "InvalidJSON";
    /** The provided file is invalid. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidProvidedFile"] = 50110] = "InvalidProvidedFile";
    /** The provided file type is invalid. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidProvidedFileType"] = 50123] = "InvalidProvidedFileType";
    /** The provided file duration exceeds maximum of 5.2 seconds. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["FileDurationTooLong"] = 50124] = "FileDurationTooLong";
    /** Owner cannot be pending member */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OwnerCannotBePending"] = 50131] = "OwnerCannotBePending";
    /** Ownership cannot be transferred to a bot user */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BotCannotBeOwner"] = 50132] = "BotCannotBeOwner";
    /** Failed to resize asset below the maximum size: 262144 */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ResizeAssetFailed"] = 50138] = "ResizeAssetFailed";
    /** Cannot mix subscription and non subscription roles for an emoji */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MixEmojiRoles"] = 50144] = "MixEmojiRoles";
    /** Cannot convert between premium emoji and normal emoji */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ConvertEmojiTypes"] = 50145] = "ConvertEmojiTypes";
    /** Uploaded file not found. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["UploadedFileNotFound"] = 50146] = "UploadedFileNotFound";
    /** The specified emoji is invalid */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["SpecifiedEmojiInvalid"] = 50151] = "SpecifiedEmojiInvalid";
    /** Voice messages do not support additional content. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["VoiceMessageBadContent"] = 50159] = "VoiceMessageBadContent";
    /** Voice messages must have a single audio attachment. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["VoiceMessageNoAttachment"] = 50160] = "VoiceMessageNoAttachment";
    /** Voice messages must have supporting metadata. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["VoiceMessageNoMetadata"] = 50161] = "VoiceMessageNoMetadata";
    /** Voice messages cannot be edited. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["VoiceMessageCannotEdit"] = 50162] = "VoiceMessageCannotEdit";
    /** Cannot delete guild subscription integration */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["DeleteSubscriptionIntegration"] = 50163] = "DeleteSubscriptionIntegration";
    /** You cannot send voice messages in this channel. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoVoiceMessages"] = 50173] = "NoVoiceMessages";
    /** The user account must first be verified */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["AccountNotVerified"] = 50178] = "AccountNotVerified";
    /** The provided file does not have a valid duration. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidFileDuration"] = 50192] = "InvalidFileDuration";
    /** You do not have permission to send this sticker. */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoStickerPermission"] = 50600] = "NoStickerPermission";
    /** Two factor is required for this operation */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["TwoFactorRequired"] = 60003] = "TwoFactorRequired";
    /** No users with DiscordTag exist */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoDiscordTagUsers"] = 80004] = "NoDiscordTagUsers";
    /** Reaction was blocked */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ReactionBlocked"] = 90001] = "ReactionBlocked";
    /** User cannot use burst reactions */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NoBurstReactions"] = 90002] = "NoBurstReactions";
    /** Application not yet available. Try again later */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["AppNotAvailable"] = 110001] = "AppNotAvailable";
    /** API resource is currently overloaded. Try again a little later */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["APIOverloaded"] = 130000] = "APIOverloaded";
    /** The Stage is already open */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["StageOpen"] = 150006] = "StageOpen";
    /** Cannot reply without permission to read message history */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ReplyNoHistory"] = 160002] = "ReplyNoHistory";
    /** A thread has already been created for this message */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ThreadExists"] = 160004] = "ThreadExists";
    /** Thread is locked */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["ThreadLocked"] = 160005] = "ThreadLocked";
    /** Maximum number of active threads reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxActiveThreads"] = 160006] = "MaxActiveThreads";
    /** Maximum number of active announcement threads reached */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MaxActiveAnnouncementThreads"] = 160007] = "MaxActiveAnnouncementThreads";
    /** Invalid JSON for uploaded Lottie file */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["InvalidLottieJSON"] = 170001] = "InvalidLottieJSON";
    /** Uploaded Lotties cannot contain rasterized images such as PNG or JPEG */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["LottieRasterImages"] = 170002] = "LottieRasterImages";
    /** Sticker maximum framerate exceeded */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["StickerFramerateTooHigh"] = 170003] = "StickerFramerateTooHigh";
    /** Sticker frame count exceeds maximum of 1000 frames */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["StickerFrameCountTooHigh"] = 170004] = "StickerFrameCountTooHigh";
    /** Lottie animation maximum dimensions exceeded */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["LottieTooLarge"] = 170005] = "LottieTooLarge";
    /** Sticker frame rate is either too small or too large */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["StickerFramerateInvalid"] = 170006] = "StickerFramerateInvalid";
    /** Sticker animation duration exceeds maximum of 5 seconds */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["StickerDurationTooLong"] = 170007] = "StickerDurationTooLong";
    /** Cannot update a finished event */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["FinishedEventUpdate"] = 180000] = "FinishedEventUpdate";
    /** Failed to create stage needed for stage event */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["StageCreationFailed"] = 180002] = "StageCreationFailed";
    /** Message was blocked by automatic moderation */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["MessageBlocked"] = 200000] = "MessageBlocked";
    /** Title was blocked by automatic moderation */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["TitleBlocked"] = 200001] = "TitleBlocked";
    /** Webhooks posted to forum channels must have a thread_name or thread_id */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["WebhookNeedsThreadInfo"] = 220001] = "WebhookNeedsThreadInfo";
    /** Webhooks posted to forum channels cannot have both a thread_name and thread_id */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["WebhookTooMuchThreadInfo"] = 220002] = "WebhookTooMuchThreadInfo";
    /** Webhooks can only create threads in forum channels */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["WebhookOnlyThreads"] = 220003] = "WebhookOnlyThreads";
    /** Webhook services cannot be used in forum channels */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["WebhookNoServices"] = 220004] = "WebhookNoServices";
    /** Message blocked by harmful links filter */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["HarmfulLinks"] = 240000] = "HarmfulLinks";
    /** Cannot enable onboarding, requirements are not met */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OnboardingRequirementsNotMet"] = 350000] = "OnboardingRequirementsNotMet";
    /** Cannot update onboarding while below requirements */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["OnboardingBelowRequirements"] = 350001] = "OnboardingBelowRequirements";
    /** Access to file uploads has been limited for this guild */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["FileUploadsLimited"] = 400001] = "FileUploadsLimited";
    /** Failed to ban users */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["BanFailed"] = 500000] = "BanFailed";
    /** Poll voting blocked */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["PollBlocked"] = 520000] = "PollBlocked";
    /** Poll expired */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["PollExpired"] = 520001] = "PollExpired";
    /** Invalid channel type for poll creation */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["PollBadChannelType"] = 520002] = "PollBadChannelType";
    /** Cannot edit a poll message */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["PollEditBlocked"] = 520003] = "PollEditBlocked";
    /** Cannot use an emoji included with the poll */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["PollEmojiBlocked"] = 520004] = "PollEmojiBlocked";
    /** Cannot expire a non-poll message */ HTTPJsonErrorCodes[HTTPJsonErrorCodes["NotAPoll"] = 520006] = "NotAPoll";
    return HTTPJsonErrorCodes;
}({});

//# sourceMappingURL=data:application/json;base64,