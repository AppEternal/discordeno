/** Types for: https://discord.com/developers/docs/resources/channel */ /** https://discord.com/developers/docs/resources/channel#channel-object-channel-types */ export var ChannelTypes =
  /*#__PURE__*/ (function (ChannelTypes) {
    /** A text channel within a server */ ChannelTypes[(ChannelTypes['GuildText'] = 0)] = 'GuildText'
    /** A direct message between users */ ChannelTypes[(ChannelTypes['DM'] = 1)] = 'DM'
    /** A voice channel within a server */ ChannelTypes[(ChannelTypes['GuildVoice'] = 2)] = 'GuildVoice'
    /** A direct message between multiple users */ ChannelTypes[(ChannelTypes['GroupDm'] = 3)] = 'GroupDm'
    /** An organizational category that contains up to 50 channels */ ChannelTypes[(ChannelTypes['GuildCategory'] = 4)] = 'GuildCategory'
    /** A channel that users can follow and crosspost into their own server */ ChannelTypes[(ChannelTypes['GuildAnnouncement'] = 5)] =
      'GuildAnnouncement'
    /** A temporary sub-channel within a GUILD_ANNOUNCEMENT channel */ ChannelTypes[(ChannelTypes['AnnouncementThread'] = 10)] = 'AnnouncementThread'
    /** A temporary sub-channel within a GUILD_TEXT or GUILD_FORUM channel */ ChannelTypes[(ChannelTypes['PublicThread'] = 11)] = 'PublicThread'
    /** A temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission */ ChannelTypes[
      (ChannelTypes['PrivateThread'] = 12)
    ] = 'PrivateThread'
    /** A voice channel for hosting events with an audience */ ChannelTypes[(ChannelTypes['GuildStageVoice'] = 13)] = 'GuildStageVoice'
    /** A channel in a hub containing the listed servers */ ChannelTypes[(ChannelTypes['GuildDirectory'] = 14)] = 'GuildDirectory'
    /** A channel which can only contains threads */ ChannelTypes[(ChannelTypes['GuildForum'] = 15)] = 'GuildForum'
    /** Channel that can only contain threads, similar to GUILD_FORUM channels */ ChannelTypes[(ChannelTypes['GuildMedia'] = 16)] = 'GuildMedia'
    return ChannelTypes
  })({})
/** https://discord.com/developers/docs/resources/channel#channel-object-video-quality-modes */ export var VideoQualityModes =
  /*#__PURE__*/ (function (VideoQualityModes) {
    /** Discord chooses the quality for optimal performance */ VideoQualityModes[(VideoQualityModes['Auto'] = 1)] = 'Auto'
    /** 720p */ VideoQualityModes[(VideoQualityModes['Full'] = 2)] = 'Full'
    return VideoQualityModes
  })({})
/** https://discord.com/developers/docs/resources/channel#channel-object-channel-flags */ export var ChannelFlags = /*#__PURE__*/ (function (
  ChannelFlags,
) {
  ChannelFlags[(ChannelFlags['None'] = 0)] = 'None'
  /** this thread is pinned to the top of its parent `GUILD_FORUM` channel */ ChannelFlags[(ChannelFlags['Pinned'] = 2)] = 'Pinned'
  /** Whether a tag is required to be specified when creating a thread in a `GUILD_FORUM` or a GUILD_MEDIA channel. Tags are specified in the `applied_tags` field. */ ChannelFlags[
    (ChannelFlags['RequireTag'] = 16)
  ] = 'RequireTag'
  /** When set hides the embedded media download options. Available only for media channels. */ ChannelFlags[
    (ChannelFlags['HideMediaDownloadOptions'] = 32768)
  ] = 'HideMediaDownloadOptions'
  return ChannelFlags
})({})
/** https://discord.com/developers/docs/resources/channel#channel-object-sort-order-types */ export var SortOrderTypes = /*#__PURE__*/ (function (
  SortOrderTypes,
) {
  /** Sort forum posts by activity */ SortOrderTypes[(SortOrderTypes['LatestActivity'] = 0)] = 'LatestActivity'
  /** Sort forum posts by creation time (from most recent to oldest) */ SortOrderTypes[(SortOrderTypes['CreationDate'] = 1)] = 'CreationDate'
  return SortOrderTypes
})({})
/** https://discord.com/developers/docs/resources/channel#channel-object-forum-layout-types */ export var ForumLayout = /*#__PURE__*/ (function (
  ForumLayout,
) {
  /** No default has been set for forum channel. */ ForumLayout[(ForumLayout['NotSet'] = 0)] = 'NotSet'
  /** Display posts as a list. */ ForumLayout[(ForumLayout['ListView'] = 1)] = 'ListView'
  /** Display posts as a collection of tiles. */ ForumLayout[(ForumLayout['GalleryView'] = 2)] = 'GalleryView'
  return ForumLayout
})({})
/** https://discord.com/developers/docs/resources/channel#overwrite-object-overwrite-structure */ export var OverwriteTypes =
  /*#__PURE__*/ (function (OverwriteTypes) {
    OverwriteTypes[(OverwriteTypes['Role'] = 0)] = 'Role'
    OverwriteTypes[(OverwriteTypes['Member'] = 1)] = 'Member'
    return OverwriteTypes
  })({})

//# sourceMappingURL=data:application/json;base64,
