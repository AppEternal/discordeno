/** Types for: https://discord.com/developers/docs/resources/guild */ /** https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level */ export var DefaultMessageNotificationLevels =
  /*#__PURE__*/ (function (DefaultMessageNotificationLevels) {
    /** Members will receive notifications for all messages by default */ DefaultMessageNotificationLevels[
      (DefaultMessageNotificationLevels['AllMessages'] = 0)
    ] = 'AllMessages'
    /** Members will receive notifications only for messages that \@mention them by default */ DefaultMessageNotificationLevels[
      (DefaultMessageNotificationLevels['OnlyMentions'] = 1)
    ] = 'OnlyMentions'
    return DefaultMessageNotificationLevels
  })({})
/** https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level */ export var ExplicitContentFilterLevels =
  /*#__PURE__*/ (function (ExplicitContentFilterLevels) {
    /** Media content will not be scanned */ ExplicitContentFilterLevels[(ExplicitContentFilterLevels['Disabled'] = 0)] = 'Disabled'
    /** Media content sent by members without roles will be scanned */ ExplicitContentFilterLevels[
      (ExplicitContentFilterLevels['MembersWithoutRoles'] = 1)
    ] = 'MembersWithoutRoles'
    /** Media content sent by all members will be scanned */ ExplicitContentFilterLevels[(ExplicitContentFilterLevels['AllMembers'] = 2)] =
      'AllMembers'
    return ExplicitContentFilterLevels
  })({})
/** https://discord.com/developers/docs/resources/guild#guild-object-mfa-level */ export var MfaLevels = /*#__PURE__*/ (function (MfaLevels) {
  /** Guild has no MFA/2FA requirement for moderation actions */ MfaLevels[(MfaLevels['None'] = 0)] = 'None'
  /** Guild has a 2FA requirement for moderation actions */ MfaLevels[(MfaLevels['Elevated'] = 1)] = 'Elevated'
  return MfaLevels
})({})
/** https://discord.com/developers/docs/resources/guild#guild-object-verification-level */ export var VerificationLevels = /*#__PURE__*/ (function (
  VerificationLevels,
) {
  /** Unrestricted */ VerificationLevels[(VerificationLevels['None'] = 0)] = 'None'
  /** Must have verified email on account */ VerificationLevels[(VerificationLevels['Low'] = 1)] = 'Low'
  /** Must be registered on Discord for longer than 5 minutes */ VerificationLevels[(VerificationLevels['Medium'] = 2)] = 'Medium'
  /** Must be a member of the server for longer than 10 minutes */ VerificationLevels[(VerificationLevels['High'] = 3)] = 'High'
  /** Must have a verified phone number */ VerificationLevels[(VerificationLevels['VeryHigh'] = 4)] = 'VeryHigh'
  return VerificationLevels
})({})
/** https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level */ export var GuildNsfwLevel = /*#__PURE__*/ (function (
  GuildNsfwLevel,
) {
  GuildNsfwLevel[(GuildNsfwLevel['Default'] = 0)] = 'Default'
  GuildNsfwLevel[(GuildNsfwLevel['Explicit'] = 1)] = 'Explicit'
  GuildNsfwLevel[(GuildNsfwLevel['Safe'] = 2)] = 'Safe'
  GuildNsfwLevel[(GuildNsfwLevel['AgeRestricted'] = 3)] = 'AgeRestricted'
  return GuildNsfwLevel
})({})
/** https://discord.com/developers/docs/resources/guild#guild-object-premium-tier */ export var PremiumTiers = /*#__PURE__*/ (function (
  PremiumTiers,
) {
  /** Guild has not unlocked any Server Boost perks */ PremiumTiers[(PremiumTiers['None'] = 0)] = 'None'
  /** Guild has unlocked Server Boost level 1 perks */ PremiumTiers[(PremiumTiers['Tier1'] = 1)] = 'Tier1'
  /** Guild has unlocked Server Boost level 2 perks */ PremiumTiers[(PremiumTiers['Tier2'] = 2)] = 'Tier2'
  /** Guild has unlocked Server Boost level 3 perks */ PremiumTiers[(PremiumTiers['Tier3'] = 3)] = 'Tier3'
  return PremiumTiers
})({})
/** https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags */ export var SystemChannelFlags = /*#__PURE__*/ (function (
  SystemChannelFlags,
) {
  /** Suppress member join notifications */ SystemChannelFlags[(SystemChannelFlags['SuppressJoinNotifications'] = 1)] = 'SuppressJoinNotifications'
  /** Suppress server boost notifications */ SystemChannelFlags[(SystemChannelFlags['SuppressPremiumSubscriptions'] = 2)] =
    'SuppressPremiumSubscriptions'
  /** Suppress server setup tips */ SystemChannelFlags[(SystemChannelFlags['SuppressGuildReminderNotifications'] = 4)] =
    'SuppressGuildReminderNotifications'
  /** Hide member join sticker reply buttons */ SystemChannelFlags[(SystemChannelFlags['SuppressJoinNotificationReplies'] = 8)] =
    'SuppressJoinNotificationReplies'
  /** Suppress role subscription purchase and renewal notifications */ SystemChannelFlags[
    (SystemChannelFlags['SuppressRoleSubscriptionPurchaseNotifications'] = 16)
  ] = 'SuppressRoleSubscriptionPurchaseNotifications'
  /** Hide role subscription sticker reply buttons */ SystemChannelFlags[
    (SystemChannelFlags['SuppressRoleSubscriptionPurchaseNotificationReplies'] = 32)
  ] = 'SuppressRoleSubscriptionPurchaseNotificationReplies'
  return SystemChannelFlags
})({})
/** https://discord.com/developers/docs/resources/guild#guild-object-guild-features */ export var GuildFeatures = /*#__PURE__*/ (function (
  GuildFeatures,
) {
  /** Guild has access to set an animated guild banner image */ GuildFeatures['AnimatedBanner'] = 'ANIMATED_BANNER'
  /** Guild has access to set an animated guild icon */ GuildFeatures['AnimatedIcon'] = 'ANIMATED_ICON'
  /** Guild is using the old permissions configuration behavior */ GuildFeatures['ApplicationCommandPermissionsV2'] =
    'APPLICATION_COMMAND_PERMISSIONS_V2'
  /** Guild has set up auto moderation rules */ GuildFeatures['AutoModeration'] = 'AUTO_MODERATION'
  /** Guild has access to set a guild banner image */ GuildFeatures['Banner'] = 'BANNER'
  /**
   * Guild can enable welcome screen, Membership Screening, stage channels and discovery, and receives community updates
   *
   * @remarks
   * This value is mutable
   * */ GuildFeatures['Community'] = 'COMMUNITY'
  /** Guild has enabled monetization. */ GuildFeatures['CreatorMonetizableProvisional'] = 'CREATOR_MONETIZABLE_PROVISIONAL'
  /** Guild has enabled the role subscription promo page. */ GuildFeatures['CreatorStorePage'] = 'CREATOR_STORE_PAGE'
  /** Guild has been set as a support server on the App Directory */ GuildFeatures['DeveloperSupportServer'] = 'DEVELOPER_SUPPORT_SERVER'
  /**
   * Guild is able to be discovered in the directory
   *
   * @remarks
   * This value is mutable
   */ GuildFeatures['Discoverable'] = 'DISCOVERABLE'
  /** Guild is able to be featured in the directory */ GuildFeatures['Featurable'] = 'FEATURABLE'
  /**
   * Guild has paused invites, preventing new users from joining
   *
   * @remarks
   * This value is mutable
   */ GuildFeatures['InvitesDisabled'] = 'INVITES_DISABLED'
  /** Guild has access to set an invite splash background */ GuildFeatures['InviteSplash'] = 'INVITE_SPLASH'
  /** Guild has enabled [Membership Screening](https://discord.com/developers/docs/resources/guild#membership-screening-object) */ GuildFeatures[
    'MemberVerificationGateEnabled'
  ] = 'MEMBER_VERIFICATION_GATE_ENABLED'
  /** Guild has increased custom soundboard sound slots. */ GuildFeatures['MoreSoundboard'] = 'MORE_SOUNDBOARD'
  /** Guild has increased custom sticker slots */ GuildFeatures['MoreStickers'] = 'MORE_STICKERS'
  /** Guild has access to create news channels */ GuildFeatures['News'] = 'NEWS'
  /** Guild is partnered */ GuildFeatures['Partnered'] = 'PARTNERED'
  /** Guild can be previewed before joining via Membership Screening or the directory */ GuildFeatures['PreviewEnabled'] = 'PREVIEW_ENABLED'
  /**
   * Guild has disabled alerts for join raids in the configured safety alerts channel
   *
   * @remarks
   * This value is mutable
   */ GuildFeatures['RaidAlertsDisabled'] = 'RAID_ALERTS_DISABLED'
  /** Guild is able to set role icons */ GuildFeatures['RoleIcons'] = 'ROLE_ICONS'
  /** Guild has role subscriptions that can be purchased. */ GuildFeatures['RoleSubscriptionsAvailableForPurchase'] =
    'ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE'
  /** Guild has enabled role subscriptions. */ GuildFeatures['RoleSubscriptionsEnabled'] = 'ROLE_SUBSCRIPTIONS_ENABLED'
  /** Guild has created soundboard sounds. */ GuildFeatures['Soundboard'] = 'SOUNDBOARD'
  /** Guild has enabled ticketed events */ GuildFeatures['TicketedEventsEnabled'] = 'TICKETED_EVENTS_ENABLED'
  /** Guild has access to set a vanity URL */ GuildFeatures['VanityUrl'] = 'VANITY_URL'
  /** Guild is verified */ GuildFeatures['Verified'] = 'VERIFIED'
  /** Guild has access to set 384 kbps bitrate in voice (previously VIP voice servers) */ GuildFeatures['VipRegions'] = 'VIP_REGIONS'
  /** Guild has enabled the welcome screen */ GuildFeatures['WelcomeScreenEnabled'] = 'WELCOME_SCREEN_ENABLED'
  /** Guild has access to guest invites */ GuildFeatures['GuestsEnabled'] = 'GUESTS_ENABLED'
  /** Guild has access to set guild tags */ GuildFeatures['GuildTags'] = 'GUILD_TAGS'
  /** Guild is able to set gradient colors to roles */ GuildFeatures['EnhancedRoleColors'] = 'ENHANCED_ROLE_COLORS'
  return GuildFeatures
})({})
/** https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-flags */ export var MemberFlags = /*#__PURE__*/ (function (
  MemberFlags,
) {
  /**
   * Member has left and rejoined the guild
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['DidRejoin'] = 1)] = 'DidRejoin'
  /**
   * Member has completed onboarding
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['CompletedOnboarding'] = 2)] = 'CompletedOnboarding'
  /** Member is exempt from guild verification requirements */ MemberFlags[(MemberFlags['BypassesVerification'] = 4)] = 'BypassesVerification'
  /**
   * Member has started onboarding
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['StartedOnboarding'] = 8)] = 'StartedOnboarding'
  /**
   * Member is a guest and can only access the voice channel they were invited to
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['IsGuest'] = 16)] = 'IsGuest'
  /**
   * Member has started Server Guide new member actions
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['StartedHomeActions'] = 32)] = 'StartedHomeActions'
  /**
   * Member has completed Server Guide new member actions
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['CompletedHomeActions'] = 64)] = 'CompletedHomeActions'
  /**
   * Member's username, display name, or nickname is blocked by AutoMod
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['AutomodQuarantinedUsername'] = 128)] = 'AutomodQuarantinedUsername'
  /**
   * Member has dismissed the DM settings upsell
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['DmSettingsUpsellAcknowledged'] = 512)] = 'DmSettingsUpsellAcknowledged'
  /**
   * Member's guild tag is blocked by AutoMod
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[(MemberFlags['AutomodQuarantinedGuildTag'] = 1024)] = 'AutomodQuarantinedGuildTag'
  return MemberFlags
})({})
/** https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors */ export var IntegrationExpireBehaviors =
  /*#__PURE__*/ (function (IntegrationExpireBehaviors) {
    IntegrationExpireBehaviors[(IntegrationExpireBehaviors['RemoveRole'] = 0)] = 'RemoveRole'
    IntegrationExpireBehaviors[(IntegrationExpireBehaviors['Kick'] = 1)] = 'Kick'
    return IntegrationExpireBehaviors
  })({})
/** https://discord.com/developers/docs/resources/guild#guild-onboarding-object-onboarding-mode */ export var DiscordGuildOnboardingMode =
  /*#__PURE__*/ (function (DiscordGuildOnboardingMode) {
    /** Counts only Default Channels towards constraints */ DiscordGuildOnboardingMode[(DiscordGuildOnboardingMode['OnboardingDefault'] = 0)] =
      'OnboardingDefault'
    /** Counts Default Channels and Questions towards constraints */ DiscordGuildOnboardingMode[
      (DiscordGuildOnboardingMode['OnboardingAdvanced'] = 1)
    ] = 'OnboardingAdvanced'
    return DiscordGuildOnboardingMode
  })({})
/** https://discord.com/developers/docs/resources/guild#guild-onboarding-object-prompt-types */ export var DiscordGuildOnboardingPromptType =
  /*#__PURE__*/ (function (DiscordGuildOnboardingPromptType) {
    DiscordGuildOnboardingPromptType[(DiscordGuildOnboardingPromptType['MultipleChoice'] = 0)] = 'MultipleChoice'
    DiscordGuildOnboardingPromptType[(DiscordGuildOnboardingPromptType['DropDown'] = 1)] = 'DropDown'
    return DiscordGuildOnboardingPromptType
  })({})

//# sourceMappingURL=data:application/json;base64,
