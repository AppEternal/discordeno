/** Types for: https://discord.com/developers/docs/components/reference */ /** https://discord.com/developers/docs/components/reference#component-object-component-types */ export var MessageComponentTypes = /*#__PURE__*/ function(MessageComponentTypes) {
    /** A container for other components */ MessageComponentTypes[MessageComponentTypes["ActionRow"] = 1] = "ActionRow";
    /** A button object */ MessageComponentTypes[MessageComponentTypes["Button"] = 2] = "Button";
    /** A select menu for picking from choices */ MessageComponentTypes[MessageComponentTypes["StringSelect"] = 3] = "StringSelect";
    /** A text input object */ MessageComponentTypes[MessageComponentTypes["TextInput"] = 4] = "TextInput";
    /** Select menu for users */ MessageComponentTypes[MessageComponentTypes["UserSelect"] = 5] = "UserSelect";
    /** Select menu for roles */ MessageComponentTypes[MessageComponentTypes["RoleSelect"] = 6] = "RoleSelect";
    /** Select menu for users and roles */ MessageComponentTypes[MessageComponentTypes["MentionableSelect"] = 7] = "MentionableSelect";
    /** Select menu for channels */ MessageComponentTypes[MessageComponentTypes["ChannelSelect"] = 8] = "ChannelSelect";
    /** Container to display text alongside an accessory component */ MessageComponentTypes[MessageComponentTypes["Section"] = 9] = "Section";
    /** Markdown text */ MessageComponentTypes[MessageComponentTypes["TextDisplay"] = 10] = "TextDisplay";
    /** Small image that can be used as an accessory */ MessageComponentTypes[MessageComponentTypes["Thumbnail"] = 11] = "Thumbnail";
    /** Display images and other media */ MessageComponentTypes[MessageComponentTypes["MediaGallery"] = 12] = "MediaGallery";
    /** Displays an attached file */ MessageComponentTypes[MessageComponentTypes["File"] = 13] = "File";
    /** Component to add vertical padding between other components */ MessageComponentTypes[MessageComponentTypes["Separator"] = 14] = "Separator";
    /** Container that visually groups a set of components */ MessageComponentTypes[MessageComponentTypes["Container"] = 17] = "Container";
    return MessageComponentTypes;
}({});
/** https://discord.com/developers/docs/components/reference#button-button-styles */ export var ButtonStyles = /*#__PURE__*/ function(ButtonStyles) {
    /** A blurple button */ ButtonStyles[ButtonStyles["Primary"] = 1] = "Primary";
    /** A grey button */ ButtonStyles[ButtonStyles["Secondary"] = 2] = "Secondary";
    /** A green button */ ButtonStyles[ButtonStyles["Success"] = 3] = "Success";
    /** A red button */ ButtonStyles[ButtonStyles["Danger"] = 4] = "Danger";
    /** A button that navigates to a URL */ ButtonStyles[ButtonStyles["Link"] = 5] = "Link";
    /** A blurple button to show a Premium item in the shop */ ButtonStyles[ButtonStyles["Premium"] = 6] = "Premium";
    return ButtonStyles;
}({});
/** https://discord.com/developers/docs/components/reference#text-input-text-input-styles */ export var TextStyles = /*#__PURE__*/ function(TextStyles) {
    /** Intended for short single-line text */ TextStyles[TextStyles["Short"] = 1] = "Short";
    /** Intended for much longer inputs */ TextStyles[TextStyles["Paragraph"] = 2] = "Paragraph";
    return TextStyles;
}({});
/** https://discord.com/developers/docs/components/reference#separator-separator-structure, spacing description */ export var SeparatorSpacingSize = /*#__PURE__*/ function(SeparatorSpacingSize) {
    SeparatorSpacingSize[SeparatorSpacingSize["Small"] = 1] = "Small";
    SeparatorSpacingSize[SeparatorSpacingSize["Large"] = 2] = "Large";
    return SeparatorSpacingSize;
}({});

//# sourceMappingURL=data:application/json;base64,