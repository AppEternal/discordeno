export {}

//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type {\n  AddDmRecipientOptions,\n  AddGuildMemberOptions,\n  AddLobbyMember,\n  AtLeastOne,\n  BeginGuildPrune,\n  BigString,\n  Camelize,\n  ChannelTypes,\n  CreateApplicationCommand,\n  CreateApplicationEmoji,\n  CreateAutoModerationRuleOptions,\n  CreateChannelInvite,\n  CreateForumPostWithMessage,\n  CreateGlobalApplicationCommandOptions,\n  CreateGroupDmOptions,\n  CreateGuildApplicationCommandOptions,\n  CreateGuildBan,\n  CreateGuildBulkBan,\n  CreateGuildChannel,\n  CreateGuildEmoji,\n  CreateGuildRole,\n  CreateGuildSoundboardSound,\n  CreateGuildStickerOptions,\n  CreateLobby,\n  CreateMessageOptions,\n  CreateScheduledEvent,\n  CreateStageInstance,\n  CreateTemplate,\n  CreateTestEntitlement,\n  CreateWebhook,\n  DeleteWebhookMessageOptions,\n  DiscordAccessTokenResponse,\n  DiscordActivityInstance,\n  DiscordApplication,\n  DiscordApplicationCommand,\n  DiscordApplicationCommandPermissions,\n  DiscordApplicationIntegrationType,\n  DiscordApplicationRoleConnection,\n  DiscordApplicationRoleConnectionMetadata,\n  DiscordAuditLog,\n  DiscordAutoModerationRule,\n  DiscordBan,\n  DiscordBulkBan,\n  DiscordChannel,\n  DiscordConnection,\n  DiscordCurrentAuthorization,\n  DiscordEmoji,\n  DiscordEntitlement,\n  DiscordFollowedChannel,\n  DiscordGetAnswerVotesResponse,\n  DiscordGetChannelPins,\n  DiscordGetGatewayBot,\n  DiscordGuild,\n  DiscordGuildApplicationCommandPermissions,\n  DiscordGuildOnboarding,\n  DiscordGuildPreview,\n  DiscordGuildWidget,\n  DiscordGuildWidgetSettings,\n  DiscordIncidentsData,\n  DiscordIntegration,\n  DiscordInteraction,\n  DiscordInteractionCallbackResponse,\n  DiscordInvite,\n  DiscordInviteMetadata,\n  DiscordListActiveThreads,\n  DiscordListArchivedThreads,\n  DiscordLobby,\n  DiscordLobbyMember,\n  DiscordMember,\n  DiscordMemberWithUser,\n  DiscordMessage,\n  DiscordPrunedCount,\n  DiscordRole,\n  DiscordScheduledEvent,\n  DiscordSku,\n  DiscordSoundboardSound,\n  DiscordStageInstance,\n  DiscordSticker,\n  DiscordStickerPack,\n  DiscordSubscription,\n  DiscordTemplate,\n  DiscordThreadMember,\n  DiscordTokenExchange,\n  DiscordTokenRevocation,\n  DiscordUser,\n  DiscordVanityUrl,\n  DiscordVoiceRegion,\n  DiscordVoiceState,\n  DiscordWebhook,\n  DiscordWelcomeScreen,\n  EditApplication,\n  EditAutoModerationRuleOptions,\n  EditBotMemberOptions,\n  EditChannelPermissionOverridesOptions,\n  EditGuildOnboarding,\n  EditGuildRole,\n  EditGuildStickerOptions,\n  EditMessage,\n  EditOwnVoiceState,\n  EditScheduledEvent,\n  EditUserVoiceState,\n  EditWebhookMessageOptions,\n  ExecuteWebhook,\n  FileContent,\n  GetApplicationCommandPermissionOptions,\n  GetBans,\n  GetChannelPinsOptions,\n  GetEntitlements,\n  GetGlobalApplicationCommandsOptions,\n  GetGuildApplicationCommandsOptions,\n  GetGuildAuditLog,\n  GetGuildPruneCountQuery,\n  GetInvite,\n  GetMessagesOptions,\n  GetPollAnswerVotes,\n  GetReactions,\n  GetScheduledEvents,\n  GetScheduledEventUsers,\n  GetThreadMember,\n  GetUserGuilds,\n  GetWebhookMessageOptions,\n  GuildFeatures,\n  InteractionCallbackData,\n  InteractionCallbackOptions,\n  InteractionResponse,\n  LinkChannelToLobby,\n  ListArchivedThreads,\n  ListGuildMembers,\n  ListSkuSubscriptionsOptions,\n  ListThreadMembers,\n  ModifyApplicationEmoji,\n  ModifyChannel,\n  ModifyGuild,\n  ModifyGuildChannelPositions,\n  ModifyGuildEmoji,\n  ModifyGuildIncidentActions,\n  ModifyGuildMember,\n  ModifyGuildSoundboardSound,\n  ModifyGuildTemplate,\n  ModifyGuildWelcomeScreen,\n  ModifyLobby,\n  ModifyRolePositions,\n  ModifyWebhook,\n  ScheduledEventEntityType,\n  ScheduledEventStatus,\n  SearchMembers,\n  SendSoundboardSound,\n  StartThreadWithMessage,\n  StartThreadWithoutMessage,\n  UpsertGlobalApplicationCommandOptions,\n  UpsertGuildApplicationCommandOptions,\n} from '@discordeno/types'\nimport type { logger } from '@discordeno/utils'\nimport type { InvalidRequestBucket } from './invalidBucket.js'\nimport type { Queue } from './queue.js'\nimport type { RestRoutes } from './typings/routes.js'\n\nexport interface CreateRestManagerOptions {\n  /** The bot token which will be used to make requests. */\n  token: string\n  /**\n   * For old bots that have a different bot id and application id.\n   * @default bot id from token\n   */\n  applicationId?: BigString\n  /** Configuration when using a proxy. */\n  proxy?: {\n    /**\n     * The base url to connect to. If you create a proxy rest, that url would go here.\n     * IT SHOULD NOT END WITH A /\n     * @default https://discord.com/api\n     */\n    baseUrl: string\n    /** The authorization header value to attach when sending requests to the proxy. */\n    authorization?: string\n    /**\n     * The authorization header name to use when sending requests to the proxy\n     *\n     * @remarks\n     * If the header name is set to `authorization`, it will override any authorization that is given even if\n     * the requests uses OAuth2 Bearer tokens / Basic tokens\n     *\n     * @default \"authorization\" // For compatibility purposes\n     */\n    authorizationHeader?: string\n    /**\n     * The endpoint to use in the rest proxy to update the bearer tokens\n     *\n     * @remarks\n     * Should not include a `/` in the start\n     *\n     * This value is actually required if you want to use `updateTokenQueues`\n     */\n    updateBearerTokenEndpoint?: string\n  }\n  /**\n   * The api versions which can be used to make requests.\n   * @default 10\n   */\n  version?: ApiVersions\n  /**\n   * The logger that the rest manager will use\n   * @default logger // The logger exported by `@discordeno/utils`\n   */\n  logger?: Pick<typeof logger, 'debug' | 'info' | 'warn' | 'error' | 'fatal'>\n  /** Events for the rest manager */\n  events?: Partial<RestManagerEvents>\n}\n\nexport interface RestManager {\n  /** The bot token which will be used to make requests. */\n  token: string\n  /** The application id. Normally this is not required for recent bots but old bot's application id is sometimes different from the bot id so it is required for those bots. */\n  applicationId: bigint\n  /** The api version to use when making requests. Only the latest supported version will be tested. */\n  version: ApiVersions\n  /**\n   * The base url to connect to. If you create a proxy rest, that url would go here.\n   * IT SHOULD NOT END WITH A /\n   * @default https://discord.com/api\n   */\n  baseUrl: string\n  /**\n   * `true` if the `baseUrl` does not start with `https://discord.com/api`.\n   *\n   * Mostly used only for intern functions.\n   */\n  isProxied: boolean\n  /** The authorization header value to attach when sending requests to the proxy. */\n  authorization?: string\n  /** The authorization header name to attach when sending requests to the proxy */\n  authorizationHeader: string\n  /** The endpoint to use for `updateTokenQueues` when working with a rest proxy */\n  updateBearerTokenEndpoint?: string\n  /** The maximum amount of times a request should be retried. Defaults to Infinity */\n  maxRetryCount: number\n  /** Whether or not the manager is rate limited globally across all requests. Defaults to false. */\n  globallyRateLimited: boolean\n  /** Whether or not the rate limited paths are being processed to allow requests to be made once time is up. Defaults to false. */\n  processingRateLimitedPaths: boolean\n  /** The time in milliseconds to wait before deleting this queue if it is empty. Defaults to 60000(one minute). */\n  deleteQueueDelay: number\n  /** The queues that hold all the requests to be processed. */\n  queues: Map<string, Queue>\n  /** The paths that are currently rate limited. */\n  rateLimitedPaths: Map<string, RestRateLimitedPath>\n  /** The bucket for handling any invalid requests.  */\n  invalidBucket: InvalidRequestBucket\n  /** The routes that are available for this manager. */\n  routes: RestRoutes\n  /** The logger to use for the rest manager */\n  logger: Pick<typeof logger, 'debug' | 'info' | 'warn' | 'error' | 'fatal'>\n  /** Events for the rest manager */\n  events: RestManagerEvents\n  /** Allows the user to inject custom headers that will be sent with every request. */\n  createBaseHeaders: () => Record<string, string>\n  /** Whether or not the rest manager should keep objects in raw snake case from discord. */\n  preferSnakeCase: (enabled: boolean) => RestManager\n  /** Check the rate limits for a url or a bucket. */\n  checkRateLimits: (url: string, identifier: string) => number | false\n  /* Update the queues and ratelimit information to adapt to the new token */\n  updateTokenQueues: (oldToken: string, newToken: string) => Promise<void>\n  /** Reshapes and modifies the obj as needed to make it ready for discords api. */\n  changeToDiscordFormat: (obj: any) => any\n  /** Creates the request body and headers that are necessary to send a request. Will handle different types of methods and everything necessary for discord. */\n  createRequestBody: (method: RequestMethods, options?: CreateRequestBodyOptions) => RequestBody\n  /** This will create a infinite loop running in 1 seconds using tail recursion to keep rate limits clean. When a rate limit resets, this will remove it so the queue can proceed. */\n  processRateLimitedPaths: () => void\n  /** Processes the rate limit headers and determines if it needs to be rate limited and returns the bucket id if available */\n  processHeaders: (url: string, headers: Headers, identifier: string) => string | undefined\n  /** Sends a request to the api. */\n  sendRequest: (options: SendRequestOptions) => Promise<void>\n  /** Split a url to separate rate limit buckets based on major/minor parameters. */\n  simplifyUrl: (url: string, method: RequestMethods) => string\n  /** Make a request to be sent to the api. */\n  makeRequest: <T = unknown>(method: RequestMethods, url: string, options?: MakeRequestOptions) => Promise<T>\n  /** Takes a request and processes it into a queue. */\n  processRequest: (request: SendRequestOptions) => Promise<void>\n  /** Make a get request to the api */\n  get: <T = void>(url: string, options?: Omit<MakeRequestOptions, 'body'>) => Promise<Camelize<T>>\n  /** Make a post request to the api. */\n  post: <T = void>(url: string, options?: MakeRequestOptions) => Promise<Camelize<T>>\n  /** Make a put request to the api. */\n  put: <T = void>(url: string, options?: MakeRequestOptions) => Promise<Camelize<T>>\n  /** Make a delete request to the api. */\n  delete: (url: string, options?: Omit<MakeRequestOptions, 'body'>) => Promise<void>\n  /** Make a patch request to the api. */\n  patch: <T = void>(url: string, options?: MakeRequestOptions) => Promise<Camelize<T>>\n  /**\n   * Adds a reaction to a message.\n   *\n   * @param channelId - The ID of the channel the message to add a reaction to is in.\n   * @param messageId - The ID of the message to add a reaction to.\n   * @param reaction - The reaction to add to the message.\n   * @returns\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * If nobody else has reacted to the message:\n   * - Requires the `ADD_REACTIONS` permission.\n   *\n   * Fires a _Message Reaction Add_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#create-reaction}\n   */\n  addReaction: (channelId: BigString, messageId: BigString, reaction: string) => Promise<void>\n  /**\n   * Adds multiple a reaction to a message.\n   *\n   * This function uses the `addReaction()` helper behind the scenes.\n   *\n   * @param channelId - The ID of the channel the message to add reactions to is in.\n   * @param messageId - The ID of the message to add the reactions to.\n   * @param reactions - The reactions to add to the message.\n   * @param ordered - Whether the reactions must be added in order or not.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * If nobody else has reacted to the message:\n   * - Requires the `ADD_REACTIONS` permission.\n   *\n   * Fires a _Message Reaction Add_ gateway event for every reaction added.\n   */\n  addReactions: (channelId: BigString, messageId: BigString, reactions: string[], ordered?: boolean) => Promise<void>\n  /**\n   * Adds a role to a member.\n   *\n   * @param guildId - The ID of the guild the member to add the role to is in.\n   * @param userId - The user ID of the member to add the role to.\n   * @param roleId - The ID of the role to add to the member.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Fires a _Guild Member Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#add-guild-member-role}\n   */\n  addRole: (guildId: BigString, userId: BigString, roleId: BigString, reason?: string) => Promise<void>\n  /**\n   * Adds a member to a thread.\n   *\n   * @param channelId - The ID of the thread to add the member to.\n   * @param userId - The user ID of the member to add to the thread.\n   *\n   * @remarks\n   * Requires the ability to send messages in the thread.\n   * Requires the thread not be archived.\n   *\n   * Fires a _Thread Members Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#add-thread-member}\n   */\n  addThreadMember: (channelId: BigString, userId: BigString) => Promise<void>\n  /**\n   * Adds a recipient to a group DM.\n   *\n   * @param channelId - The ID of the group dm to add the user to.\n   * @param userId - The user ID of the user to add to the group dm.\n   * @param options - The options for adding the user\n   *\n   * @remarks\n   * Requires an OAuth2 access token with the `gdm.join` scope\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#group-dm-add-recipient}\n   */\n  addDmRecipient: (channelId: BigString, userId: BigString, options: AddDmRecipientOptions) => Promise<void>\n  /**\n   * Adds a member to a guild.\n   *\n   * @param guildId - The ID of the thread to add the member to.\n   * @param userId - The user ID of the member to add to the thread.\n   * @param options - The options for the add of a guild member\n   *\n   * @remarks\n   * Requires the bot to be in the specified server\n   * Requires an OAuth2 access token with the `guilds.join` scope\n   *\n   * Fires a _Guild Member Add_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#add-guild-member}\n   */\n  addGuildMember: (guildId: BigString, userId: BigString, options: AddGuildMemberOptions) => Promise<void>\n  /**\n   * Creates an automod rule in a guild.\n   *\n   * @param guildId - The ID of the guild to create the rule in.\n   * @param options - The parameters for the creation of the rule.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordAutoModerationRule}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires an _Auto Moderation Rule Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/auto-moderation#create-auto-moderation-rule}\n   */\n  createAutomodRule: (guildId: BigString, options: CreateAutoModerationRuleOptions, reason?: string) => Promise<Camelize<DiscordAutoModerationRule>>\n  /**\n   * Creates a channel within a guild.\n   *\n   * @param guildId - The ID of the guild to create the channel within.\n   * @param options - The parameters for the creation of the channel.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordChannel}.\n   *\n   * @remarks\n   * Requires the `MANAGE_CHANNELS` permission.\n   *\n   * If setting permission overwrites, only the permissions the bot user has in the guild can be allowed or denied.\n   *\n   * Setting the `MANAGE_ROLES` permission is only possible for guild administrators.\n   *\n   * Fires a _Channel Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#create-guild-channel}\n   */\n  createChannel: (guildId: BigString, options: CreateGuildChannel, reason?: string) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Creates an emoji in a guild.\n   *\n   * @param guildId - The ID of the guild in which to create the emoji.\n   * @param options - The parameters for the creation of the emoji.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordEmoji}.\n   *\n   * @remarks\n   * Requires the `CREATE_GUILD_EXPRESSIONS` permission.\n   *\n   * Emojis have a maximum file size of 256 kilobits. Attempting to upload a larger emoji will cause the route to return 400 Bad Request.\n   *\n   * Fires a _Guild Emojis Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#create-guild-emoji}\n   */\n  createEmoji: (guildId: BigString, options: CreateGuildEmoji, reason?: string) => Promise<Camelize<DiscordEmoji>>\n  /**\n   * Creates an emoji for the application.\n   *\n   * @param options - The parameters for the creation of the emoji.\n   * @returns An instance of the created {@link DiscordEmoji}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#create-application-emoji}\n   */\n  createApplicationEmoji: (options: CreateApplicationEmoji) => Promise<Camelize<DiscordEmoji>>\n  /**\n   * Creates a new thread in a forum channel or media channel, and sends a message within the created thread.\n   *\n   * @param channelId - The ID of the forum channel to create the thread within.\n   * @param options - The parameters for the creation of the thread.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of {@link DiscordChannel} with a nested {@link DiscordChannel} object.\n   *\n   * @remarks\n   * Requires the `CREATE_MESSAGES` permission.\n   *\n   * Fires a _Thread Create_ gateway event.\n   * Fires a _Message Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#start-thread-in-forum-or-media-channel}\n   */\n  createForumThread: (channelId: BigString, options: CreateForumPostWithMessage, reason?: string) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Creates an application command accessible globally; across different guilds and channels.\n   *\n   * @param command - The command to create.\n   * @param options - Additional options for the endpoint\n   * @returns An instance of the created {@link DiscordApplicationCommand}.\n   *\n   * @remarks\n   * ⚠️ Creating a command with the same name as an existing command for your application will overwrite the old command.\n   * ⚠️ Global commands once created are cached for periods of __an hour__, so changes made to existing commands will take an hour to surface.\n   * ⚠️ You can only create up to 200 _new_ commands daily.\n   *\n   * When using the bearer token the token needs the `applications.commands.update` scope and must be a `Client grant` token.\n   *  You will be able to update only your own application commands\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#create-global-application-command}\n   */\n  createGlobalApplicationCommand: (\n    command: CreateApplicationCommand,\n    options?: CreateGlobalApplicationCommandOptions,\n  ) => Promise<Camelize<DiscordApplicationCommand>>\n  /**\n   * Creates an application command only accessible in a specific guild.\n   *\n   * @param command - The command to create.\n   * @param guildId - The ID of the guild to create the command for.\n   * @param options - Additional options for the endpoint\n   * @returns An instance of the created {@link DiscordApplicationCommand}.\n   *\n   * @remarks\n   * ⚠️ Creating a command with the same name as an existing command for your application will overwrite the old command.\n   * ⚠️ You can only create up to 200 _new_ commands daily.\n   *\n   * When using the bearer token the token needs the `applications.commands.update` scope and must be a `Client grant` token.\n   *  You will be able to update only your own application commands\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command}\n   */\n  createGuildApplicationCommand: (\n    command: CreateApplicationCommand,\n    guildId: BigString,\n    options?: CreateGuildApplicationCommandOptions,\n  ) => Promise<Camelize<DiscordApplicationCommand>>\n  /**\n   * Create a new sticker for the guild.\n   *\n   * @param guildId The ID of the guild to get\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @return A {@link DiscordSticker}\n   *\n   * @remarks\n   * Requires the `CREATE_GUILD_EXPRESSIONS` permission.\n   * Fires a Guild Stickers Update Gateway event.\n   * Every guilds has five free sticker slots by default, and each Boost level will grant access to more slots.\n   * Lottie stickers can only be uploaded on guilds that have either the `VERIFIED` and/or the `PARTNERED` guild feature.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#create-guild-sticker}\n   */\n  createGuildSticker: (guildId: BigString, options: CreateGuildStickerOptions, reason?: string) => Promise<Camelize<DiscordSticker>>\n  /**\n   * Creates a template from a guild.\n   *\n   * @param guildId - The ID of the guild to create the template from.\n   * @param options - The parameters for the creation of the template.\n   * @returns An instance of the created {@link DiscordTemplate}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires a _Guild Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-template#create-guild-template}\n   */\n  createGuildTemplate: (guildId: BigString, options: CreateTemplate) => Promise<Camelize<DiscordTemplate>>\n  /**\n   * Creates an invite to a channel in a guild.\n   *\n   * @param channelId - The ID of the channel to create the invite to.\n   * @param options - The parameters for the creation of the invite.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordInvite}.\n   *\n   * @remarks\n   * Requires the `CREATE_INSTANT_INVITE` permission.\n   *\n   * Fires an _Invite Create_ gateway event.\n   *\n   * @privateRemarks\n   * The request body is not optional, and an empty JSON object must be sent regardless of whether any fields are being transmitted.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#create-channel-invite}\n   */\n  createInvite: (channelId: BigString, options?: CreateChannelInvite, reason?: string) => Promise<Camelize<DiscordInvite>>\n  /**\n   * Creates a role in a guild.\n   *\n   * @param guildId - The ID of the guild to create the role in.\n   * @param options - The parameters for the creation of the role.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordRole}.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Fires a _Guild Role Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#create-guild-role}\n   */\n  createRole: (guildId: BigString, options: CreateGuildRole, reason?: string) => Promise<Camelize<DiscordRole>>\n  /**\n   * Creates a scheduled event in a guild.\n   *\n   * @param guildId - The ID of the guild to create the scheduled event in.\n   * @param options - The parameters for the creation of the scheduled event.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordScheduledEvent}.\n   *\n   * @remarks\n   * Requires the `MANAGE_EVENTS` permission.\n   *\n   * A guild can only have a maximum of 100 events with a status of {@link ScheduledEventStatus}.Active or {@link ScheduledEventStatus}.Scheduled (inclusive).\n   *\n   * Fires a _Guild Scheduled Event Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event}\n   */\n  createScheduledEvent: (guildId: BigString, options: CreateScheduledEvent, reason?: string) => Promise<Camelize<DiscordScheduledEvent>>\n  /**\n   * Creates a stage instance associated with a stage channel.\n   *\n   * @param options - The parameters for the creation of the stage instance.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordStageInstance}.\n   *\n   * @remarks\n   * Requires the user to be a moderator of the stage channel.\n   *\n   * Fires a _Stage Instance Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/stage-instance#create-stage-instance}\n   */\n  createStageInstance: (options: CreateStageInstance, reason?: string) => Promise<Camelize<DiscordStageInstance>>\n  /**\n   * Creates a webhook.\n   *\n   * @param channelId - The ID of the channel to create the webhook in.\n   * @param options - The parameters for the creation of the webhook.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordWebhook}.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission.\n   *\n   * ⚠️ The webhook name must not contain the substrings 'clyde', or 'discord' (case-insensitive).\n   *\n   * Fires a _Webhooks Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#create-webhook}\n   */\n  createWebhook: (channelId: BigString, options: CreateWebhook, reason?: string) => Promise<Camelize<DiscordWebhook>>\n  /**\n   * Deletes an automod rule.\n   *\n   * @param guildId - The ID of the guild to delete the rule from.\n   * @param ruleId - The ID of the automod rule to delete.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires an _Auto Moderation Rule Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/auto-moderation#delete-auto-moderation-rule}\n   */\n  deleteAutomodRule: (guildId: BigString, ruleId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes a channel from within a guild.\n   *\n   * @param channelId - The ID of the channel to delete.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns nothing\n   *\n   * @remarks\n   * For community guilds, the _Rules_, _Guidelines_ and _Community Update_ channels cannot be deleted.\n   *\n   * If the channel is a thread:\n   * - Requires the `MANAGE_THREADS` permission.\n   *\n   * - Fires a _Thread Delete_ gateway event.\n   *\n   * Otherwise:\n   * - Requires the `MANAGE_CHANNELS` permission.\n   *\n   * - ⚠️ Deleting a category channel does not delete its child channels.\n   *   Instead, they will have their `parent_id` property removed, and a `Channel Update` gateway event will fire for each of them.\n   *\n   * - Fires a _Channel Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#deleteclose-channel}\n   */\n  deleteChannel: (channelId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes a permission override for a user or role in a channel.\n   *\n   * @param channelId - The ID of the channel to delete the permission override of.\n   * @param overwriteId - The ID of the permission override to delete.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Fires a _Channel Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#delete-channel-permission}\n   */\n  deleteChannelPermissionOverride: (channelId: BigString, overwriteId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes an emoji from a guild.\n   *\n   * @param guildId - The ID of the guild from which to delete the emoji.\n   * @param id - The ID of the emoji to delete.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * For emojis created by the current user, requires either the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   * For other emojis, requires the `MANAGE_GUILD_EXPRESSIONS` permission.\n   *\n   * Fires a _Guild Emojis Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#delete-guild-emoji}\n   */\n  deleteEmoji: (guildId: BigString, id: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes an emoji from the application.\n   *\n   * @param id - The ID of the emoji to delete.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#delete-application-emoji}\n   */\n  deleteApplicationEmoji: (id: BigString) => Promise<void>\n  /**\n   * Deletes a follow-up message to an interaction.\n   *\n   * @param token - The interaction token to use, provided in the original interaction.\n   * @param messageId - The ID of the message to delete.\n   *\n   * @remarks\n   * Unlike `deleteMessage()`, this endpoint allows the bot user to act without needing to see the channel the message is in.\n   *\n   * Fires a _Message Delete_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#delete-followup-message}\n   */\n  deleteFollowupMessage: (token: string, messageId: BigString) => Promise<void>\n  /**\n   * Deletes an application command registered globally.\n   *\n   * @param commandId - The ID of the command to delete.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command}\n   */\n  deleteGlobalApplicationCommand: (commandId: BigString) => Promise<void>\n  /**\n   * Deletes an application command registered in a guild.\n   *\n   * @param guildId - The ID of the guild to delete the command from.\n   * @param commandId - The ID of the command to delete from the guild.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command}\n   */\n  deleteGuildApplicationCommand: (commandId: BigString, guildId: BigString) => Promise<void>\n  /**\n   * Delete a new sticker for the guild.\n   *\n   * @param guildId The ID of the guild to get\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @return A {@link DiscordSticker}\n   *\n   * @remarks\n   * For stickers created by the current user, requires either the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   * For other stickers, requires the `MANAGE_GUILD_EXPRESSIONS` permission.\n   * Fires a Guild Stickers Update Gateway event.\n   * Every guilds has five free sticker slots by default, and each Boost level will grant access to more slots.\n   * Lottie stickers can only be uploaded on guilds that have either the `VERIFIED` and/or the `PARTNERED` guild feature.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#delete-guild-sticker}\n   */\n  deleteGuildSticker: (guildId: BigString, stickerId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes a template from a guild.\n   *\n   * @param guildId - The ID of the guild to delete the template from.\n   * @param templateCode - The code of the template to delete.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires a _Guild Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-template#delete-guild-template}\n   */\n  deleteGuildTemplate: (guildId: BigString, templateCode: string) => Promise<void>\n  /**\n   * Deletes an integration attached to a guild.\n   *\n   * @param guildId - The ID of the guild from which to delete the integration.\n   * @param integrationId - The ID of the integration to delete from the guild.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Deletes all webhooks associated with the integration, and kicks the associated bot if there is one.\n   *\n   * Fires a _Guild Integrations Update_ gateway event.\n   * Fires a _Integration Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#delete-guild-integration}\n   */\n  deleteIntegration: (guildId: BigString, integrationId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes an invite to a channel.\n   *\n   * @param inviteCode - The invite code of the invite to delete.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_CHANNELS` permission.\n   *\n   * Fires an _Invite Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#delete-channel-invite}\n   */\n  deleteInvite: (inviteCode: string, reason?: string) => Promise<void>\n  /**\n   * Deletes a message from a channel.\n   *\n   * @param channelId - The ID of the channel to delete the message from.\n   * @param messageId - The ID of the message to delete from the channel.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * If not deleting own message:\n   * - Requires the `MANAGE_MESSAGES` permission.\n   *\n   * Fires a _Message Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#delete-message}\n   */\n  deleteMessage: (channelId: BigString, messageId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes multiple messages from a channel.\n   *\n   * @param channelId - The ID of the channel to delete the messages from.\n   * @param messageIds - The IDs of the messages to delete from the channel.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_MESSAGES` permission.\n   *\n   * ⚠️ Messages older than 2 weeks old cannot be deleted.\n   *\n   * Fires a _Message Delete Bulk_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#bulk-delete-messages}\n   */\n  deleteMessages: (channelId: BigString, messageIds: BigString[], reason?: string) => Promise<void>\n  /**\n   * Deletes the initial message response to an interaction.\n   *\n   * @param token - The interaction token to use, provided in the original interaction.\n   *\n   * @remarks\n   * Unlike `deleteMessage()`, this endpoint allows the bot user to act without needing to see the channel the message is in.\n   *\n   * Fires a _Message Delete_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response}\n   */\n  deleteOriginalInteractionResponse: (token: string) => Promise<void>\n  /**\n   * Deletes a reaction added by the bot user from a message.\n   *\n   * @param channelId - The ID of the channel the message to delete the reaction from is in.\n   * @param messageId - The ID of the message to delete the reaction from.\n   * @param reaction - The reaction to delete from the message.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * Fires a _Message Reaction Remove_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#delete-own-reaction}\n   */\n  deleteOwnReaction: (channelId: BigString, messageId: BigString, reaction: string) => Promise<void>\n  /**\n   * Deletes all reactions for all emojis from a message.\n   *\n   * @param channelId - The ID of the channel the message to delete the reactions from is in.\n   * @param messageId - The ID of the message to delete the reactions from.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * Requires the `MANAGE_MESSAGES` permission.\n   *\n   * Fires a _Message Reaction Remove All_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#delete-all-reactions}\n   */\n  deleteReactionsAll: (channelId: BigString, messageId: BigString) => Promise<void>\n  /**\n   * Deletes all reactions for an emoji from a message.\n   *\n   * @param channelId - The ID of the channel the message to delete the reactions from is in.\n   * @param messageId - The ID of the message to delete the reactions from.\n   * @param reaction - The reaction to remove from the message.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * Requires the `MANAGE_MESSAGES` permission.\n   *\n   * Fires a _Message Reaction Remove Emoji_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji}\n   */\n  deleteReactionsEmoji: (channelId: BigString, messageId: BigString, reaction: string) => Promise<void>\n  /**\n   * Deletes a role from a guild.\n   *\n   * @param guildId - The ID of the guild to delete the role from.\n   * @param roleId - The ID of the role to delete.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Fires a _Guild Role Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#delete-guild-role}\n   */\n  deleteRole: (guildId: BigString, roleId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes a scheduled event from a guild.\n   *\n   * @param guildId - The ID of the guild to delete the scheduled event from.\n   * @param eventId - The ID of the scheduled event to delete.\n   *\n   * @remarks\n   * Requires the `MANAGE_EVENTS` permission.\n   *\n   * Fires a _Guild Scheduled Event Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event}\n   */\n  deleteScheduledEvent: (guildId: BigString, eventId: BigString) => Promise<void>\n  /**\n   * Deletes the stage instance associated with a stage channel, if one exists.\n   *\n   * @param channelId - The ID of the stage channel the stage instance is associated with.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the user to be a moderator of the stage channel.\n   *\n   * Fires a _Stage Instance Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance}\n   */\n  deleteStageInstance: (channelId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes a user's reaction from a message.\n   *\n   * @param channelId - The ID of the channel the message to delete the reaction from is in.\n   * @param messageId - The ID of the message to delete the reaction from.\n   * @param userId - The ID of the user whose reaction to delete.\n   * @param reaction - The reaction to delete from the message.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * Requires the `MANAGE_MESSAGES` permission.\n   *\n   * Fires a _Message Reaction Remove_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#delete-user-reaction}\n   */\n  deleteUserReaction: (channelId: BigString, messageId: BigString, userId: BigString, reaction: string) => Promise<void>\n  /**\n   * Deletes a webhook.\n   *\n   * @param webhookId - The ID of the webhook to delete.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission.\n   *\n   * Fires a _Webhooks Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#delete-webhook}\n   */\n  deleteWebhook: (webhookId: BigString, reason?: string) => Promise<void>\n  /**\n   * Deletes a webhook message.\n   *\n   * @param webhookId - The ID of the webhook to delete the message belonging to.\n   * @param token - The webhook token, used to manage the webhook.\n   * @param messageId - The ID of the message to delete.\n   * @param options - The parameters for the deletion of the message.\n   *\n   * @remarks\n   * Fires a _Message Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#delete-webhook}\n   */\n  deleteWebhookMessage: (webhookId: BigString, token: string, messageId: BigString, options?: DeleteWebhookMessageOptions) => Promise<void>\n  /**\n   * Deletes a webhook message using the webhook token, thereby bypassing the need for authentication + permissions.\n   *\n   * @param webhookId - The ID of the webhook to delete the message belonging to.\n   * @param token - The webhook token, used to delete the webhook.\n   *\n   * @remarks\n   * Fires a _Message Delete_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token}\n   */\n  deleteWebhookWithToken: (webhookId: BigString, token: string) => Promise<void>\n  /**\n   * Edits the permissions for a guild application command.\n   *\n   * @param guildId - The ID of the guild the command is registered in.\n   * @param commandId - The ID of the command to edit the permissions of.\n   * @param bearerToken - The bearer token to use to make the request.\n   * @param options - The parameters for the edit of the command permissions.\n   * @returns An instance of the edited {@link DiscordGuildApplicationCommandPermissions}.\n   *\n   * @remarks\n   * The bearer token requires the `applications.commands.permissions.update` scope to be enabled, and to have access to the guild whose ID has been provided in the parameters.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions}\n   */\n  editApplicationCommandPermissions: (\n    guildId: BigString,\n    commandId: BigString,\n    bearerToken: string,\n    options: Camelize<DiscordApplicationCommandPermissions>[],\n  ) => Promise<Camelize<DiscordGuildApplicationCommandPermissions>>\n  /**\n   * Edits an automod rule.\n   *\n   * @param guildId - The ID of the guild to edit the rule in.\n   * @param ruleId - The ID of the rule to edit.\n   * @param options - The parameters for the edit of the rule.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordAutoModerationRule}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires an _Auto Moderation Rule Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/auto-moderation#modify-auto-moderation-rule}\n   */\n  editAutomodRule: (\n    guildId: BigString,\n    ruleId: BigString,\n    options: Partial<EditAutoModerationRuleOptions>,\n    reason?: string,\n  ) => Promise<Camelize<DiscordAutoModerationRule>>\n  /**\n   * Modifies the bot's username, avatar or banner.\n   * NOTE: username: if changed may cause the bot's discriminator to be randomized.\n   */\n  editBotProfile: (options: { username?: string; botAvatarURL?: string | null; botBannerURL?: string | null }) => Promise<Camelize<DiscordUser>>\n  /**\n   * Edits a channel's settings.\n   *\n   * @param channelId - The ID of the channel to edit.\n   * @param options - The parameters for the edit of the channel.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordChannel}.\n   *\n   * @remarks\n   * If editing a channel of type {@link ChannelTypes}.GroupDm:\n   * - Fires a _Channel Update_ gateway event.\n   *\n   * If editing a thread channel:\n   * - Requires the `MANAGE_THREADS` permission __unless__ if setting the `archived` property to `false` when the `locked` property is also `false`, in which case only the `SEND_MESSAGES` permission is required.\n   *\n   * - Fires a _Thread Update_ gateway event.\n   *\n   * If editing a guild channel:\n   * - Requires the `MANAGE_CHANNELS` permission.\n   *\n   * - If modifying permission overrides:\n   *   - Requires the `MANAGE_ROLES` permission.\n   *\n   *   - Only permissions the bot user has in the guild or parent channel can be allowed/denied __unless__ the bot user has a `MANAGE_ROLES` permission override in the channel.\n   *\n   * - If modifying a channel of type {@link ChannelTypes}.GuildCategory:\n   *     - Fires a _Channel Update_ gateway event for each child channel impacted in this change.\n   * - Otherwise:\n   *     - Fires a _Channel Update_ gateway event.\n   */\n  editChannel: (channelId: BigString, options: ModifyChannel, reason?: string) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Edits the permission overrides for a user or role in a channel.\n   *\n   * @param channelId - The ID of the channel to edit the permission overrides of.\n   * @param options - The permission override.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Only permissions the bot user has in the guild or parent channel can be allowed/denied __unless__ the bot user has a `MANAGE_ROLES` permission override in the channel.\n   *\n   * Fires a _Channel Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#edit-channel-permissions}\n   */\n  editChannelPermissionOverrides: (channelId: BigString, options: EditChannelPermissionOverridesOptions, reason?: string) => Promise<void>\n  /**\n   * Edits the positions of a set of channels in a guild.\n   *\n   * @param guildId - The ID of the guild in which to edit the positions of the channels.\n   * @param channelPositions - A set of objects defining the updated positions of the channels.\n   *\n   * @remarks\n   * Requires the `MANAGE_CHANNELS` permission.\n   *\n   * Fires a _Channel Update_ gateway event for every channel impacted in this change.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions}\n   */\n  editChannelPositions: (guildId: BigString, channelPositions: ModifyGuildChannelPositions[]) => Promise<void>\n  /**\n   * Edits an emoji.\n   *\n   * @param guildId - The ID of the guild in which to edit the emoji.\n   * @param id - The ID of the emoji to edit.\n   * @param options - The parameters for the edit of the emoji.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the updated {@link DiscordEmoji}.\n   *\n   * @remarks\n   * For emojis created by the current user, requires either the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   * For other emojis, requires the `MANAGE_GUILD_EXPRESSIONS` permission.\n   *\n   * Fires a `Guild Emojis Update` gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#modify-guild-emoji}\n   */\n  editEmoji: (guildId: BigString, id: BigString, options: ModifyGuildEmoji, reason?: string) => Promise<Camelize<DiscordEmoji>>\n  /**\n   * Edits an application emoji.\n   *\n   * @param id - The ID of the emoji to edit.\n   * @param options - The parameters for the edit of the emoji.\n   * @returns An instance of the updated {@link DiscordEmoji}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#modify-application-emoji}\n   */\n  editApplicationEmoji: (id: BigString, options: ModifyApplicationEmoji) => Promise<Camelize<DiscordEmoji>>\n  /**\n   * Edits a follow-up message to an interaction.\n   *\n   * @param token - The interaction token to use, provided in the original interaction.\n   * @param messageId - The ID of the message to edit.\n   * @param options - The parameters for the edit of the message.\n   * @returns An instance of the edited {@link DiscordMessage}.\n   *\n   * @remarks\n   * Unlike `editMessage()`, this endpoint allows the bot user to act without needing to see the channel the message is in.\n   *\n   * Does not support ephemeral follow-up messages due to these being stateless.\n   *\n   * Fires a _Message Update_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message}\n   */\n  editFollowupMessage: (token: string, messageId: BigString, options: InteractionCallbackData) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Edits a global application command.\n   *\n   * @param commandId - The ID of the command to edit.\n   * @param options - The parameters for the edit of the command.\n   * @returns An instance of the edited {@link DiscordApplicationCommand}.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command}\n   */\n  editGlobalApplicationCommand: (commandId: BigString, options: CreateApplicationCommand) => Promise<Camelize<DiscordApplicationCommand>>\n  /**\n   * Edits a guild's settings.\n   *\n   * @param guildId - The ID of the guild to edit.\n   * @param options - The parameters for the edit of the guild.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordGuild}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * If attempting to add or remove the {@link GuildFeatures}.Community feature:\n   * - Requires the `ADMINISTRATOR` permission.\n   *\n   * Fires a _Guild Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild}\n   */\n  editGuild: (guildId: BigString, options: ModifyGuild, reason?: string) => Promise<Camelize<DiscordGuild>>\n  /**\n   * Edits an application command registered in a guild.\n   *\n   * @param guildId - The ID of the guild the command is registered in.\n   * @param commandId - The ID of the command to edit.\n   * @param options - The parameters for the edit of the command.\n   * @returns An instance of the edited {@link DiscordApplicationCommand}.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command}\n   */\n  editGuildApplicationCommand: (\n    commandId: BigString,\n    guildId: BigString,\n    options: CreateApplicationCommand,\n  ) => Promise<Camelize<DiscordApplicationCommand>>\n  /**\n   * Edit the given sticker.\n   *\n   * @param guildId The ID of the guild to get\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @return A {@link DiscordSticker}\n   *\n   * @remarks\n   * For stickers created by the current user, requires either the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   * For other stickers, requires the `MANAGE_GUILD_EXPRESSIONS` permission.\n   * Fires a Guild Stickers Update Gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#modify-guild-sticker}\n   */\n  editGuildSticker: (\n    guildId: BigString,\n    stickerId: BigString,\n    options: AtLeastOne<EditGuildStickerOptions>,\n    reason?: string,\n  ) => Promise<Camelize<DiscordSticker>>\n  /**\n   * Edits a template's settings.\n   *\n   * @param guildId - The ID of the guild to edit a template of.\n   * @param templateCode - The code of the template to edit.\n   * @param options - The parameters for the edit of the template.\n   * @returns An instance of the edited {@link DiscordTemplate}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires a _Guild Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-template#modify-guild-template}\n   */\n  editGuildTemplate: (guildId: BigString, templateCode: string, options: ModifyGuildTemplate) => Promise<Camelize<DiscordTemplate>>\n  /**\n   * Edits a message.\n   *\n   * @param channelId - The ID of the channel to edit the message in.\n   * @param messageId - The IDs of the message to edit.\n   * @param options - The parameters for the edit of the message.\n   * @returns An instance of the edited {@link DiscordMessage}.\n   *\n   * @remarks\n   * If editing another user's message:\n   * - Requires the `MANAGE_MESSAGES` permission.\n   * - Only the {@link EditMessage.flags | flags} property of the options object parameter can be edited.\n   *\n   * Fires a _Message Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#edit-message}\n   */\n  editMessage: (channelId: BigString, messageId: BigString, options: EditMessage) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Edits the initial message response to an interaction.\n   *\n   * @param token - The interaction token to use, provided in the original interaction.\n   * @param options - The parameters for the edit of the response.\n   * @returns An instance of the edited {@link DiscordMessage}.\n   *\n   * @remarks\n   * Unlike `editMessage()`, this endpoint allows the bot user to act without needing to see the channel the message is in.\n   *\n   * Does not support ephemeral follow-up messages due to these being stateless.\n   *\n   * Fires a _Message Update_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response}\n   */\n  editOriginalInteractionResponse: (token: string, options: InteractionCallbackData) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Edits the voice state of the bot user.\n   *\n   * @param guildId - The ID of the guild in which to edit the voice state of the bot user.\n   * @param options - The parameters for the edit of the voice state.\n   *\n   * @remarks\n   * The {@link EditOwnVoiceState.channelId | channelId} property of the options object parameter must point to a stage channel, and the bot user must already have joined it.\n   *\n   * If attempting to unmute oneself:\n   * - Requires the `MUTE_MEMBERS` permission.\n   *\n   * If attempting to request to speak:\n   * - Requires the `REQUEST_TO_SPEAK` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/voice#modify-current-user-voice-state}\n   */\n  editOwnVoiceState: (guildId: BigString, options: EditOwnVoiceState) => Promise<void>\n  /**\n   * Edits a role in a guild.\n   *\n   * @param guildId - The ID of the guild to edit the role in.\n   * @param roleId - The ID of the role to edit.\n   * @param options - The parameters for the edit of the role.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordRole}.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Fires a _Guild Role Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-role}\n   */\n  editRole: (guildId: BigString, roleId: BigString, options: EditGuildRole, reason?: string) => Promise<Camelize<DiscordRole>>\n  /**\n   * Edits the positions of a set of roles.\n   *\n   * @param guildId - The ID of the guild to edit the role positions in.\n   * @param options - The parameters for the edit of the role positions.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns A collection of {@link DiscordRole} objects assorted by role ID.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Fires a _Guild Role Update_ gateway event for every role impacted in this change.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-role-positions}\n   */\n  editRolePositions: (guildId: BigString, options: ModifyRolePositions[], reason?: string) => Promise<Camelize<DiscordRole>[]>\n  /**\n   * Edits a scheduled event.\n   *\n   * @param guildId - The ID of the guild to edit the scheduled event in.\n   * @param eventId - The ID of the scheduled event to edit.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordScheduledEvent}.\n   *\n   * @remarks\n   * Requires the `MANAGE_EVENTS` permission.\n   *\n   * To start or end an event, modify the event's `status` property.\n   *\n   * The `entity_metadata` property is discarded for events whose `entity_type` is not {@link ScheduledEventEntityType}.External.\n   *\n   * Fires a _Guild Scheduled Event Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event}\n   */\n  editScheduledEvent: (\n    guildId: BigString,\n    eventId: BigString,\n    options: Partial<EditScheduledEvent>,\n    reason?: string,\n  ) => Promise<Camelize<DiscordScheduledEvent>>\n  /**\n   * Edits a stage instance.\n   *\n   * @param channelId - The ID of the stage channel the stage instance is associated with.\n   * @param topic - Topic of the Stage instance (1-120 characters).\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the updated {@link DiscordStageInstance}.\n   *\n   * @remarks\n   * Requires the user to be a moderator of the stage channel.\n   *\n   * Fires a _Stage Instance Update_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/stage-instance#modify-stage-instance}\n   */\n  editStageInstance: (channelId: BigString, topic: string, reason?: string) => Promise<Camelize<DiscordStageInstance>>\n  /**\n   * Edits the voice state of another user.\n   *\n   * @param guildId - The ID of the guild in which to edit the voice state of the bot user.\n   * @param options - The parameters for the edit of the voice state.\n   *\n   * @remarks\n   * The {@link EditOwnVoiceState.channelId | channelId} property of the options object parameter must point to a stage channel, and the user must already have joined it.\n   *\n   * Requires the `MUTE_MEMBERS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/voice#modify-user-voice-state}\n   */\n  editUserVoiceState: (guildId: BigString, options: EditUserVoiceState) => Promise<void>\n  /**\n   * Edit the current user application role connection for the application.\n   *\n   * @param bearerToken - The access token of the user\n   * @param applicationId - The id of the application to edit the role connection\n   * @param options - The options to edit\n   * @returns {DiscordApplicationRoleConnection}\n   *\n   * @remarks\n   * This requires the `role_connections.write` scope.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/user#update-user-application-role-connection}\n   */\n  editUserApplicationRoleConnection: (\n    bearerToken: string,\n    applicationId: BigString,\n    options: Camelize<DiscordApplicationRoleConnection>,\n  ) => Promise<Camelize<DiscordApplicationRoleConnection>>\n  /**\n   * Edits a webhook.\n   *\n   * @param webhookId - The ID of the webhook to edit.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordWebhook}.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission.\n   *\n   * Fires a _Webhooks Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#edit-webhook}\n   */\n  editWebhook: (webhookId: BigString, options: ModifyWebhook, reason?: string) => Promise<Camelize<DiscordWebhook>>\n  /**\n   * Edits a webhook message.\n   *\n   * @param webhookId - The ID of the webhook to edit the message of.\n   * @param token - The webhook token, used to edit the message.\n   * @param messageId - The ID of the message to edit.\n   * @param options - The parameters for the edit of the message.\n   * @returns An instance of the edited {@link DiscordMessage}.\n   *\n   * @remarks\n   * Fires a _Message Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#edit-webhook-message}\n   */\n  editWebhookMessage: (\n    webhookId: BigString,\n    token: string,\n    messageId: BigString,\n    options: EditWebhookMessageOptions,\n  ) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Edits a webhook using the webhook token, thereby bypassing the need for authentication + permissions.\n   *\n   * @param webhookId - The ID of the webhook to edit.\n   * @param token - The webhook token, used to edit the webhook.\n   * @returns An instance of the edited {@link DiscordWebhook}.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission.\n   *\n   * Fires a _Webhooks Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token}\n   */\n  editWebhookWithToken: (webhookId: BigString, token: string, options: Omit<ModifyWebhook, 'channelId'>) => Promise<Camelize<DiscordWebhook>>\n  /**\n   * Edits a guild's welcome screen.\n   *\n   * @param guildId - The ID of the guild to edit the welcome screen of.\n   * @param options - The parameters for the edit of the welcome screen.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordWelcomeScreen}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires a _Guild Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen}\n   */\n  editWelcomeScreen: (guildId: BigString, options: ModifyGuildWelcomeScreen, reason?: string) => Promise<Camelize<DiscordWelcomeScreen>>\n  /**\n   * Edits the settings of a guild's widget.\n   *\n   * @param guildId - The ID of the guild to edit the settings of the widget of.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordGuildWidgetSettings}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires a _Guild Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-widget}\n   */\n  editWidgetSettings: (\n    guildId: BigString,\n    options: Camelize<DiscordGuildWidgetSettings>,\n    reason?: string,\n  ) => Promise<Camelize<DiscordGuildWidgetSettings>>\n  /**\n   * Executes a webhook, causing a message to be posted in the channel configured for the webhook.\n   *\n   * @param webhookId - The ID of the webhook to execute.\n   * @param token - The webhook token, used to execute the webhook.\n   * @param options - The parameters for the execution of the webhook.\n   * @returns An instance of the created {@link DiscordMessage}, or `undefined` if the {@link ExecuteWebhook.wait | wait} property of the options object parameter is set to `false`.\n   *\n   * @remarks\n   * If the webhook channel is a forum channel, you must provide a value for either `threadId` or `threadName`.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#execute-webhook}\n   */\n  executeWebhook: (webhookId: BigString, token: string, options: ExecuteWebhook) => Promise<Camelize<DiscordMessage> | undefined>\n  /**\n   * Follows an announcement channel, allowing messages posted within it to be cross-posted into the target channel.\n   *\n   * @param sourceChannelId - The ID of the announcement channel to follow.\n   * @param targetChannelId - The ID of the target channel - the channel to cross-post to.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of {@link DiscordFollowedChannel}.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission in the __target channel__.\n   *\n   * Fires a _Webhooks Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#follow-announcement-channel}\n   */\n  followAnnouncement: (sourceChannelId: BigString, targetChannelId: BigString, reason?: string) => Promise<Camelize<DiscordFollowedChannel>>\n  /**\n   * Gets the list of all active threads for a guild.\n   *\n   * @param guildId - The ID of the guild to get the threads of.\n   * @returns An instance of {@link DiscordListActiveThreads}.\n   *\n   * @remarks\n   * Returns both public and private threads.\n   *\n   * Threads are ordered by the `id` property in descending order.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#list-active-guild-threads}\n   */\n  getActiveThreads: (guildId: BigString) => Promise<Camelize<DiscordListActiveThreads>>\n  /** Get the applications info */\n  getApplicationInfo: () => Promise<Camelize<DiscordApplication>>\n  /**\n   * Edit properties of the app associated with the requesting bot user.\n   *\n   * @remarks\n   * Only properties that are passed will be updated.\n   */\n  editApplicationInfo: (body: EditApplication) => Promise<Camelize<DiscordApplication>>\n  /**\n   * Get the current authentication info for the authenticated user\n   *\n   * @param bearerToken - Any OAuth2 derived access token\n   * @returns An instance of {@link DiscordCurrentAuthorization}\n   *\n   * @remarks\n   * The user object is not defined if the scopes do not include `identify`.\n   * In the user object, if defined, the email is not included if the scopes do not include `email`\n   */\n  getCurrentAuthenticationInfo: (bearerToken: string) => Promise<Camelize<DiscordCurrentAuthorization>>\n  /**\n   * Exchange the information to get a OAuth2 accessToken token\n   *\n   * @param clientId - Application's client id\n   * @param clientSecret - application's client secret\n   * @param options - The options to make the exchange with discord\n   */\n  exchangeToken: (clientId: BigString, clientSecret: string, options: Camelize<DiscordTokenExchange>) => Promise<Camelize<DiscordAccessTokenResponse>>\n  /**\n   * Revoke an access_token\n   *\n   * @param clientId - Application's client id\n   * @param clientSecret - application's client secret\n   * @param options - The options to revoke the access_token\n   */\n  revokeToken: (clientId: BigString, clientSecret: string, options: Camelize<DiscordTokenRevocation>) => Promise<void>\n  /**\n   * Gets the permissions of a guild application command.\n   *\n   * @param guildId - The ID of the guild the command is registered in.\n   * @param commandId - The ID of the command to get the permissions of.\n   * @param options - The OAuth2 related optional parameters for the endpoint\n   * @returns An instance of {@link DiscordGuildApplicationCommandPermissions}.\n   *\n   * @remarks\n   * Then specifying the options object the access token passed-in requires the OAuth2 scope `applications.commands.permissions.update`\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions}\n   */\n  getApplicationCommandPermission: (\n    guildId: BigString,\n    commandId: BigString,\n    options?: GetApplicationCommandPermissionOptions,\n  ) => Promise<Camelize<DiscordGuildApplicationCommandPermissions>>\n  /**\n   * Gets the permissions of all application commands registered in a guild by the ID of the guild and optionally an external application.\n   *\n   * @param guildId - The ID of the guild to get the permissions objects of.\n   * @param options - The OAuth2 related optional parameters for the endpoint\n   * @returns A collection of {@link DiscordGuildApplicationCommandPermissions} objects assorted by command ID.\n   *\n   * @remarks\n   * Then specifying the options object the access token passed-in requires the OAuth2 scope `applications.commands.permissions.update`\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command-permissions}\n   */\n  getApplicationCommandPermissions: (\n    guildId: BigString,\n    options?: GetApplicationCommandPermissionOptions,\n  ) => Promise<Camelize<DiscordGuildApplicationCommandPermissions>[]>\n  /**\n   * Gets a guild's audit log.\n   *\n   * @param guildId - The ID of the guild to get the audit log of.\n   * @param options - The parameters for the fetching of the audit log.\n   * @returns An instance of {@link DiscordAuditLog}.\n   *\n   * @remarks\n   * Requires the `VIEW_AUDIT_LOG` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log}\n   */\n  getAuditLog: (guildId: BigString, options?: GetGuildAuditLog) => Promise<Camelize<DiscordAuditLog>>\n  /**\n   * Gets an automod rule by its ID.\n   *\n   * @param guildId - The ID of the guild to get the rule of.\n   * @param ruleId - The ID of the rule to get.\n   * @returns An instance of {@link DiscordAutoModerationRule}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/auto-moderation#get-auto-moderation-rule}\n   */\n  getAutomodRule: (guildId: BigString, ruleId: BigString) => Promise<Camelize<DiscordAutoModerationRule>>\n  /**\n   * Gets the list of automod rules for a guild.\n   *\n   * @param guildId - The ID of the guild to get the rules from.\n   * @returns A collection of {@link DiscordAutoModerationRule} objects assorted by rule ID.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/auto-moderation#list-auto-moderation-rules-for-guild}\n   */\n  getAutomodRules: (guildId: BigString) => Promise<Camelize<DiscordAutoModerationRule>[]>\n  /**\n   * Gets the list of available voice regions.\n   *\n   * @returns A collection of {@link DiscordVoiceRegion} objects assorted by voice region ID.\n   */\n  getAvailableVoiceRegions: () => Promise<Camelize<DiscordVoiceRegion>[]>\n  /**\n   * Gets a ban by user ID.\n   *\n   * @param guildId - The ID of the guild to get the ban from.\n   * @param userId - The ID of the user to get the ban for.\n   * @returns An instance of {@link DiscordBan}.\n   *\n   * @remarks\n   * Requires the `BAN_MEMBERS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-ban}\n   */\n  getBan: (guildId: BigString, userId: BigString) => Promise<Camelize<DiscordBan>>\n  /**\n   * Gets the list of bans for a guild.\n   *\n   * @param guildId - The ID of the guild to get the list of bans for.\n   * @param options - The parameters for the fetching of the list of bans.\n   * @returns A collection of {@link DiscordBan} objects assorted by user ID.\n   *\n   * @remarks\n   * Requires the `BAN_MEMBERS` permission.\n   *\n   * Users are ordered by their IDs in _ascending_ order.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-bans}\n   */\n  getBans: (guildId: BigString, options?: GetBans) => Promise<Camelize<DiscordBan>[]>\n  /**\n   * Gets a channel by its ID.\n   *\n   * @param channelId - The ID of the channel to get.\n   * @returns An instance of {@link DiscordChannel}.\n   *\n   * @remarks\n   * If the channel is a thread, a {@link DiscordThreadMember} object is included in the result.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#get-channel}\n   */\n  getChannel: (channelId: BigString) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Gets the list of invites for a channel.\n   *\n   * @param channelId - The ID of the channel to get the invites of.\n   * @returns A collection of {@link DiscordInviteMetadata} objects assorted by invite code.\n   *\n   * @remarks\n   * Requires the `MANAGE_CHANNELS` permission.\n   *\n   * Only usable for guild channels.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#get-channel-invites}\n   */\n  getChannelInvites: (channelId: BigString) => Promise<Camelize<DiscordInviteMetadata>[]>\n  /**\n   * Gets the list of channels for a guild.\n   *\n   * @param guildId - The ID of the guild to get the channels of.\n   * @returns A collection of {@link DiscordChannel} objects assorted by channel ID.\n   *\n   * @remarks\n   * Excludes threads.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-channels}\n   */\n  getChannels: (guildId: BigString) => Promise<Camelize<DiscordChannel>[]>\n  /**\n   * Gets a list of webhooks for a channel.\n   *\n   * @param channelId - The ID of the channel which to get the webhooks of.\n   * @returns A collection of {@link DiscordWebhook} objects assorted by webhook ID.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#get-channel-webhooks}\n   */\n  getChannelWebhooks: (channelId: BigString) => Promise<Camelize<DiscordWebhook>[]>\n  /**\n   * Gets or creates a DM channel with a user.\n   *\n   * @param userId - The ID of the user to create the DM channel with.\n   * @returns An instance of {@link DiscordChannel}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/user#create-dm}\n   */\n  getDmChannel: (userId: BigString) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Create a new group DM channel with multiple users.\n   *\n   * @param options - The options for create a new group dm\n   * @returns An instance of {@link DiscordChannel}.\n   *\n   * @remarks\n   * The access tokens require to have the `gdm.join` scope\n   *\n   * This endpoint is limited to 10 active group DMs.\n   *\n   * Fires a _Channel create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/user#create-group-dm}\n   */\n  getGroupDmChannel: (options: CreateGroupDmOptions) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Gets an emoji by its ID.\n   *\n   * @param guildId - The ID of the guild from which to get the emoji.\n   * @param emojiId - The ID of the emoji to get.\n   * @returns An instance of {@link DiscordEmoji}.\n   *\n   * @remarks\n   * Includes the `user` field if the bot has the `MANAGE_GUILD_EXPRESSIONS` permission,\n   * or if the bot created the emoji and has the the `CREATE_GUILD_EXPRESSIONS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#get-guild-emoji}\n   */\n  getEmoji: (guildId: BigString, emojiId: BigString) => Promise<Camelize<DiscordEmoji>>\n  /**\n   * Gets an application emoji by its ID.\n   *\n   * @param emojiId - The ID of the emoji to get.\n   * @returns An instance of {@link DiscordEmoji}.\n   *\n   * @remarks\n   * Always includes the `user` object for the team member that uploaded the emoji from the app's settings, or for the bot user if uploaded using the API.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#get-application-emoji}\n   */\n  getApplicationEmoji: (emojiId: BigString) => Promise<Camelize<DiscordEmoji>>\n  /**\n   * Gets the list of emojis for a guild.\n   *\n   * @param guildId - The ID of the guild which to get the emojis of.\n   * @returns A collection of {@link DiscordEmoji} objects assorted by emoji ID.\n   *\n   * @remarks\n   * Includes `user` fields if the bot has the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#list-guild-emojis}\n   */\n  getEmojis: (guildId: BigString) => Promise<Camelize<DiscordEmoji>[]>\n  /**\n   * Gets the list of emojis for an application.\n   *\n   * @returns An object with the array of {@link DiscordEmoji} objects.\n   *\n   * @remarks\n   * Always includes the `user` object for the team member that uploaded the emoji from the app's settings, or for the bot user if uploaded using the API.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/emoji#list-application-emojis}\n   */\n  getApplicationEmojis: () => Promise<{ items: Camelize<DiscordEmoji>[] }>\n  /**\n   * Gets a follow-up message to an interaction by the ID of the message.\n   *\n   * @param token - The interaction token to use, provided in the original interaction.\n   * @param messageId - The ID of the message to get.\n   * @returns An instance of {@link DiscordMessage}.\n   *\n   * @remarks\n   * Unlike `getMessage()`, this endpoint allows the bot user to act without:\n   * - Needing to be able to see the contents of the channel that the message is in. (`READ_MESSAGES` permission.)\n   * - Requiring the `MESSAGE_CONTENT` intent.\n   *\n   * Does not support ephemeral follow-up messages due to these being stateless.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#get-followup-message}\n   */\n  getFollowupMessage: (token: string, messageId: BigString) => Promise<Camelize<DiscordMessage>>\n  /** Get the bots Gateway metadata that can help during the operation of large or sharded bots. */\n  getGatewayBot: () => Promise<Camelize<DiscordGetGatewayBot>>\n  /**\n   * Gets a global application command by its ID.\n   *\n   * @param commandId - The ID of the command to get.\n   * @returns An instance of {@link DiscordApplicationCommand}.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-global-application-command}\n   */\n  getGlobalApplicationCommand: (commandId: BigString) => Promise<Camelize<DiscordApplicationCommand>>\n  /**\n   * Gets the list of your bot's global application commands.\n   *\n   * @param options - The parameters for the fetching of global application commands\n   * @returns A collection of {@link DiscordApplicationCommand} objects assorted by command ID.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands}\n   */\n  getGlobalApplicationCommands: (options?: GetGlobalApplicationCommandsOptions) => Promise<Camelize<DiscordApplicationCommand>[]>\n  /**\n   * Gets a guild by its ID.\n   *\n   * @param guildId - The ID of the guild to get.\n   * @param options - The parameters for the fetching of the guild.\n   * @returns An instance of {@link DiscordGuild}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild}\n   */\n  getGuild: (guildId: BigString, options?: { counts?: boolean }) => Promise<Camelize<DiscordGuild>>\n  /**\n   * Get the user guilds.\n   *\n   * @param bearerToken - The access token of the user, if unspecified the bot token is used instead\n   * @param options - The parameters for the fetching of the guild.\n   * @returns An array of partial {@link DiscordGuild}.\n   *\n   * @remarks\n   * If used with an access token, the token needs to have the `guilds` scope\n   *\n   * @see {@link https://discord.com/developers/docs/resources/user#get-current-user-guilds}\n   */\n  getGuilds: (bearerToken?: string, options?: GetUserGuilds) => Promise<Partial<Camelize<DiscordGuild>>[]>\n  /**\n   * Gets a guild application command by its ID.\n   *\n   * @param guildId - The ID of the guild the command is registered in.\n   * @param commandId - The ID of the command to get.\n   * @returns An instance of {@link DiscordApplicationCommand}.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command}\n   */\n  getGuildApplicationCommand: (commandId: BigString, guildId: BigString) => Promise<Camelize<DiscordApplicationCommand>>\n  /**\n   * Gets the list of application commands registered by your bot in a guild.\n   *\n   * @param guildId - The ID of the guild the commands are registered in.\n   * @param options - The parameters for the fetching of guild application commands\n   * @returns A collection of {@link DiscordApplicationCommand} objects assorted by command ID.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-global-application-commandss}\n   */\n  getGuildApplicationCommands: (guildId: BigString, options?: GetGuildApplicationCommandsOptions) => Promise<Camelize<DiscordApplicationCommand>[]>\n  /**\n   * Gets the preview of a guild by a guild's ID.\n   *\n   * @param guildId - The ID of the guild to get the preview of.\n   * @returns An instance of {@link DiscordGuildPreview}.\n   *\n   * @remarks\n   * If the bot user is not in the guild, the guild must be discoverable.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-preview}\n   */\n  getGuildPreview: (guildId: BigString) => Promise<Camelize<DiscordGuildPreview>>\n  /**\n   * Returns a sticker object for the given guild and sticker IDs.\n   *\n   * @param guildId The ID of the guild to get\n   * @param stickerId The ID of the sticker to get\n   * @return A {@link DiscordSticker}\n   *\n   * @remarks Includes the user field if the bot has the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#get-guild-sticker}\n   */\n  getGuildSticker: (guildId: BigString, stickerId: BigString) => Promise<Camelize<DiscordSticker>>\n  /**\n   * Returns an array of sticker objects for the given guild.\n   *\n   * @param guildId The ID of the guild to get\n   * @returns A collection of {@link DiscordSticker} objects assorted by sticker ID.\n   *\n   * @remarks Includes user fields if the bot has the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#list-guild-stickers}\n   */\n  getGuildStickers: (guildId: BigString) => Promise<Camelize<DiscordSticker>[]>\n  /**\n   * Gets a template by its code.\n   *\n   * @param templateCode - The code of the template to get.\n   * @returns An instance of {@link DiscordTemplate}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-template#get-guild-template}\n   */\n  getGuildTemplate: (templateCode: string) => Promise<Camelize<DiscordTemplate>>\n  /**\n   * Gets the list of templates for a guild.\n   *\n   * @param guildId - The ID of the guild to get the list of templates for.\n   * @returns A collection of {@link DiscordTemplate} objects assorted by template code.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-template#get-guild-templates}\n   */\n  getGuildTemplates: (guildId: BigString) => Promise<Camelize<DiscordTemplate>[]>\n  /**\n   * Gets the list of webhooks for a guild.\n   *\n   * @param guildId - The ID of the guild to get the list of webhooks for.\n   * @returns A collection of {@link DiscordWebhook} objects assorted by webhook ID.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#get-guild-webhooks}\n   */\n  getGuildWebhooks: (guildId: BigString) => Promise<Camelize<DiscordWebhook>[]>\n  /**\n   * Gets the list of integrations attached to a guild.\n   *\n   * @param guildId - The ID of the guild to get the list of integrations from.\n   * @returns A collection of {@link DiscordIntegration} objects assorted by integration ID.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-integrations}\n   */\n  getIntegrations: (guildId: BigString) => Promise<Camelize<DiscordIntegration>[]>\n  /**\n   * Gets an invite to a channel by its invite code.\n   *\n   * @param inviteCode - The invite code of the invite to get.\n   * @param options - The parameters for the fetching of the invite.\n   * @returns An instance of {@link DiscordInviteMetadata}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/invite#get-invite}\n   */\n  getInvite: (inviteCode: string, options?: GetInvite) => Promise<Camelize<DiscordInviteMetadata>>\n  /**\n   * Gets the list of invites for a guild.\n   *\n   * @param guildId - The ID of the guild to get the invites from.\n   * @returns A collection of {@link DiscordInviteMetadata} objects assorted by invite code.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` or `VIEW_AUDIT_LOG` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/invite#get-invites}\n   */\n  getInvites: (guildId: BigString) => Promise<Camelize<DiscordInviteMetadata>[]>\n  /**\n   * Gets a message from a channel by the ID of the message.\n   *\n   * @param channelId - The ID of the channel from which to get the message.\n   * @param messageId - The ID of the message to get.\n   * @returns An instance of {@link DiscordMessage}.\n   *\n   * @remarks\n   * Requires that the bot user be able to see the contents of the channel in which the message was posted.\n   *\n   * If getting a message from a guild channel:\n   * - Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#get-channel-message}\n   */\n  getMessage: (channelId: BigString, messageId: BigString) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Gets multiple messages from a channel.\n   *\n   * @param channelId - The ID of the channel from which to get the messages.\n   * @param options - The parameters for the fetching of the messages.\n   * @returns Returns an array of {@link DiscordMessage} objects from newest to oldest on success.\n   *\n   * @remarks\n   * Requires that the bot user be able to see the contents of the channel in which the messages were posted.\n   *\n   * If getting a messages from a guild channel:\n   * - Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#get-channel-messages}\n   */\n  getMessages: (channelId: BigString, options?: GetMessagesOptions) => Promise<Camelize<DiscordMessage>[]>\n  /**\n   * Returns a sticker pack for the given ID.\n   *\n   * @returns A {@link DiscordStickerPack} object.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#get-sticker-pack}\n   */\n  getStickerPack: (stickerPackId: BigString) => Promise<Camelize<DiscordStickerPack>>\n  /**\n   * Returns the list of sticker packs available.\n   *\n   * @returns A collection of {@link DiscordStickerPack} objects assorted by sticker ID.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#list-sticker-packs}\n   */\n  getStickerPacks: () => Promise<Camelize<DiscordStickerPack>[]>\n  /**\n   * Gets the initial message response to an interaction.\n   *\n   * @param token - The interaction token to use, provided in the original interaction.\n   * @returns An instance of {@link DiscordMessage}.\n   *\n   * @remarks\n   * Unlike `getMessage()`, this endpoint allows the bot user to act without:\n   * - Needing to be able to see the contents of the channel that the message is in. (`READ_MESSAGES` permission.)\n   * - Requiring the `MESSAGE_CONTENT` intent.\n   *\n   * Does not support ephemeral follow-up messages due to these being stateless.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response}\n   */\n  getOriginalInteractionResponse: (token: string) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Retrieves the list of pins in a channel.\n   *\n   * @param channelId - The ID of the channel to get the pins for.\n   * @param options - The options for the fetching of the pins.\n   * @returns A {@link DiscordGetChannelPins} objects\n   *\n   * @remarks\n   * Requires the `VIEW_CHANNEL` permission.\n   *\n   * If the user is missing the `READ_MESSAGE_HISTORY` permission in the channel, then no pins will be returned.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/message#get-channel-pins}\n   */\n  getChannelPins: (channelId: BigString, options?: GetChannelPinsOptions) => Promise<Camelize<DiscordGetChannelPins>>\n  /**\n   * Gets the pinned messages for a channel.\n   *\n   * @param channelId - The ID of the channel to get the pinned messages for.\n   * @returns A collection of {@link DiscordMessage} objects assorted by message ID.\n   *\n   * @remarks\n   * Requires that the bot user be able to see the contents of the channel in which the messages were posted.\n   *\n   * If getting a message from a guild channel:\n   * - Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/message#get-pinned-messages-deprecated}\n   * @deprecated Use {@link getChannelPins} instead.\n   */\n  getPinnedMessages: (channelId: BigString) => Promise<Camelize<DiscordMessage>[]>\n  /**\n   * Gets the list of private archived threads for a channel.\n   *\n   * @param channelId - The ID of the channel to get the archived threads for.\n   * @param options - The parameters for the fetching of threads.\n   * @returns An instance of {@link DiscordListArchivedThreads}.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   * Requires the `MANAGE_THREADS` permission.\n   *\n   * Returns threads of type {@link ChannelTypes}.GuildPrivateThread.\n   *\n   * Threads are ordered by the `archive_timestamp` property included in the metadata of the object in descending order.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#list-private-archived-threads}\n   */\n  getPrivateArchivedThreads: (channelId: BigString, options?: ListArchivedThreads) => Promise<Camelize<DiscordListArchivedThreads>>\n  /**\n   * Gets the list of private archived threads the bot is a member of for a channel.\n   *\n   * @param channelId - The ID of the channel to get the archived threads for.\n   * @param options - The parameters for the fetching of threads.\n   * @returns An instance of {@link DiscordListArchivedThreads}.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * Returns threads of type {@link ChannelTypes}.GuildPrivateThread.\n   *\n   * Threads are ordered by the `id` property in descending order.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads}\n   */\n  getPrivateJoinedArchivedThreads: (channelId: BigString, options?: ListArchivedThreads) => Promise<Camelize<DiscordListArchivedThreads>>\n  /**\n   * Gets the number of members that would be kicked from a guild during pruning.\n   *\n   * @param guildId - The ID of the guild to get the prune count of.\n   * @param options - The parameters for the fetching of the prune count.\n   * @returns A number indicating the number of members that would be kicked.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` and `KICK_MEMBERS` permissions.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-prune-count}\n   */\n  getPruneCount: (guildId: BigString, options?: GetGuildPruneCountQuery) => Promise<Camelize<DiscordPrunedCount>>\n  /**\n   * Gets the list of public archived threads for a channel.\n   *\n   * @param channelId - The ID of the channel to get the archived threads for.\n   * @param options - The parameters for the fetching of threads.\n   * @returns An instance of {@link DiscordListArchivedThreads}.\n   *\n   * @remarks\n   * Requires the `READ_MESSAGE_HISTORY` permission.\n   *\n   * If called on a channel of type {@link ChannelTypes}.GuildText, returns threads of type {@link ChannelTypes}.GuildPublicThread.\n   * If called on a channel of type {@link ChannelTypes}.GuildNews, returns threads of type {@link ChannelTypes}.GuildNewsThread.\n   *\n   * Threads are ordered by the `archive_timestamp` property included in the metadata of the object in descending order.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#list-public-archived-threads}\n   */\n  getPublicArchivedThreads: (channelId: BigString, options?: ListArchivedThreads) => Promise<Camelize<DiscordListArchivedThreads>>\n  /**\n   * Gets the list of roles for a guild.\n   *\n   * @param guildId - The ID of the guild to get the list of roles for.\n   * @returns A collection of {@link DiscordRole} objects assorted by role ID.\n   *\n   * @remarks\n   * ⚠️ This endpoint should be used sparingly due to {@link DiscordRole} objects already being included in guild payloads.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-roles}\n   */\n  getRoles: (guildId: BigString) => Promise<Camelize<DiscordRole>[]>\n  /**\n   * Gets a role by id for a guild.\n   *\n   * @param guildId - The ID of the guild to get role for.\n   * @param roleId - The ID of the role.\n   * @returns A {@link DiscordRole} object.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-role}\n   */\n  getRole: (guildId: BigString, roleId: BigString) => Promise<Camelize<DiscordRole>>\n  /**\n   * Gets a scheduled event by its ID.\n   *\n   * @param guildId - The ID of the guild to get the scheduled event from.\n   * @param eventId - The ID of the scheduled event to get.\n   * @param options - The parameters for the fetching of the scheduled event.\n   * @returns An instance of {@link DiscordScheduledEvent}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event}\n   */\n  getScheduledEvent: (guildId: BigString, eventId: BigString, options?: { withUserCount?: boolean }) => Promise<Camelize<DiscordScheduledEvent>>\n  /**\n   * Gets the list of scheduled events for a guild.\n   *\n   * @param guildId - The ID of the guild to get the scheduled events from.\n   * @param options - The parameters for the fetching of the scheduled events.\n   * @returns A collection of {@link DiscordScheduledEvent} objects assorted by event ID.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild}\n   */\n  getScheduledEvents: (guildId: BigString, options?: GetScheduledEvents) => Promise<Camelize<DiscordScheduledEvent>[]>\n  /**\n   * Gets the list of subscribers to a scheduled event from a guild.\n   *\n   * @param guildId - The ID of the guild to get the subscribers to the scheduled event from.\n   * @param eventId - The ID of the scheduled event to get the subscribers of.\n   * @param options - The parameters for the fetching of the subscribers.\n   * @returns A collection of {@link DiscordUser} objects assorted by user ID.\n   *\n   * @remarks\n   * Requires the `MANAGE_EVENTS` permission.\n   *\n   * Users are ordered by their IDs in _ascending_ order.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users}\n   */\n  getScheduledEventUsers: (\n    guildId: BigString,\n    eventId: BigString,\n    options?: GetScheduledEventUsers,\n  ) => Promise<Array<{ user: Camelize<DiscordUser>; member?: Camelize<DiscordMember> }>>\n  /** Get the bots Gateway metadata that can help during the operation of large or sharded bots. */\n  getSessionInfo: () => Promise<Camelize<DiscordGetGatewayBot>>\n  /**\n   * Gets the stage instance associated with a stage channel, if one exists.\n   *\n   * @param channelId - The ID of the stage channel the stage instance is associated with.\n   * @returns An instance of {@link DiscordStageInstance}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/stage-instance#get-stage-instance}\n   */\n  getStageInstance: (channelId: BigString) => Promise<Camelize<DiscordStageInstance>>\n  /**\n   * Returns the current user's voice state in the guild.\n   *\n   * @param guildId - The ID of the guild to get the voice state from.\n   * @returns An instance of {@link DiscordVoiceState}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/voice#get-current-user-voice-state}\n   */\n  getOwnVoiceState: (guildId: BigString) => Promise<Camelize<DiscordVoiceState>>\n  /**\n   * Returns the specified user's voice state in the guild.\n   *\n   * @param guildId - The ID of the guild to get the voice state from.\n   * @param userId - The ID of the user to get the voice state from\n   * @returns An instance of {@link DiscordVoiceState}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/voice#get-user-voice-state}\n   */\n  getUserVoiceState: (guildId: BigString, userId: BigString) => Promise<Camelize<DiscordVoiceState>>\n  /**\n   * Returns a sticker object for the given sticker ID.\n   *\n   * @param stickerId The ID of the sticker to get\n   * @returns A {@link DiscordSticker}\n   *\n   * @see {@link https://discord.com/developers/docs/resources/sticker#get-sticker}\n   */\n  getSticker: (stickerId: BigString) => Promise<Camelize<DiscordSticker>>\n  /**\n   * Gets a thread member by their user ID.\n   *\n   * @param channelId - The ID of the thread to get the thread member of.\n   * @param userId - The user ID of the thread member to get.\n   * @param options - The parameters for the fetching of the thread member.\n   * @returns An instance of {@link DiscordThreadMember}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#get-thread-member}\n   */\n  getThreadMember: (channelId: BigString, userId: BigString, options?: GetThreadMember) => Promise<Camelize<DiscordThreadMember>>\n  /**\n   * Gets the list of thread members for a thread.\n   *\n   * @param channelId - The ID of the thread to get the thread members of.\n   * @param options - The parameters for the fetching of the thread members.\n   * @returns A collection of {@link DiscordThreadMember} assorted by user ID.\n   *\n   * @remarks\n   * Requires the application to have the `GUILD_MEMBERS` privileged intent enabled.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#list-thread-members}\n   */\n  getThreadMembers: (channelId: BigString, options?: ListThreadMembers) => Promise<Camelize<DiscordThreadMember>[]>\n  /**\n   * Gets the list of users that reacted with an emoji to a message.\n   *\n   * @param channelId - The ID of the channel the message to get the users for is in.\n   * @param messageId - The ID of the message to get the users for.\n   * @param reaction - The reaction for which to get the users.\n   * @param options - The parameters for the fetching of the users.\n   * @returns A collection of {@link DiscordUser} objects assorted by user ID.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#get-reactions}\n   */\n  getReactions: (channelId: BigString, messageId: BigString, reaction: string, options?: GetReactions) => Promise<Camelize<DiscordUser>[]>\n  /**\n   * Get a user's data from the api\n   *\n   * @param id The user's id\n   * @returns {DiscordUser}\n   */\n  getUser: (id: BigString) => Promise<Camelize<DiscordUser>>\n  /**\n   * Get the current user data.\n   *\n   * @param bearerToken - The access token of the user\n   * @returns {DiscordUser}\n   *\n   * @remarks\n   * This requires the `identify` scope.\n   *\n   * To get the mail this also requires the `email` scope\n   */\n  getCurrentUser: (bearerToken: string) => Promise<Camelize<DiscordUser>>\n  /**\n   * Get the current user connections.\n   *\n   * @param bearerToken - The access token of the user\n   * @returns {DiscordConnection[]}\n   *\n   * @remarks\n   * This requires the `connections` scope.\n   */\n  getUserConnections: (bearerToken: string) => Promise<Camelize<DiscordConnection>[]>\n  /**\n   * Get the current user application role connection for the application.\n   *\n   * @param bearerToken - The access token of the user\n   * @param applicationId - The id of the application to get the role connection\n   * @returns {DiscordApplicationRoleConnection}\n   *\n   * @remarks\n   * The access token requires the `role_connections.write` scope.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/user#get-user-application-role-connection}\n   */\n  getUserApplicationRoleConnection: (bearerToken: string, applicationId: BigString) => Promise<Camelize<DiscordApplicationRoleConnection>>\n  /**\n   * Gets information about the vanity url of a guild.\n   *\n   * @param guildId - The ID of the guild to get the vanity url information for.\n   * @returns An instance of {@link DiscordVanityUrl}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * The `code` property will be `null` if the guild does not have a set vanity url.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-vanity-url}\n   */\n  getVanityUrl: (guildId: BigString) => Promise<Camelize<DiscordVanityUrl>>\n  /**\n   * Gets the list of voice regions for a guild.\n   *\n   * @param guildId - The ID of the guild to get the voice regions for.\n   * @returns A collection of {@link DiscordVoiceRegion} objects assorted by voice region ID.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-voice-regions}\n   */\n  getVoiceRegions: (guildId: BigString) => Promise<Camelize<DiscordVoiceRegion>[]>\n  /**\n   * Gets a webhook by its ID.\n   *\n   * @param webhookId - The ID of the webhook to get.\n   * @returns An instance of {@link DiscordWebhook}.\n   *\n   * @remarks\n   * Requires the `MANAGE_WEBHOOKS` permission unless the application making the request owns the webhook.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#get-webhook}\n   */\n  getWebhook: (webhookId: BigString) => Promise<Camelize<DiscordWebhook>>\n  /**\n   * Gets a webhook message by its ID.\n   *\n   * @param webhookId - The ID of the webhook to get a message of.\n   * @param token - The webhook token, used to get webhook messages.\n   * @param messageId - the ID of the webhook message to get.\n   * @param options - The parameters for the fetching of the message.\n   * @returns An instance of {@link DiscordMessage}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#get-webhook-message}\n   */\n  getWebhookMessage: (\n    webhookId: BigString,\n    token: string,\n    messageId: BigString,\n    options?: GetWebhookMessageOptions,\n  ) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Gets a webhook using the webhook token, thereby bypassing the need for authentication + permissions.\n   *\n   * @param webhookId - The ID of the webhook to get.\n   * @param token - The webhook token, used to get the webhook.\n   * @returns An instance of {@link DiscordWebhook}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/webhook#get-webhook-with-token}\n   */\n  getWebhookWithToken: (webhookId: BigString, token: string) => Promise<Camelize<DiscordWebhook>>\n  /**\n   * Gets the welcome screen for a guild.\n   *\n   * @param guildId - The ID of the guild to get the welcome screen for.\n   * @returns An instance of {@link DiscordWelcomeScreen}.\n   *\n   * @remarks\n   * If the welcome screen is not enabled:\n   * - Requires the `MANAGE_GUILD` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen}\n   */\n  getWelcomeScreen: (guildId: BigString) => Promise<Camelize<DiscordWelcomeScreen>>\n  /**\n   * Gets the guild widget by guild ID.\n   *\n   * @param guildId - The ID of the guild to get the widget of.\n   * @returns An instance of {@link DiscordGuildWidget}.\n   *\n   * @remarks\n   * Fires an `INVITE_CREATED` Gateway event when an invite channel is defined and a new `Invite` is generated.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-widget}\n   */\n  getWidget: (guildId: BigString) => Promise<Camelize<DiscordGuildWidget>>\n  /**\n   * Gets the settings of a guild's widget.\n   *\n   * @param guildId - The ID of the guild to get the widget of.\n   * @returns An instance of {@link DiscordGuildWidgetSettings}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-widget-settings}\n   */\n  getWidgetSettings: (guildId: BigString) => Promise<Camelize<DiscordGuildWidgetSettings>>\n  /**\n   * Adds the bot user to a thread.\n   *\n   * @param channelId - The ID of the thread to add the bot user to.\n   *\n   * @remarks\n   * Requires the thread not be archived.\n   *\n   * Fires a _Thread Members Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#join-thread}\n   */\n  joinThread: (channelId: BigString) => Promise<void>\n  /**\n   * Leaves a guild.\n   *\n   * @param guildId - The ID of the guild to leave.\n   *\n   * @remarks\n   * Fires a _Guild Delete_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/user#leave-guild}\n   */\n  leaveGuild: (guildId: BigString) => Promise<void>\n  /**\n   * Removes the bot user from a thread.\n   *\n   * @param channelId - The ID of the thread to remove the bot user from.\n   *\n   * @remarks\n   * Requires the thread not be archived.\n   *\n   * Fires a _Thread Members Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#leave-thread}\n   */\n  leaveThread: (channelId: BigString) => Promise<void>\n  /**\n   * Cross-posts a message posted in an announcement channel to subscribed channels.\n   *\n   * @param channelId - The ID of the announcement channel.\n   * @param messageId - The ID of the message to cross-post.\n   * @returns An instance of the cross-posted {@link DiscordMessage}.\n   *\n   * @remarks\n   * Requires the `SEND_MESSAGES` permission.\n   *\n   * If not cross-posting own message:\n   * - Requires the `MANAGE_MESSAGES` permission.\n   *\n   * Fires a _Message Create_ event in the guilds the subscribed channels are in.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#crosspost-message}\n   */\n  publishMessage: (channelId: BigString, messageId: BigString) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Removes a role from a member.\n   *\n   * @param guildId - The ID of the guild the member to remove the role from is in.\n   * @param userId - The user ID of the member to remove the role from.\n   * @param roleId - The ID of the role to remove from the member.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_ROLES` permission.\n   *\n   * Fires a _Guild Member Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#remove-guild-member-role}\n   */\n  removeRole: (guildId: BigString, userId: BigString, roleId: BigString, reason?: string) => Promise<void>\n  /**\n   * Removes a member from a thread.\n   *\n   * @param channelId - The ID of the thread to remove the thread member of.\n   * @param userId - The user ID of the thread member to remove.\n   *\n   * @remarks\n   * If the thread is of type {@link ChannelTypes}.GuildPrivateThread, requires to be the creator of the thread.\n   * Otherwise, requires the `MANAGE_THREADS` permission.\n   *\n   * Requires the thread not be archived.\n   *\n   * Fires a _Thread Members Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#remove-thread-member}\n   */\n  removeThreadMember: (channelId: BigString, userId: BigString) => Promise<void>\n  /**\n   * Removes a member from a Group DM.\n   *\n   * @param channelId - The ID of the channel to remove the recipient user of.\n   * @param userId - The user ID of the user to remove.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient}\n   */\n  removeDmRecipient: (channelId: BigString, userId: BigString) => Promise<void>\n  /**\n   * Sends a message to a channel.\n   *\n   * @param channelId - The ID of the channel to send the message in.\n   * @param options - The parameters for the creation of the message.\n   * @returns An instance of the created {@link DiscordMessage}.\n   *\n   * @remarks\n   * Requires that the bot user be able to see the contents of the channel the message is to be sent in.\n   *\n   * If sending a message to a guild channel:\n   * - Requires the `SEND_MESSAGES` permission.\n   *\n   * If sending a TTS message:\n   * - Requires the `SEND_TTS_MESSAGES` permission.\n   *\n   * If sending a message as a reply to another message:\n   * - Requires the `READ_MESSAGE_HISTORY` permission.\n   * - The message being replied to cannot be a system message.\n   *\n   * ⚠️ The maximum size of a request (accounting for any attachments and message content) for bot users is _8 MiB_.\n   *\n   * Fires a _Message Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#create-message}\n   */\n  sendMessage: (channelId: BigString, options: CreateMessageOptions) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Sends a follow-up message to an interaction.\n   *\n   * @param token - The interaction token to use, provided in the original interaction.\n   * @param options - The parameters for the creation of the message.\n   * @returns An instance of the created {@link DiscordMessage}.\n   *\n   * @remarks\n   * ⚠️ Interaction tokens are only valid for _15 minutes_.\n   *\n   * By default, mentions are suppressed. To enable mentions, pass a mention object with the callback data.\n   *\n   * Unlike `sendMessage()`, this endpoint allows the bot user to act without:\n   * - Needing to be able to see the contents of the channel that the message is in. (`READ_MESSAGES` permission.)\n   * - Requiring the `MESSAGE_CONTENT` intent.\n   *\n   * Apps are limited to 5 followup messages per interaction if it was initiated from a user-installed app and isn't installed in the server\n   * You can check if it was initiated from a user-installed app that isn't installed in the server by checking if {@link DiscordInteraction.authorizing_integration_owners | authorizingIntegrationOwners} only contains {@link DiscordApplicationIntegrationType.UserInstall | UserInstall}.\n   *\n   * Fires a _Message Create_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-followup-message}\n   */\n  sendFollowupMessage: (token: string, options: InteractionCallbackData) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Sends a response to an interaction.\n   *\n   * @param interactionId - The ID of the interaction to respond to.\n   * @param token - The interaction token to use, provided in the original interaction.\n   * @param options - The parameters for the creation of the message.\n   * @param params - The query parameters for the response of the callback\n   * @returns Nothing or the {@link DiscordInteractionCallbackResponse} if withResponse param is true\n   *\n   * @remarks\n   * ⚠️ Interaction tokens are only valid for _15 minutes_.\n   *\n   * By default, mentions are suppressed. To enable mentions, pass a mention object with the callback data.\n   *\n   * Unlike `sendMessage()`, this endpoint allows the bot user to act without:\n   * - Needing to be able to see the contents of the channel that the message is in. (`READ_MESSAGES` permission.)\n   * - Requiring the `MESSAGE_CONTENT` intent.\n   *\n   * Fires a _Message Create_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n   */\n  sendInteractionResponse: (\n    interactionId: BigString,\n    token: string,\n    options: InteractionResponse,\n    params?: InteractionCallbackOptions,\n  ) => Promise<void | Camelize<DiscordInteractionCallbackResponse>>\n  /**\n   * Creates a thread, using an existing message as its point of origin.\n   *\n   * @param channelId - The ID of the channel in which to create the thread.\n   * @param messageId - The ID of the message to use as the thread's point of origin.\n   * @param options - The parameters to use for the creation of the thread.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordChannel}.\n   *\n   * @remarks\n   * If called on a channel of type {@link ChannelTypes}.GuildText, creates a {@link ChannelTypes}.GuildPublicThread.\n   * If called on a channel of type {@link ChannelTypes}.GuildNews, creates a {@link ChannelTypes}.GuildNewsThread.\n   * Does not work on channels of type {@link ChannelTypes}.GuildForum.\n   *\n   * The ID of the created thread will be the same as the ID of the source message.\n   *\n   * Fires a _Thread Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#start-thread-from-message}\n   */\n  startThreadWithMessage: (\n    channelId: BigString,\n    messageId: BigString,\n    options: StartThreadWithMessage,\n    reason?: string,\n  ) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Creates a thread without using a message as the thread's point of origin.\n   *\n   * @param channelId - The ID of the channel in which to create the thread.\n   * @param options - The parameters to use for the creation of the thread.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the created {@link DiscordChannel | Thread}.\n   *\n   * @remarks\n   * Creating a private thread requires the server to be boosted.\n   *\n   * Fires a _Thread Create_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#start-thread-without-message}\n   */\n  startThreadWithoutMessage: (channelId: BigString, options: StartThreadWithoutMessage, reason?: string) => Promise<Camelize<DiscordChannel>>\n  /**\n   * Get a list of users that voted for this specific answer.\n   *\n   * @param channelId - The ID of the channel in which the message with the poll lives\n   * @param messageId - The ID of the message in which the poll lives\n   * @param answerId - The ID of the answer to get the users that voted that answer\n   * @param options - The options for the request\n   * @returns The list of users that voted for the specific answer.\n   */\n  getPollAnswerVoters: (\n    channelId: BigString,\n    messageId: BigString,\n    answerId: number,\n    options?: GetPollAnswerVotes,\n  ) => Promise<Camelize<DiscordGetAnswerVotesResponse>>\n  /**\n   * Immediately ends the poll.\n   *\n   * @param channelId - The ID of the channel in which the message with the poll lives\n   * @param messageId - The ID of the message in which the poll lives\n   * @returns The message with the expired poll\n   *\n   * @remarks\n   * You cannot end polls from other users.\n   *\n   * Fires a _Message Update_ gateway event\n   */\n  endPoll: (channelId: BigString, messageId: BigString) => Promise<Camelize<DiscordMessage>>\n  /**\n   * Synchronises a template with the current state of a guild.\n   *\n   * @param guildId - The ID of the guild to synchronise a template of.\n   * @returns An instance of the edited {@link DiscordTemplate}.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   *\n   * Fires a _Guild Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild-template#get-guild-templates}\n   */\n  syncGuildTemplate: (guildId: BigString) => Promise<Camelize<DiscordTemplate>>\n  /**\n   * Triggers a typing indicator for the specified channel, which expires after 10 seconds.\n   *\n   * @param channelId - The ID of the channel in which to trigger the typing indicator.\n   *\n   * @remarks\n   * Generally bots should **not** use this route.\n   * However, if a bot is responding to a command and expects the computation to take a few seconds,\n   * this endpoint may be called to let the user know that the bot is processing their message.\n   *\n   * Fires a _Typing Start_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/channel#trigger-typing-indicator}\n   */\n  triggerTypingIndicator: (channelId: BigString) => Promise<void>\n  /**\n   * Re-registers the list of global application commands, overwriting the previous commands completely.\n   *\n   * @param commands - The list of commands to use to overwrite the previous list.\n   * @param options - Additional options for the endpoint.\n   * @returns A collection of {@link DiscordApplicationCommand} objects assorted by command ID.\n   *\n   * @remarks\n   * ❗ Commands that are not present in the `commands` array will be __deleted__.\n   *\n   * ⚠️ Commands that do not already exist will count towards the daily limit of _200_ new commands.\n   *\n   * When using the bearer token the token needs the `applications.commands.update` scope and must be a `Client grant` token.\n   *  You will be able to update only your own application commands\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands}\n   */\n  upsertGlobalApplicationCommands: (\n    commands: CreateApplicationCommand[],\n    options?: UpsertGlobalApplicationCommandOptions,\n  ) => Promise<Camelize<DiscordApplicationCommand>[]>\n  /**\n   * Re-registers the list of application commands registered in a guild, overwriting the previous commands completely.\n   *\n   * @param guildId - The ID of the guild whose list of commands to overwrite.\n   * @param commands - The list of commands to use to overwrite the previous list.\n   * @param options - Additional options for the endpoint.\n   * @returns A collection of {@link DiscordApplicationCommand} objects assorted by command ID.\n   *\n   * @remarks\n   * ❗ Commands that are not present in the `commands` array will be __deleted__.\n   *\n   * ⚠️ Commands that do not already exist will count towards the daily limit of _200_ new commands.\n   *\n   * When using the bearer token the token needs the `applications.commands.update` scope and must be a `Client grant` token.\n   *  You will be able to update only your own application commands\n   *\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands}\n   */\n  upsertGuildApplicationCommands: (\n    guildId: BigString,\n    commands: CreateApplicationCommand[],\n    options?: UpsertGuildApplicationCommandOptions,\n  ) => Promise<Camelize<DiscordApplicationCommand>[]>\n  /**\n   * Bans a user from a guild.\n   *\n   * @param guildId - The ID of the guild to ban the user from.\n   * @param userId - The ID of the user to ban from the guild.\n   * @param options - The parameters for the creation of the ban.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `BAN_MEMBERS` permission.\n   *\n   * Fires a _Guild Ban Add_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#create-guild-ban}\n   */\n  banMember: (guildId: BigString, userId: BigString, options?: CreateGuildBan, reason?: string) => Promise<void>\n  /**\n   * Bans up to 200 users from a guild.\n   *\n   * @param guildId - The ID of the guild to ban the users from.\n   * @param options - The users to ban and the other options for the ban.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `BAN_MEMBERS` and `MANAGE_GUILD` permissions.\n   *\n   * If all provided users fail to be banned, discord will respond with an error (code: `500000: Failed to ban users`)\n   *\n   * Fires as many _Guild Ban Add_ gateway events as many user where banned.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#bulk-guild-ban}\n   */\n  bulkBanMembers: (guildId: BigString, options: CreateGuildBulkBan, reason?: string) => Promise<Camelize<DiscordBulkBan>>\n  /**\n   * Edits the nickname of the bot user.\n   *\n   * @param guildId - The ID of the guild to edit the nickname of the bot user in.\n   * @param options - The parameters for the edit of the nickname.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns An instance of the edited {@link DiscordMember}\n   *\n   * @remarks\n   * Fires a _Guild Member Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-current-member}\n   */\n  editBotMember: (guildId: BigString, options: EditBotMemberOptions, reason?: string) => Promise<Camelize<DiscordMember>>\n  /**\n   * Edits a member's properties.\n   *\n   * @param guildId - The ID of the guild to edit the member of.\n   * @param userId - The user ID of the member to edit.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @param options - The parameters for the edit of the user.\n   *\n   * @remarks\n   * This endpoint requires various permissions depending on what is edited about the member.\n   * To find out the required permission to enact a change, read the documentation of this endpoint's {@link ModifyGuildMember | parameters}.\n   *\n   * Fires a _Guild Member Update_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-member}\n   */\n  editMember: (guildId: BigString, userId: BigString, options: ModifyGuildMember, reason?: string) => Promise<Camelize<DiscordMember>>\n  /**\n   * Gets the member object by user ID.\n   *\n  \n   * @param guildId - The ID of the guild to get the member object for.\n   * @param userId - The ID of the user to get the member object for.\n   * @returns An instance of {@link DiscordMemberWithUser}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-member}\n   */\n  getMember: (guildId: BigString, userId: BigString) => Promise<Camelize<DiscordMemberWithUser>>\n  /**\n   * Gets the current member object.\n   *\n   * @param bearerToken - The access token of the user\n   * @param guildId - The ID of the guild to get the member object for.\n   * @returns An instance of {@link DiscordMemberWithUser}.\n   *\n   * @remarks\n   * The access tokens needs the `guilds.members.read` scope\n   *\n   * @see {@link https://discord.com/developers/docs/resources/user#get-current-user-guild-member}\n   */\n  getCurrentMember: (guildId: BigString, bearerToken: string) => Promise<Camelize<DiscordMemberWithUser>>\n  /**\n   * Gets the list of members for a guild.\n   *\n   * @param guildId - The ID of the guild to get the list of members for.\n   * @param options - The parameters for the fetching of the members.\n   * @returns A collection of {@link DiscordMemberWithUser} objects assorted by user ID.\n   *\n   * @remarks\n   * Requires the `GUILD_MEMBERS` intent.\n   *\n   * ⚠️ It is not recommended to use this endpoint with very large bots. Instead, opt to use `fetchMembers()`:\n   * REST communication only permits 50 requests to be made per second, while gateways allow for up to 120 requests\n   * per minute per shard. For more information, read {@link https://discord.com/developers/docs/topics/rate-limits#rate-limits}.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#list-guild-members}\n   * @see {@link https://discord.com/developers/docs/topics/gateway#request-guild-members}\n   * @see {@link https://discord.com/developers/docs/topics/rate-limits#rate-limits}\n   */\n  getMembers: (guildId: BigString, options: ListGuildMembers) => Promise<Camelize<DiscordMemberWithUser>[]>\n  /**\n   * Returns a serialized activity instance, if it exists. Useful for preventing unwanted activity sessions.\n   *\n   * @param applicationId - The ID of the application\n   * @param instanceId - The ID of the activity instance\n   */\n  getApplicationActivityInstance: (applicationId: BigString, instanceId: string) => Promise<Camelize<DiscordActivityInstance>>\n  /**\n   * Kicks a member from a guild.\n   *\n  \n   * @param guildId - The ID of the guild to kick the member from.\n   * @param userId - The user ID of the member to kick from the guild.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `KICK_MEMBERS` permission.\n   *\n   * Fires a _Guild Member Remove_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#remove-guild-member}\n   */\n  kickMember: (guildId: BigString, userId: BigString, reason?: string) => Promise<void>\n  /**\n   * Pins a message in a channel.\n   *\n   * @param channelId - The ID of the channel where the message is to be pinned.\n   * @param messageId - The ID of the message to pin.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `PIN_MESSAGES` permission.\n   *\n   * Fires a _Channel Pins Update_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/message#pin-message}\n   */\n  pinMessage: (channelId: BigString, messageId: BigString, reason?: string) => Promise<void>\n  /**\n   * Initiates the process of pruning inactive members.\n   *\n  \n   * @param guildId - The ID of the guild to prune the members of.\n   * @param options - The parameters for the pruning of members.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   * @returns A number indicating how many members were pruned.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` and `KICK_MEMBERS` permissions.\n   *\n   * ❗ Requests to this endpoint will time out for large guilds. To prevent this from happening, set the {@link BeginGuildPrune.computePruneCount} property of the options object parameter to `false`. This will begin the process of pruning, and immediately return `undefined`, rather than wait for the process to complete before returning the actual count of members that have been kicked.\n   *\n   * ⚠️ By default, this process will not remove members with a role. To include the members who have a _particular subset of roles_, specify the role(s) in the {@link BeginGuildPrune.includeRoles | includeRoles} property of the options object parameter.\n   *\n   * Fires a _Guild Member Remove_ gateway event for every member kicked.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#begin-guild-prune}\n   */\n  pruneMembers: (guildId: BigString, options: BeginGuildPrune, reason?: string) => Promise<{ pruned: number | null }>\n  /**\n   * Gets the list of members whose usernames or nicknames start with a provided string.\n   *\n  \n   * @param guildId - The ID of the guild to search in.\n   * @param query - The string to match usernames or nicknames against.\n   * @param options - The parameters for searching through the members.\n   * @returns A collection of {@link DiscordMember} objects assorted by user ID.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#search-guild-members}\n   */\n  searchMembers: (guildId: BigString, query: string, options?: Omit<SearchMembers, 'query'>) => Promise<Camelize<DiscordMemberWithUser>[]>\n  /**\n   * Unbans a user from a guild.\n   *\n  \n   * @param guildId - The ID of the guild to unban the user in.\n   * @param userId - The ID of the user to unban.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `BAN_MEMBERS` permission.\n   *\n   * Fires a _Guild Ban Remove_ gateway event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/guild#remove-guild-ban}\n   */\n  unbanMember: (guildId: BigString, userId: BigString, reason?: string) => Promise<void>\n  /**\n   * Unpin a message in a channel.\n   *\n   * @param channelId - The ID of the channel where the message is pinned.\n   * @param messageId - The ID of the message to unpin.\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `PIN_MESSAGES` permission.\n   *\n   * Fires a _Channel Pins Update_ event.\n   *\n   * @see {@link https://discord.com/developers/docs/resources/message#unpin-message}\n   */\n  unpinMessage: (channelId: BigString, messageId: BigString, reason?: string) => Promise<void>\n  /**\n   * Get the guild onboarding\n   *\n   * @param guildId - The guild to get the onboarding from\n   */\n  getGuildOnboarding: (guildId: BigString) => Promise<Camelize<DiscordGuildOnboarding>>\n  /**\n   * Modifies the onboarding configuration of the guild.\n   *\n   * @param guildId - The guild to edit the onboarding from\n   * @param {string} [reason] - An optional reason for the action, to be included in the audit log.\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` and `MANAGE_ROLES` permissions.\n   *\n   * Onboarding enforces constraints when enabled. These constraints are:\n   *  - at least 7 default channels\n   *  - at least 5 of the 7 channels must allow sending messages to the \\@everyone role\n   *\n   * The `mode` field modifies what is considered when enforcing these constraints.\n   */\n  editGuildOnboarding: (guildId: BigString, options: EditGuildOnboarding, reason?: string) => Promise<Camelize<DiscordGuildOnboarding>>\n  /**\n   * Modifies the incident actions of the guild.\n   *\n   * @param guildId - The guild to edit the incident actions from\n   * @param options - The options for the incident actions\n   *\n   * @remarks\n   * Requires the `MANAGE_GUILD` permission.\n   */\n  modifyGuildIncidentActions: (guildId: BigString, options: ModifyGuildIncidentActions) => Promise<Camelize<DiscordIncidentsData>>\n  /**\n   * Returns all entitlements for a given app, active and expired.\n   *\n   * @param applicationId - The id of the application to get the entitlements\n   * @param {GetEntitlements} [options] - The optional query params for the endpoint\n   */\n  listEntitlements: (applicationId: BigString, options?: GetEntitlements) => Promise<Camelize<DiscordEntitlement>[]>\n  /**\n   * Returns an entitlement.\n   *\n   * @param applicationId - The id of the application to get the entitlement\n   * @param entitlementId - The id of the entitlement to get\n   */\n  getEntitlement: (applicationId: BigString, entitlementId: BigString) => Promise<Camelize<DiscordEntitlement>>\n  /**\n   * Creates a test entitlement to a given SKU for a given guild or user. Discord will act as though that user or guild has entitlement to your premium offering.\n   *\n   * @param applicationId - The id of the application to create the entitlement\n   * @param body - The options for new entitlement\n   *\n   * @remarks\n   * This endpoint returns a partial entitlement object.\n   * It will not contain subscription_id, starts_at, or ends_at, as it's valid in perpetuity.\n   */\n  createTestEntitlement: (applicationId: BigString, body: CreateTestEntitlement) => Promise<Partial<Camelize<DiscordEntitlement>>>\n  /**\n   * Deletes a currently-active test entitlement. Discord will act as though that user or guild no longer has entitlement to your premium offering.\n   *\n   * @param applicationId - The id of the application from where delete the entitlement\n   * @param entitlementId - The id of the entitlement to delete\n   */\n  deleteTestEntitlement: (applicationId: BigString, entitlementId: BigString) => Promise<void>\n  /**\n   * For One-Time Purchase consumable SKUs, marks a given entitlement for the user as consumed. The entitlement will have `consumed: true` when using {@link listEntitlements | List Entitlements}\n   *\n   * @param applicationId - The id of the application to get the entitlement\n   * @param entitlementId - The id of the entitlement to get\n   */\n  consumeEntitlement: (applicationId: BigString, entitlementId: BigString) => Promise<void>\n  /**\n   * Returns all SKUs for a given application\n   *\n   * @param applicationId - The id of the application to get the SKUs\n   */\n  listSkus: (applicationId: BigString) => Promise<Camelize<DiscordSku>[]>\n  /**\n   * Returns all subscriptions containing the SKU, filtered by user.\n   *\n   * @param skuId - The id of the sku of get the subscriptions for\n   */\n  listSubscriptions: (skuId: BigString, options?: ListSkuSubscriptionsOptions) => Promise<Camelize<DiscordSubscription[]>>\n  /**\n   * Get a subscription by its ID.\n   *\n   * @param skuId - The id of the sku of get the subscriptions for\n   */\n  getSubscription: (skuId: BigString, subscriptionId: BigString) => Promise<Camelize<DiscordSubscription>>\n  /**\n   * Send a soundboard sound to a voice channel the user is connected to.\n   *\n   * @param channelId - The id of the voice channel\n   *\n   * @remarks\n   * Fires a _Voice Channel Effect Send_ Gateway event.\n   *\n   * Requires the `SPEAK` and `USE_SOUNDBOARD` permissions, and also the `USE_EXTERNAL_SOUNDS` permission if the sound is from a different server.\n   * Additionally, requires the user to be connected to the voice channel, having a voice state without `deaf`, `self_deaf`, `mute`, or `suppress` enabled.\n   */\n  sendSoundboardSound: (channelId: BigString, options: SendSoundboardSound) => Promise<void>\n  /** Returns an array of soundboard sound objects that can be used by all users. */\n  listDefaultSoundboardSounds: () => Promise<Camelize<DiscordSoundboardSound>[]>\n  /**\n   * Returns a list of the guild's soundboard sounds.\n   *\n   * @param guildId - The guild to get the sounds from\n   *\n   * @remarks\n   * Includes `user` fields if the bot has the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   */\n  listGuildSoundboardSounds: (guildId: BigString) => Promise<{ items: Camelize<DiscordSoundboardSound>[] }>\n  /**\n   * Returns a soundboard sound object for the given sound id.\n   *\n   * @param guildId - The guild to get the sounds from\n   * @param soundId - The sound id\n   *\n   * @remarks\n   * Includes `user` fields if the bot has the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   */\n  getGuildSoundboardSound: (guildId: BigString, soundId: BigString) => Promise<Camelize<DiscordSoundboardSound>>\n  /**\n   * Create a new soundboard sound for the guild.\n   *\n   * @param guildId - The guild to create the sounds in\n   * @param options - The options to create the sound\n   * @param reason - The audit log reason\n   *\n   * @remarks\n   * Fires a _Guild Soundboard Sound Create_ Gateway event.\n   *\n   * Requires the `CREATE_GUILD_EXPRESSIONS` permission.\n   */\n  createGuildSoundboardSound: (guildId: BigString, options: CreateGuildSoundboardSound, reason?: string) => Promise<Camelize<DiscordSoundboardSound>>\n  /**\n   * Modify the given soundboard sound.\n   *\n   * @param guildId - The guild to create the sounds in\n   * @param soundId - The sound id to update\n   * @param options - The options to update the sound\n   * @param reason - The audit log reason\n   *\n   * @remarks\n   * Fires a _Guild Soundboard Sound Update_ Gateway event.\n   *\n   * For sounds created by the current user, requires either the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   * For other sounds, requires the `MANAGE_GUILD_EXPRESSIONS` permission.\n   */\n  modifyGuildSoundboardSound: (\n    guildId: BigString,\n    soundId: BigString,\n    options: ModifyGuildSoundboardSound,\n    reason?: string,\n  ) => Promise<Camelize<DiscordSoundboardSound>>\n  /**\n   * Delete the given soundboard sound.\n   *\n   * @param guildId - The guild to create the sounds in\n   * @param soundId - The sound id to delete\n   * @param reason - The audit log reason\n   *\n   * @remarks\n   * Fires a _Guild Soundboard Sound Delete_ Gateway event.\n   *\n   * For sounds created by the current user, requires either the `CREATE_GUILD_EXPRESSIONS` or `MANAGE_GUILD_EXPRESSIONS` permission.\n   * For other sounds, requires the `MANAGE_GUILD_EXPRESSIONS` permission.\n   */\n  deleteGuildSoundboardSound: (guildId: BigString, soundId: BigString, reason?: string) => Promise<void>\n  /**\n   * Returns a list of application role connection metadata objects for the given application.\n   *\n   * @param applicationId - The application to get the role connections from\n   * @returns A list of application role connection metadata objects\n   */\n  listApplicationRoleConnectionsMetadataRecords: (applicationId: BigString) => Promise<Camelize<DiscordApplicationRoleConnectionMetadata>[]>\n  /**\n   * Updates and returns a list of application role connection metadata objects for the given application.\n   *\n   * @param applicationId - The application to get the role connections from\n   * @param options - The options to update the role connections\n   * @returns A list of application role connection metadata objects\n   *\n   * @remarks\n   * An application can have a maximum of 5 metadata records.\n   */\n  updateApplicationRoleConnectionsMetadataRecords: (\n    applicationId: BigString,\n    options: Camelize<DiscordApplicationRoleConnectionMetadata>[],\n  ) => Promise<Camelize<DiscordApplicationRoleConnectionMetadata>[]>\n  /**\n   * Creates a new lobby, adding any of the specified members to it, if provided.\n   *\n   * @param options - The options to create the lobby\n   * @returns The created lobby\n   */\n  createLobby: (options: CreateLobby) => Promise<Camelize<DiscordLobby>>\n  /**\n   * Returns a lobby object for the specified lobby id, if it exists.\n   *\n   * @param lobbyId - The ID of the lobby to get\n   * @returns The lobby object\n   */\n  getLobby: (lobbyId: BigString) => Promise<Camelize<DiscordLobby>>\n  /**\n   * Modifies the specified lobby with new values, if provided.\n   *\n   * @param lobbyId - The ID of the lobby to modify\n   * @param options - The options to modify the lobby\n   * @returns The modified lobby\n   */\n  modifyLobby: (lobbyId: BigString, options: ModifyLobby) => Promise<Camelize<DiscordLobby>>\n  /**\n   * Deletes the specified lobby if it exists.\n   *\n   * It is safe to call even if the lobby is already deleted as well.\n   *\n   * @param lobbyId - The ID of the lobby to delete\n   * @returns Nothing\n   */\n  deleteLobby: (lobbyId: BigString) => Promise<void>\n  /**\n   * Adds the provided user to the specified lobby. If called when the user is already a member of the lobby will update fields such as metadata on that user instead.\n   *\n   * @param lobbyId - The ID of the lobby to add the user to\n   * @param userId - The ID of the user to add to the lobby\n   * @param options - The options to add the user to the lobby\n   * @returns The lobby member object\n   */\n  addMemberToLobby: (lobbyId: BigString, userId: BigString, options: AddLobbyMember) => Promise<Camelize<DiscordLobbyMember>>\n  /**\n   * Removes the provided user from the specified lobby. It is safe to call this even if the user is no longer a member of the lobby, but will fail if the lobby does not exist.\n   *\n   * @param lobbyId - The ID of the lobby to remove the user from\n   * @param userId - The ID of the user to remove from the lobby\n   * @returns Nothing\n   */\n  removeMemberFromLobby: (lobbyId: BigString, userId: BigString) => Promise<void>\n  /**\n   * Removes the current user from the specified lobby. It is safe to call this even if the user is no longer a member of the lobby, but will fail if the lobby does not exist.\n   *\n   * @param lobbyId - The ID of the lobby to remove the user from\n   * @param bearerToken - The access token of the user\n   * @returns Nothing\n   *\n   * @remarks\n   * This requires a bearer token for authorization\n   */\n  leaveLobby: (lobbyId: BigString, bearerToken: string) => Promise<void>\n  /**\n   * Links an existing text channel to a lobby.\n   *\n   * @param lobbyId - The ID of the lobby to link the channel to\n   * @param bearerToken - The access token of the user\n   * @param options - The options to link the channel to the lobby\n   * @returns The updated lobby object\n   *\n   * @remarks\n   * Uses bearer token for authorization and the user must be a lobby member with the CanLinkLobby lobby member flag.\n   */\n  linkChannelToLobby: (lobbyId: BigString, bearerToken: string, options: LinkChannelToLobby) => Promise<Camelize<DiscordLobby>>\n  /**\n   * Unlinks any currently linked channels from the specified lobby.\n   *\n   * @param lobbyId - The ID of the lobby to unlink the channel from\n   * @param bearerToken - The access token of the user\n   * @returns The updated lobby object\n   *\n   * @remarks\n   * Uses bearer token for authorization and the user must be a lobby member with the CanLinkLobby lobby member flag.\n   */\n  unlinkChannelToLobby: (lobbyId: BigString, bearerToken: string) => Promise<Camelize<DiscordLobby>>\n}\n\nexport type RequestMethods = 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'PUT'\nexport type ApiVersions = 9 | 10\n\nexport interface CreateRequestBodyOptions {\n  headers?: Record<string, string>\n  body?: any\n  unauthorized?: boolean\n  reason?: string\n  files?: FileContent[]\n}\n\nexport type MakeRequestOptions = Omit<CreateRequestBodyOptions, 'method'> & Pick<SendRequestOptions, 'runThroughQueue'>\n\nexport interface RequestBody {\n  headers: Record<string, string>\n  body?: string | FormData\n  method: RequestMethods\n}\n\nexport interface SendRequestOptions {\n  /** The route to send the request to. */\n  route: string\n  /** The method to use for sending the request. */\n  method: RequestMethods\n  /** The amount of times this request has been retried. */\n  retryCount: number\n  /** Handler to retry a request should it be rate limited. */\n  retryRequest?: (options: SendRequestOptions) => Promise<void>\n  /** Resolve handler when a request succeeds. */\n  resolve: (value: RestRequestResponse) => void\n  /** Reject handler when a request fails. */\n  reject: (value: RestRequestRejection) => void\n  /** If this request has a bucket id which it falls under for rate limit */\n  bucketId?: string\n  /** Additional request options, used for things like overriding authorization header. */\n  requestBodyOptions?: CreateRequestBodyOptions\n  /**\n   * Whether the request should be run through the queue.\n   * Useful for routes which do not have any rate limits.\n   */\n  runThroughQueue?: boolean\n}\n\nexport interface RestRateLimitedPath {\n  url: string\n  resetTimestamp: number\n  bucketId?: string\n}\n\nexport interface RestRequestResponse {\n  ok: boolean\n  status: number\n  /** The returned body parsed if it was JSON, otherwise it will be the raw body as a string */\n  body?: string | object\n}\n\nexport interface RestRequestRejection {\n  ok: boolean\n  status: number\n  /** The HTTP 1.1 status code text */\n  statusText?: string\n  /** The returned body parsed if it was JSON, otherwise it will be the raw body as a string */\n  body?: string | object\n  error?: string\n}\n\nexport interface RestManagerEvents {\n  /**\n   * Emitted when a request is made to the API.\n   *\n   * @remarks\n   * The body that will be sent to the API is available in the `extra` parameter. Do not consume the body in the `Request` object and use the one in the `extra` parameter instead.\n   */\n  request: (request: Request, extra: { body: any }) => void\n  /**\n   * Emitted when a response is received from the API.\n   *\n   * @remarks\n   * This is fired for both successful and failed requests, you should check the Response object to determine if the request was successful or not.\n   *\n   * Both the request and the response body are available in the `extra` parameter. Do not consume the body in the `Request` or `Response` object and use the one in the `extra` parameter instead.\n   */\n  response: (request: Request, response: Response, extra: { requestBody: any; responseBody: string | object }) => void\n  /**\n   * Emitted when a request errors due to fetch error.\n   *\n   * @remarks\n   * The body that was sent to the API is available in the `extra` parameter.\n   */\n  requestError: (request: Request, error: any, extra: { body: any }) => void\n}\n"],"names":[],"mappings":"AA6sGA,WAwBC"}
