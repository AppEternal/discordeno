import fs from 'node:fs/promises'

const benchmarkData = await fetch(`https://raw.githubusercontent.com/discordeno/discordeno/benchies/benchmarksResult/data.js`)
  .then(async (res) => await res.text())
  .then((text) => JSON.parse(text.slice(24)))
const results = JSON.parse(await fs.readFile('./data.json', 'utf-8'))
const benchmarks = results.entries.Benchmark
benchmarks.reverse()
const compareWithHead = {}
const latestBaseBenchmarks = benchmarkData.entries.Benchmark.slice(-1)[0]
for (const benchmark of latestBaseBenchmarks.benches) {
  compareWithHead[benchmark.name] = {
    [latestBaseBenchmarks.commit.id]: benchmark,
  }
}
for (let i = benchmarks.length - 1; i >= 0; i--) {
  for (const bench of benchmarks[i].benches) {
    if (compareWithHead[bench.name]) {
      compareWithHead[bench.name][benchmarks[i].commit.id] = bench
    } else {
      compareWithHead[bench.name] = {
        [benchmarks[i].commit.id]: bench,
      }
    }
  }
}
let message = '<!-- benchmark comment by ci -->\n'
message += `## Benchmark\n\n`
message += '<details><summary>Detail results of benchmarks</summary>\n\n'
let header1 = `| Benchmark suite | Base (${latestBaseBenchmarks.commit.id}) |`
let header2 = `|-|-|`
const commitIds = benchmarks.map((benchmark) => benchmark.commit.id)
const uniqueCommitIds = commitIds.filter((benchmarkCommitId, index) => commitIds.indexOf(benchmarkCommitId) === index)
for (const [index, commitId] of uniqueCommitIds.entries()) {
  header1 += index === 0 ? ` Latest Head (${commitId}) |` : ` ${commitId} |`
  header2 += '-|'
}
message += `${header1}\n`
message += `${header2}\n`
for (const benchName of Object.keys(compareWithHead)) {
  let benchData = `| ${benchName} |`
  benchData += compareWithHead[benchName][latestBaseBenchmarks.commit.id]
    ? ` ${`\`${compareWithHead[benchName][latestBaseBenchmarks.commit.id].value}\` ${compareWithHead[benchName][latestBaseBenchmarks.commit.id].unit} \`${compareWithHead[benchName][latestBaseBenchmarks.commit.id].range}\``} |`
    : '|'
  for (const commitId of uniqueCommitIds) {
    benchData += compareWithHead[benchName][commitId]
      ? ` \`${compareWithHead[benchName][commitId].value}\` ${compareWithHead[benchName][commitId].unit} \`${compareWithHead[benchName][commitId].range}\`|`
      : '|'
  }
  message += `${benchData}\n`
}
message += '</details>\n\n'
console.log(message.replaceAll('`', '\\`'))

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmF0ZU1lc3NhZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnXG5cbmNvbnN0IGJlbmNobWFya0RhdGEgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Rpc2NvcmRlbm8vZGlzY29yZGVuby9iZW5jaGllcy9iZW5jaG1hcmtzUmVzdWx0L2RhdGEuanNgKVxuICAudGhlbihhc3luYyAocmVzKSA9PiBhd2FpdCByZXMudGV4dCgpKVxuICAudGhlbigodGV4dCkgPT4gSlNPTi5wYXJzZSh0ZXh0LnNsaWNlKDI0KSkpXG5cbmNvbnN0IHJlc3VsdHMgPSBKU09OLnBhcnNlKGF3YWl0IGZzLnJlYWRGaWxlKCcuL2RhdGEuanNvbicsICd1dGYtOCcpKVxuXG5pbnRlcmZhY2UgQmVuY2htYXJrc0RhdGEge1xuICBjb21taXQ6IHtcbiAgICBhdXRob3I6IHsgZW1haWw6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB1c2VybmFtZTogc3RyaW5nIH1cbiAgICBjb21taXR0ZXI6IHsgZW1haWw6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB1c2VybmFtZTogc3RyaW5nIH1cbiAgICBkaXN0aW5jdDogYm9vbGVhblxuICAgIGlkOiBzdHJpbmdcbiAgICBtZXNzYWdlOiBzdHJpbmdcbiAgICB0aW1lc3RhbXA6IHN0cmluZ1xuICAgIHRyZWVfaWQ6IHN0cmluZ1xuICAgIHVybDogc3RyaW5nXG4gIH1cbiAgZGF0ZTogbnVtYmVyXG4gIHRvb2w6IHN0cmluZ1xuICBiZW5jaGVzOiBBcnJheTx7IG5hbWU6IHN0cmluZzsgdmFsdWU6IG51bWJlcjsgdW5pdDogc3RyaW5nOyByYW5nZTogc3RyaW5nIH0+XG59XG5cbnR5cGUgQ29tcGFyZVRhYmxlID0gUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgeyBuYW1lOiBzdHJpbmc7IHZhbHVlOiBudW1iZXI7IHVuaXQ6IHN0cmluZzsgcmFuZ2U6IHN0cmluZyB9Pj5cblxuY29uc3QgYmVuY2htYXJrcyA9IHJlc3VsdHMuZW50cmllcy5CZW5jaG1hcmsgYXMgQmVuY2htYXJrc0RhdGFbXVxuYmVuY2htYXJrcy5yZXZlcnNlKClcblxuY29uc3QgY29tcGFyZVdpdGhIZWFkOiBDb21wYXJlVGFibGUgPSB7fVxuY29uc3QgbGF0ZXN0QmFzZUJlbmNobWFya3MgPSBiZW5jaG1hcmtEYXRhLmVudHJpZXMuQmVuY2htYXJrLnNsaWNlKC0xKVswXSBhcyBCZW5jaG1hcmtzRGF0YVxuXG5mb3IgKGNvbnN0IGJlbmNobWFyayBvZiBsYXRlc3RCYXNlQmVuY2htYXJrcy5iZW5jaGVzKSB7XG4gIGNvbXBhcmVXaXRoSGVhZFtiZW5jaG1hcmsubmFtZV0gPSB7XG4gICAgW2xhdGVzdEJhc2VCZW5jaG1hcmtzLmNvbW1pdC5pZF06IGJlbmNobWFyayxcbiAgfVxufVxuZm9yIChsZXQgaSA9IGJlbmNobWFya3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgZm9yIChjb25zdCBiZW5jaCBvZiBiZW5jaG1hcmtzW2ldLmJlbmNoZXMpIHtcbiAgICBpZiAoY29tcGFyZVdpdGhIZWFkW2JlbmNoLm5hbWVdKSB7XG4gICAgICBjb21wYXJlV2l0aEhlYWRbYmVuY2gubmFtZV1bYmVuY2htYXJrc1tpXS5jb21taXQuaWRdID0gYmVuY2hcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGFyZVdpdGhIZWFkW2JlbmNoLm5hbWVdID0ge1xuICAgICAgICBbYmVuY2htYXJrc1tpXS5jb21taXQuaWRdOiBiZW5jaCxcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubGV0IG1lc3NhZ2UgPSAnPCEtLSBiZW5jaG1hcmsgY29tbWVudCBieSBjaSAtLT5cXG4nXG5cbm1lc3NhZ2UgKz0gYCMjIEJlbmNobWFya1xcblxcbmBcbm1lc3NhZ2UgKz0gJzxkZXRhaWxzPjxzdW1tYXJ5PkRldGFpbCByZXN1bHRzIG9mIGJlbmNobWFya3M8L3N1bW1hcnk+XFxuXFxuJ1xubGV0IGhlYWRlcjEgPSBgfCBCZW5jaG1hcmsgc3VpdGUgfCBCYXNlICgke2xhdGVzdEJhc2VCZW5jaG1hcmtzLmNvbW1pdC5pZH0pIHxgXG5sZXQgaGVhZGVyMiA9IGB8LXwtfGBcbmNvbnN0IGNvbW1pdElkcyA9IGJlbmNobWFya3MubWFwKChiZW5jaG1hcmspID0+IGJlbmNobWFyay5jb21taXQuaWQpXG5jb25zdCB1bmlxdWVDb21taXRJZHMgPSBjb21taXRJZHMuZmlsdGVyKChiZW5jaG1hcmtDb21taXRJZCwgaW5kZXgpID0+IGNvbW1pdElkcy5pbmRleE9mKGJlbmNobWFya0NvbW1pdElkKSA9PT0gaW5kZXgpXG5cbmZvciAoY29uc3QgW2luZGV4LCBjb21taXRJZF0gb2YgdW5pcXVlQ29tbWl0SWRzLmVudHJpZXMoKSkge1xuICBoZWFkZXIxICs9IGluZGV4ID09PSAwID8gYCBMYXRlc3QgSGVhZCAoJHtjb21taXRJZH0pIHxgIDogYCAke2NvbW1pdElkfSB8YFxuICBoZWFkZXIyICs9ICctfCdcbn1cbm1lc3NhZ2UgKz0gYCR7aGVhZGVyMX1cXG5gXG5tZXNzYWdlICs9IGAke2hlYWRlcjJ9XFxuYFxuXG5mb3IgKGNvbnN0IGJlbmNoTmFtZSBvZiBPYmplY3Qua2V5cyhjb21wYXJlV2l0aEhlYWQpKSB7XG4gIGxldCBiZW5jaERhdGEgPSBgfCAke2JlbmNoTmFtZX0gfGBcbiAgYmVuY2hEYXRhICs9IGNvbXBhcmVXaXRoSGVhZFtiZW5jaE5hbWVdW2xhdGVzdEJhc2VCZW5jaG1hcmtzLmNvbW1pdC5pZF1cbiAgICA/IGAgJHtgXFxgJHtjb21wYXJlV2l0aEhlYWRbYmVuY2hOYW1lXVtsYXRlc3RCYXNlQmVuY2htYXJrcy5jb21taXQuaWRdLnZhbHVlfVxcYCAke1xuICAgICAgICBjb21wYXJlV2l0aEhlYWRbYmVuY2hOYW1lXVtsYXRlc3RCYXNlQmVuY2htYXJrcy5jb21taXQuaWRdLnVuaXRcbiAgICAgIH0gXFxgJHtjb21wYXJlV2l0aEhlYWRbYmVuY2hOYW1lXVtsYXRlc3RCYXNlQmVuY2htYXJrcy5jb21taXQuaWRdLnJhbmdlfVxcYGB9IHxgXG4gICAgOiAnfCdcblxuICBmb3IgKGNvbnN0IGNvbW1pdElkIG9mIHVuaXF1ZUNvbW1pdElkcykge1xuICAgIGJlbmNoRGF0YSArPSBjb21wYXJlV2l0aEhlYWRbYmVuY2hOYW1lXVtjb21taXRJZF1cbiAgICAgID8gYCBcXGAke2NvbXBhcmVXaXRoSGVhZFtiZW5jaE5hbWVdW2NvbW1pdElkXS52YWx1ZX1cXGAgJHtjb21wYXJlV2l0aEhlYWRbYmVuY2hOYW1lXVtjb21taXRJZF0udW5pdH0gXFxgJHtjb21wYXJlV2l0aEhlYWRbYmVuY2hOYW1lXVtjb21taXRJZF0ucmFuZ2V9XFxgfGBcbiAgICAgIDogJ3wnXG4gIH1cbiAgbWVzc2FnZSArPSBgJHtiZW5jaERhdGF9XFxuYFxufVxuXG5tZXNzYWdlICs9ICc8L2RldGFpbHM+XFxuXFxuJ1xuXG5jb25zb2xlLmxvZyhtZXNzYWdlLnJlcGxhY2VBbGwoJ2AnLCAnXFxcXGAnKSlcbiJdLCJuYW1lcyI6WyJmcyIsImJlbmNobWFya0RhdGEiLCJmZXRjaCIsInRoZW4iLCJyZXMiLCJ0ZXh0IiwiSlNPTiIsInBhcnNlIiwic2xpY2UiLCJyZXN1bHRzIiwicmVhZEZpbGUiLCJiZW5jaG1hcmtzIiwiZW50cmllcyIsIkJlbmNobWFyayIsInJldmVyc2UiLCJjb21wYXJlV2l0aEhlYWQiLCJsYXRlc3RCYXNlQmVuY2htYXJrcyIsImJlbmNobWFyayIsImJlbmNoZXMiLCJuYW1lIiwiY29tbWl0IiwiaWQiLCJpIiwibGVuZ3RoIiwiYmVuY2giLCJtZXNzYWdlIiwiaGVhZGVyMSIsImhlYWRlcjIiLCJjb21taXRJZHMiLCJtYXAiLCJ1bmlxdWVDb21taXRJZHMiLCJmaWx0ZXIiLCJiZW5jaG1hcmtDb21taXRJZCIsImluZGV4IiwiaW5kZXhPZiIsImNvbW1pdElkIiwiYmVuY2hOYW1lIiwiT2JqZWN0Iiwia2V5cyIsImJlbmNoRGF0YSIsInZhbHVlIiwidW5pdCIsInJhbmdlIiwiY29uc29s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
