import { ToggleBitfield } from './ToggleBitfield.js'
export const UserToggle = {
  /** Whether the user belongs to an OAuth2 application */ bot: 1 << 0,
  /** Whether the user is an Official Discord System user (part of the urgent message system) */ system: 1 << 1,
  /** Whether the user has two factor enabled on their account */ mfaEnabled: 1 << 2,
  /** Whether the email on this account has been verified */ verified: 1 << 3,
}
export class UserToggles extends ToggleBitfield {
  constructor(userOrTogglesInt) {
    super()
    if (typeof userOrTogglesInt === 'number') this.bitfield = userOrTogglesInt
    else {
      const user = userOrTogglesInt
      if (user.bot) this.add(UserToggle.bot)
      if (user.system) this.add(UserToggle.system)
      if (user.mfa_enabled) this.add(UserToggle.mfaEnabled)
      if (user.verified) this.add(UserToggle.verified)
    }
  }
  /** Whether the user belongs to an OAuth2 application */ get bot() {
    return this.has('bot')
  }
  /** Whether the user is an Official Discord System user (part of the urgent message system) */ get system() {
    return this.has('system')
  }
  /** Whether the user has two factor enabled on their account */ get mfaEnabled() {
    return this.has('mfaEnabled')
  }
  /** Whether the email on this account has been verified */ get verified() {
    return this.has('verified')
  }
  /** Checks whether or not the permissions exist in this */ has(permissions) {
    if (!Array.isArray(permissions)) return super.contains(UserToggle[permissions])
    return super.contains(permissions.reduce((a, b) => (a |= UserToggle[b]), 0))
  }
  /** Lists all the toggles for the role and whether or not each is true or false. */ list() {
    const json = {}
    for (const [key, value] of Object.entries(UserToggle)) {
      json[key] = super.contains(value)
    }
    return json
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdG9nZ2xlcy91c2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGlzY29yZFVzZXIgfSBmcm9tICdAZGlzY29yZGVuby90eXBlcydcbmltcG9ydCB7IFRvZ2dsZUJpdGZpZWxkIH0gZnJvbSAnLi9Ub2dnbGVCaXRmaWVsZC5qcydcblxuZXhwb3J0IGNvbnN0IFVzZXJUb2dnbGUgPSB7XG4gIC8qKiBXaGV0aGVyIHRoZSB1c2VyIGJlbG9uZ3MgdG8gYW4gT0F1dGgyIGFwcGxpY2F0aW9uICovXG4gIGJvdDogMSA8PCAwLFxuICAvKiogV2hldGhlciB0aGUgdXNlciBpcyBhbiBPZmZpY2lhbCBEaXNjb3JkIFN5c3RlbSB1c2VyIChwYXJ0IG9mIHRoZSB1cmdlbnQgbWVzc2FnZSBzeXN0ZW0pICovXG4gIHN5c3RlbTogMSA8PCAxLFxuICAvKiogV2hldGhlciB0aGUgdXNlciBoYXMgdHdvIGZhY3RvciBlbmFibGVkIG9uIHRoZWlyIGFjY291bnQgKi9cbiAgbWZhRW5hYmxlZDogMSA8PCAyLFxuICAvKiogV2hldGhlciB0aGUgZW1haWwgb24gdGhpcyBhY2NvdW50IGhhcyBiZWVuIHZlcmlmaWVkICovXG4gIHZlcmlmaWVkOiAxIDw8IDMsXG59XG5cbmV4cG9ydCBjbGFzcyBVc2VyVG9nZ2xlcyBleHRlbmRzIFRvZ2dsZUJpdGZpZWxkIHtcbiAgY29uc3RydWN0b3IodXNlck9yVG9nZ2xlc0ludDogRGlzY29yZFVzZXIgfCBudW1iZXIpIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAodHlwZW9mIHVzZXJPclRvZ2dsZXNJbnQgPT09ICdudW1iZXInKSB0aGlzLmJpdGZpZWxkID0gdXNlck9yVG9nZ2xlc0ludFxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgdXNlciA9IHVzZXJPclRvZ2dsZXNJbnRcblxuICAgICAgaWYgKHVzZXIuYm90KSB0aGlzLmFkZChVc2VyVG9nZ2xlLmJvdClcbiAgICAgIGlmICh1c2VyLnN5c3RlbSkgdGhpcy5hZGQoVXNlclRvZ2dsZS5zeXN0ZW0pXG4gICAgICBpZiAodXNlci5tZmFfZW5hYmxlZCkgdGhpcy5hZGQoVXNlclRvZ2dsZS5tZmFFbmFibGVkKVxuICAgICAgaWYgKHVzZXIudmVyaWZpZWQpIHRoaXMuYWRkKFVzZXJUb2dnbGUudmVyaWZpZWQpXG4gICAgfVxuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhlIHVzZXIgYmVsb25ncyB0byBhbiBPQXV0aDIgYXBwbGljYXRpb24gKi9cbiAgZ2V0IGJvdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoJ2JvdCcpXG4gIH1cblxuICAvKiogV2hldGhlciB0aGUgdXNlciBpcyBhbiBPZmZpY2lhbCBEaXNjb3JkIFN5c3RlbSB1c2VyIChwYXJ0IG9mIHRoZSB1cmdlbnQgbWVzc2FnZSBzeXN0ZW0pICovXG4gIGdldCBzeXN0ZW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKCdzeXN0ZW0nKVxuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhlIHVzZXIgaGFzIHR3byBmYWN0b3IgZW5hYmxlZCBvbiB0aGVpciBhY2NvdW50ICovXG4gIGdldCBtZmFFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhcygnbWZhRW5hYmxlZCcpXG4gIH1cblxuICAvKiogV2hldGhlciB0aGUgZW1haWwgb24gdGhpcyBhY2NvdW50IGhhcyBiZWVuIHZlcmlmaWVkICovXG4gIGdldCB2ZXJpZmllZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoJ3ZlcmlmaWVkJylcbiAgfVxuXG4gIC8qKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhlIHBlcm1pc3Npb25zIGV4aXN0IGluIHRoaXMgKi9cbiAgaGFzKHBlcm1pc3Npb25zOiBVc2VyVG9nZ2xlS2V5cyB8IFVzZXJUb2dnbGVLZXlzW10pOiBib29sZWFuIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGVybWlzc2lvbnMpKSByZXR1cm4gc3VwZXIuY29udGFpbnMoVXNlclRvZ2dsZVtwZXJtaXNzaW9uc10pXG5cbiAgICByZXR1cm4gc3VwZXIuY29udGFpbnMocGVybWlzc2lvbnMucmVkdWNlKChhLCBiKSA9PiAoYSB8PSBVc2VyVG9nZ2xlW2JdKSwgMCkpXG4gIH1cblxuICAvKiogTGlzdHMgYWxsIHRoZSB0b2dnbGVzIGZvciB0aGUgcm9sZSBhbmQgd2hldGhlciBvciBub3QgZWFjaCBpcyB0cnVlIG9yIGZhbHNlLiAqL1xuICBsaXN0KCk6IFJlY29yZDxVc2VyVG9nZ2xlS2V5cywgYm9vbGVhbj4ge1xuICAgIGNvbnN0IGpzb246IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0ge31cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhVc2VyVG9nZ2xlKSkge1xuICAgICAganNvbltrZXldID0gc3VwZXIuY29udGFpbnModmFsdWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb24gYXMgUmVjb3JkPFVzZXJUb2dnbGVLZXlzLCBib29sZWFuPlxuICB9XG59XG5cbmV4cG9ydCB0eXBlIFVzZXJUb2dnbGVLZXlzID0ga2V5b2YgdHlwZW9mIFVzZXJUb2dnbGVcbiJdLCJuYW1lcyI6WyJUb2dnbGVCaXRmaWVsZCIsIlVzZXJUb2dnbGUiLCJib3QiLCJzeXN0ZW0iLCJtZmFFbmFibGVkIiwidmVyaWZpZWQiLCJVc2VyVG9nZ2xlcyIsInVzZXJPclRvZ2dsZXNJbnQiLCJiaXRmaWVsZCIsInVzZXIiLCJhZGQiLCJtZmFfZW5hYmxlZCIsImhhcyIsInBlcm1pc3Npb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiY29udGFpbnMiLCJyZWR1Y2UiLCJhIiwiYiIsImxpc3QiLCJqc29uIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTQSxjQUFjLFFBQVEsc0JBQXFCO0FBRXBELE9BQU8sTUFBTUMsYUFBYTtJQUN4QixzREFBc0QsR0FDdERDLEtBQUssS0FBSztJQUNWLDRGQUE0RixHQUM1RkMsUUFBUSxLQUFLO0lBQ2IsNkRBQTZELEdBQzdEQyxZQUFZLEtBQUs7SUFDakIsd0RBQXdELEdBQ3hEQyxVQUFVLEtBQUs7QUFDakIsRUFBQztBQUVELE9BQU8sTUFBTUMsb0JBQW9CTjtJQUMvQixZQUFZTyxnQkFBc0MsQ0FBRTtRQUNsRCxLQUFLO1FBRUwsSUFBSSxPQUFPQSxxQkFBcUIsVUFBVSxJQUFJLENBQUNDLFFBQVEsR0FBR0Q7YUFDckQ7WUFDSCxNQUFNRSxPQUFPRjtZQUViLElBQUlFLEtBQUtQLEdBQUcsRUFBRSxJQUFJLENBQUNRLEdBQUcsQ0FBQ1QsV0FBV0MsR0FBRztZQUNyQyxJQUFJTyxLQUFLTixNQUFNLEVBQUUsSUFBSSxDQUFDTyxHQUFHLENBQUNULFdBQVdFLE1BQU07WUFDM0MsSUFBSU0sS0FBS0UsV0FBVyxFQUFFLElBQUksQ0FBQ0QsR0FBRyxDQUFDVCxXQUFXRyxVQUFVO1lBQ3BELElBQUlLLEtBQUtKLFFBQVEsRUFBRSxJQUFJLENBQUNLLEdBQUcsQ0FBQ1QsV0FBV0ksUUFBUTtRQUNqRDtJQUNGO0lBRUEsc0RBQXNELEdBQ3RELElBQUlILE1BQWU7UUFDakIsT0FBTyxJQUFJLENBQUNVLEdBQUcsQ0FBQztJQUNsQjtJQUVBLDRGQUE0RixHQUM1RixJQUFJVCxTQUFrQjtRQUNwQixPQUFPLElBQUksQ0FBQ1MsR0FBRyxDQUFDO0lBQ2xCO0lBRUEsNkRBQTZELEdBQzdELElBQUlSLGFBQXNCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDUSxHQUFHLENBQUM7SUFDbEI7SUFFQSx3REFBd0QsR0FDeEQsSUFBSVAsV0FBb0I7UUFDdEIsT0FBTyxJQUFJLENBQUNPLEdBQUcsQ0FBQztJQUNsQjtJQUVBLHdEQUF3RCxHQUN4REEsSUFBSUMsV0FBOEMsRUFBVztRQUMzRCxJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsY0FBYyxPQUFPLEtBQUssQ0FBQ0csU0FBU2YsVUFBVSxDQUFDWSxZQUFZO1FBRTlFLE9BQU8sS0FBSyxDQUFDRyxTQUFTSCxZQUFZSSxNQUFNLENBQUMsQ0FBQ0MsR0FBR0MsSUFBT0QsS0FBS2pCLFVBQVUsQ0FBQ2tCLEVBQUUsRUFBRztJQUMzRTtJQUVBLGlGQUFpRixHQUNqRkMsT0FBd0M7UUFDdEMsTUFBTUMsT0FBZ0MsQ0FBQztRQUN2QyxLQUFLLE1BQU0sQ0FBQ0MsS0FBS0MsTUFBTSxJQUFJQyxPQUFPQyxPQUFPLENBQUN4QixZQUFhO1lBQ3JEb0IsSUFBSSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxDQUFDTixTQUFTTztRQUM3QjtRQUVBLE9BQU9GO0lBQ1Q7QUFDRiJ9
