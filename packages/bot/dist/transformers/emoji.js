import { EmojiToggles } from './toggles/emoji.js';
export const baseEmoji = {
    // This allows typescript to still check for type errors on functions below
    ...undefined,
    get animated () {
        return this.toggles?.animated;
    },
    get requireColons () {
        return this.toggles?.requireColons;
    },
    get managed () {
        return this.toggles?.managed;
    },
    get available () {
        return this.toggles.available;
    }
};
export function transformEmoji(bot, payload) {
    const props = bot.transformers.desiredProperties.emoji;
    const emoji = Object.create(baseEmoji);
    if (props.id && payload.id) emoji.id = bot.transformers.snowflake(payload.id);
    if (props.name && payload.name) emoji.name = payload.name;
    if (props.roles && payload.roles) emoji.roles = payload.roles.map((id)=>bot.transformers.snowflake(id));
    if (props.user && payload.user) emoji.user = bot.transformers.user(bot, payload.user);
    emoji.toggles = new EmojiToggles(payload);
    return bot.transformers.customizers.emoji(bot, payload, emoji);
}
export function transformDefaultReactionEmoji(bot, payload) {
    const props = bot.transformers.desiredProperties.defaultReactionEmoji;
    const defaultReactionEmoji = {};
    if (props.emojiId && payload.emoji_id) defaultReactionEmoji.emojiId = bot.transformers.snowflake(payload.emoji_id);
    if (props.emojiName && payload.emoji_name) defaultReactionEmoji.emojiName = payload.emoji_name;
    return bot.transformers.customizers.defaultReactionEmoji(bot, payload, defaultReactionEmoji);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvZW1vamkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEaXNjb3JkRGVmYXVsdFJlYWN0aW9uRW1vamksIERpc2NvcmRFbW9qaSB9IGZyb20gJ0BkaXNjb3JkZW5vL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBCb3QgfSBmcm9tICcuLi9ib3QuanMnXG5pbXBvcnQgdHlwZSB7IERlc2lyZWRQcm9wZXJ0aWVzQmVoYXZpb3IsIFNldHVwRGVzaXJlZFByb3BzLCBUcmFuc2Zvcm1lcnNEZXNpcmVkUHJvcGVydGllcyB9IGZyb20gJy4uL2Rlc2lyZWRQcm9wZXJ0aWVzLmpzJ1xuaW1wb3J0IHsgRW1vamlUb2dnbGVzIH0gZnJvbSAnLi90b2dnbGVzL2Vtb2ppLmpzJ1xuaW1wb3J0IHR5cGUgeyBEZWZhdWx0UmVhY3Rpb25FbW9qaSwgRW1vamkgfSBmcm9tICcuL3R5cGVzLmpzJ1xuXG5leHBvcnQgY29uc3QgYmFzZUVtb2ppOiBFbW9qaSA9IHtcbiAgLy8gVGhpcyBhbGxvd3MgdHlwZXNjcmlwdCB0byBzdGlsbCBjaGVjayBmb3IgdHlwZSBlcnJvcnMgb24gZnVuY3Rpb25zIGJlbG93XG4gIC4uLih1bmRlZmluZWQgYXMgdW5rbm93biBhcyBFbW9qaSksXG5cbiAgZ2V0IGFuaW1hdGVkKCkge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZXM/LmFuaW1hdGVkXG4gIH0sXG4gIGdldCByZXF1aXJlQ29sb25zKCkge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZXM/LnJlcXVpcmVDb2xvbnNcbiAgfSxcbiAgZ2V0IG1hbmFnZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlcz8ubWFuYWdlZFxuICB9LFxuICBnZXQgYXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZXMuYXZhaWxhYmxlXG4gIH0sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1FbW9qaShib3Q6IEJvdCwgcGF5bG9hZDogRGlzY29yZEVtb2ppKTogRW1vamkge1xuICBjb25zdCBwcm9wcyA9IGJvdC50cmFuc2Zvcm1lcnMuZGVzaXJlZFByb3BlcnRpZXMuZW1vamlcbiAgY29uc3QgZW1vamkgPSBPYmplY3QuY3JlYXRlKGJhc2VFbW9qaSkgYXMgU2V0dXBEZXNpcmVkUHJvcHM8RW1vamksIFRyYW5zZm9ybWVyc0Rlc2lyZWRQcm9wZXJ0aWVzLCBEZXNpcmVkUHJvcGVydGllc0JlaGF2aW9yPlxuXG4gIGlmIChwcm9wcy5pZCAmJiBwYXlsb2FkLmlkKSBlbW9qaS5pZCA9IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuaWQpXG4gIGlmIChwcm9wcy5uYW1lICYmIHBheWxvYWQubmFtZSkgZW1vamkubmFtZSA9IHBheWxvYWQubmFtZVxuICBpZiAocHJvcHMucm9sZXMgJiYgcGF5bG9hZC5yb2xlcykgZW1vamkucm9sZXMgPSBwYXlsb2FkLnJvbGVzLm1hcCgoaWQpID0+IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKGlkKSlcbiAgaWYgKHByb3BzLnVzZXIgJiYgcGF5bG9hZC51c2VyKSBlbW9qaS51c2VyID0gYm90LnRyYW5zZm9ybWVycy51c2VyKGJvdCwgcGF5bG9hZC51c2VyKVxuXG4gIGVtb2ppLnRvZ2dsZXMgPSBuZXcgRW1vamlUb2dnbGVzKHBheWxvYWQpXG5cbiAgcmV0dXJuIGJvdC50cmFuc2Zvcm1lcnMuY3VzdG9taXplcnMuZW1vamkoYm90LCBwYXlsb2FkLCBlbW9qaSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybURlZmF1bHRSZWFjdGlvbkVtb2ppKGJvdDogQm90LCBwYXlsb2FkOiBEaXNjb3JkRGVmYXVsdFJlYWN0aW9uRW1vamkpOiBEZWZhdWx0UmVhY3Rpb25FbW9qaSB7XG4gIGNvbnN0IHByb3BzID0gYm90LnRyYW5zZm9ybWVycy5kZXNpcmVkUHJvcGVydGllcy5kZWZhdWx0UmVhY3Rpb25FbW9qaVxuICBjb25zdCBkZWZhdWx0UmVhY3Rpb25FbW9qaSA9IHt9IGFzIFNldHVwRGVzaXJlZFByb3BzPERlZmF1bHRSZWFjdGlvbkVtb2ppLCBUcmFuc2Zvcm1lcnNEZXNpcmVkUHJvcGVydGllcywgRGVzaXJlZFByb3BlcnRpZXNCZWhhdmlvcj5cblxuICBpZiAocHJvcHMuZW1vamlJZCAmJiBwYXlsb2FkLmVtb2ppX2lkKSBkZWZhdWx0UmVhY3Rpb25FbW9qaS5lbW9qaUlkID0gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5lbW9qaV9pZClcbiAgaWYgKHByb3BzLmVtb2ppTmFtZSAmJiBwYXlsb2FkLmVtb2ppX25hbWUpIGRlZmF1bHRSZWFjdGlvbkVtb2ppLmVtb2ppTmFtZSA9IHBheWxvYWQuZW1vamlfbmFtZVxuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLmN1c3RvbWl6ZXJzLmRlZmF1bHRSZWFjdGlvbkVtb2ppKGJvdCwgcGF5bG9hZCwgZGVmYXVsdFJlYWN0aW9uRW1vamkpXG59XG4iXSwibmFtZXMiOlsiRW1vamlUb2dnbGVzIiwiYmFzZUVtb2ppIiwidW5kZWZpbmVkIiwiYW5pbWF0ZWQiLCJ0b2dnbGVzIiwicmVxdWlyZUNvbG9ucyIsIm1hbmFnZWQiLCJhdmFpbGFibGUiLCJ0cmFuc2Zvcm1FbW9qaSIsImJvdCIsInBheWxvYWQiLCJwcm9wcyIsInRyYW5zZm9ybWVycyIsImRlc2lyZWRQcm9wZXJ0aWVzIiwiZW1vamkiLCJPYmplY3QiLCJjcmVhdGUiLCJpZCIsInNub3dmbGFrZSIsIm5hbWUiLCJyb2xlcyIsIm1hcCIsInVzZXIiLCJjdXN0b21pemVycyIsInRyYW5zZm9ybURlZmF1bHRSZWFjdGlvbkVtb2ppIiwiZGVmYXVsdFJlYWN0aW9uRW1vamkiLCJlbW9qaUlkIiwiZW1vamlfaWQiLCJlbW9qaU5hbWUiLCJlbW9qaV9uYW1lIl0sIm1hcHBpbmdzIjoiQUFHQSxTQUFTQSxZQUFZLFFBQVEscUJBQW9CO0FBR2pELE9BQU8sTUFBTUMsWUFBbUI7SUFDOUIsMkVBQTJFO0lBQzNFLEdBQUlDLFNBQVM7SUFFYixJQUFJQyxZQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUNDLE9BQU8sRUFBRUQ7SUFDdkI7SUFDQSxJQUFJRSxpQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUNELE9BQU8sRUFBRUM7SUFDdkI7SUFDQSxJQUFJQyxXQUFVO1FBQ1osT0FBTyxJQUFJLENBQUNGLE9BQU8sRUFBRUU7SUFDdkI7SUFDQSxJQUFJQyxhQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0csU0FBUztJQUMvQjtBQUNGLEVBQUM7QUFFRCxPQUFPLFNBQVNDLGVBQWVDLEdBQVEsRUFBRUMsT0FBcUI7SUFDNUQsTUFBTUMsUUFBUUYsSUFBSUcsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ0MsS0FBSztJQUN0RCxNQUFNQSxRQUFRQyxPQUFPQyxNQUFNLENBQUNmO0lBRTVCLElBQUlVLE1BQU1NLEVBQUUsSUFBSVAsUUFBUU8sRUFBRSxFQUFFSCxNQUFNRyxFQUFFLEdBQUdSLElBQUlHLFlBQVksQ0FBQ00sU0FBUyxDQUFDUixRQUFRTyxFQUFFO0lBQzVFLElBQUlOLE1BQU1RLElBQUksSUFBSVQsUUFBUVMsSUFBSSxFQUFFTCxNQUFNSyxJQUFJLEdBQUdULFFBQVFTLElBQUk7SUFDekQsSUFBSVIsTUFBTVMsS0FBSyxJQUFJVixRQUFRVSxLQUFLLEVBQUVOLE1BQU1NLEtBQUssR0FBR1YsUUFBUVUsS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0osS0FBT1IsSUFBSUcsWUFBWSxDQUFDTSxTQUFTLENBQUNEO0lBQ3JHLElBQUlOLE1BQU1XLElBQUksSUFBSVosUUFBUVksSUFBSSxFQUFFUixNQUFNUSxJQUFJLEdBQUdiLElBQUlHLFlBQVksQ0FBQ1UsSUFBSSxDQUFDYixLQUFLQyxRQUFRWSxJQUFJO0lBRXBGUixNQUFNVixPQUFPLEdBQUcsSUFBSUosYUFBYVU7SUFFakMsT0FBT0QsSUFBSUcsWUFBWSxDQUFDVyxXQUFXLENBQUNULEtBQUssQ0FBQ0wsS0FBS0MsU0FBU0k7QUFDMUQ7QUFFQSxPQUFPLFNBQVNVLDhCQUE4QmYsR0FBUSxFQUFFQyxPQUFvQztJQUMxRixNQUFNQyxRQUFRRixJQUFJRyxZQUFZLENBQUNDLGlCQUFpQixDQUFDWSxvQkFBb0I7SUFDckUsTUFBTUEsdUJBQXVCLENBQUM7SUFFOUIsSUFBSWQsTUFBTWUsT0FBTyxJQUFJaEIsUUFBUWlCLFFBQVEsRUFBRUYscUJBQXFCQyxPQUFPLEdBQUdqQixJQUFJRyxZQUFZLENBQUNNLFNBQVMsQ0FBQ1IsUUFBUWlCLFFBQVE7SUFDakgsSUFBSWhCLE1BQU1pQixTQUFTLElBQUlsQixRQUFRbUIsVUFBVSxFQUFFSixxQkFBcUJHLFNBQVMsR0FBR2xCLFFBQVFtQixVQUFVO0lBRTlGLE9BQU9wQixJQUFJRyxZQUFZLENBQUNXLFdBQVcsQ0FBQ0Usb0JBQW9CLENBQUNoQixLQUFLQyxTQUFTZTtBQUN6RSJ9