import { MessageComponentTypes } from '@discordeno/types';
export function transformComponentToDiscordComponent(bot, payload) {
    // This switch should include all cases
    switch(payload.type){
        case MessageComponentTypes.ActionRow:
            return transformActionRow(bot, payload);
        case MessageComponentTypes.Button:
            return transformButtonComponent(bot, payload);
        case MessageComponentTypes.Container:
            return transformContainerComponent(bot, payload);
        case MessageComponentTypes.TextInput:
            return transformInputTextComponent(bot, payload);
        case MessageComponentTypes.StringSelect:
        case MessageComponentTypes.ChannelSelect:
        case MessageComponentTypes.RoleSelect:
        case MessageComponentTypes.UserSelect:
        case MessageComponentTypes.MentionableSelect:
            return transformSelectMenuComponent(bot, payload);
        case MessageComponentTypes.Section:
            return transformSectionComponent(bot, payload);
        case MessageComponentTypes.File:
            return transformFileComponent(bot, payload);
        case MessageComponentTypes.MediaGallery:
            return transformMediaGalleryComponent(bot, payload);
        case MessageComponentTypes.Thumbnail:
            return transformThumbnailComponent(bot, payload);
        case MessageComponentTypes.Separator:
        case MessageComponentTypes.TextDisplay:
            // As of now they are compatible
            return payload;
    }
}
export function transformUnfurledMediaItemToDiscordUnfurledMediaItem(bot, payload) {
    return {
        url: payload.url,
        proxy_url: payload.proxyUrl,
        height: payload.height,
        width: payload.width,
        content_type: payload.contentType,
        attachment_id: payload.attachmentId ? bot.transformers.reverse.snowflake(payload.attachmentId) : undefined
    };
}
export function transformMediaGalleryItemToDiscordMediaGalleryItem(bot, payload) {
    return {
        media: bot.transformers.reverse.unfurledMediaItem(bot, payload.media),
        description: payload.description,
        spoiler: payload.spoiler
    };
}
function transformActionRow(bot, payload) {
    return {
        type: MessageComponentTypes.ActionRow,
        id: payload.id,
        // The actionRow.components type is kinda annoying, so we need a cast for this
        components: payload.components?.map((component)=>bot.transformers.reverse.component(bot, component)) ?? []
    };
}
function transformContainerComponent(bot, payload) {
    return {
        type: MessageComponentTypes.Container,
        id: payload.id,
        accent_color: payload.accentColor,
        spoiler: payload.spoiler,
        components: payload.components?.map((component)=>bot.transformers.reverse.component(bot, component)) ?? []
    };
}
function transformButtonComponent(bot, payload) {
    // Since Component is a merge of all components, some casts are necessary
    return {
        type: MessageComponentTypes.Button,
        id: payload.id,
        style: payload.style,
        custom_id: payload.customId,
        disabled: payload.disabled,
        emoji: payload.emoji ? {
            id: payload.emoji.id ? bot.transformers.reverse.snowflake(payload.emoji.id) : null,
            name: payload.emoji.name ?? null,
            animated: payload.emoji.animated
        } : undefined,
        label: payload.label,
        url: payload.url,
        sku_id: payload.skuId ? bot.transformers.reverse.snowflake(payload.skuId) : undefined
    };
}
function transformInputTextComponent(_bot, payload) {
    // Since Component is a merge of all components, some casts are necessary
    return {
        type: MessageComponentTypes.TextInput,
        id: payload.id,
        style: payload.style,
        custom_id: payload.customId,
        label: payload.label,
        value: payload.value,
        max_length: payload.maxLength,
        min_length: payload.minLength,
        placeholder: payload.placeholder,
        required: payload.required
    };
}
function transformSelectMenuComponent(bot, payload) {
    return {
        type: payload.type,
        id: payload.id,
        custom_id: payload.customId,
        channel_types: payload.channelTypes,
        default_values: payload.defaultValues?.map((defaultValue)=>({
                id: bot.transformers.reverse.snowflake(defaultValue.id),
                type: defaultValue.type
            })),
        disabled: payload.disabled,
        max_values: payload.maxValues,
        min_values: payload.minValues,
        options: payload.options?.map((option)=>({
                label: option.label,
                value: option.value,
                description: option.description,
                emoji: option.emoji ? {
                    id: option.emoji.id ? bot.transformers.reverse.snowflake(option.emoji.id) : null,
                    name: option.emoji.name ?? null,
                    animated: option.emoji.animated
                } : undefined,
                default: option.default
            })),
        placeholder: payload.placeholder
    };
}
function transformSectionComponent(bot, payload) {
    return {
        type: MessageComponentTypes.Section,
        id: payload.id,
        components: payload.components?.map((component)=>bot.transformers.reverse.component(bot, component)),
        accessory: payload.accessory ? bot.transformers.reverse.component(bot, payload.accessory) : undefined
    };
}
function transformFileComponent(bot, payload) {
    return {
        type: MessageComponentTypes.File,
        id: payload.id,
        file: bot.transformers.reverse.unfurledMediaItem(bot, payload.file),
        spoiler: payload.spoiler,
        name: payload.name,
        size: payload.size
    };
}
function transformMediaGalleryComponent(bot, payload) {
    return {
        type: MessageComponentTypes.MediaGallery,
        id: payload.id,
        items: payload.items?.map((item)=>bot.transformers.reverse.mediaGalleryItem(bot, item)) ?? []
    };
}
function transformThumbnailComponent(bot, payload) {
    return {
        type: MessageComponentTypes.Thumbnail,
        id: payload.id,
        media: bot.transformers.reverse.unfurledMediaItem(bot, payload.media),
        description: payload.description,
        spoiler: payload.spoiler
    };
}

//# sourceMappingURL=data:application/json;base64,