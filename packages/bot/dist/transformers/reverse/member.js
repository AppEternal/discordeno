import { iconBigintToHash } from '@discordeno/utils'
export function transformUserToDiscordUser(bot, payload) {
  const _payload = payload
  return {
    id: _payload.id.toString(),
    username: _payload.username,
    global_name: _payload.globalName ?? null,
    discriminator: _payload.discriminator,
    avatar: _payload.avatar ? iconBigintToHash(_payload.avatar) : null,
    locale: _payload.locale,
    email: _payload.email ?? undefined,
    flags: _payload.flags?.toJSON(),
    premium_type: _payload.premiumType,
    public_flags: _payload.publicFlags?.toJSON(),
    bot: _payload.toggles?.bot,
    system: _payload.toggles?.system,
    mfa_enabled: _payload.toggles?.mfaEnabled,
    verified: _payload.toggles?.verified,
  }
}
export function transformMemberToDiscordMember(bot, payload) {
  const _payload = payload
  return {
    nick: _payload.nick ?? undefined,
    roles: _payload.roles?.map((id) => id.toString()) ?? [],
    joined_at: _payload.joinedAt ? new Date(_payload.joinedAt).toISOString() : null,
    premium_since: _payload.premiumSince ? new Date(_payload.premiumSince).toISOString() : undefined,
    avatar: _payload.avatar ? iconBigintToHash(_payload.avatar) : undefined,
    permissions: _payload.permissions?.toString(),
    communication_disabled_until: _payload.communicationDisabledUntil ? new Date(_payload.communicationDisabledUntil).toISOString() : undefined,
    deaf: _payload.toggles?.deaf ?? false,
    mute: _payload.toggles?.mute ?? false,
    pending: _payload.toggles?.pending,
    flags: _payload.flags ?? 0,
    avatar_decoration_data: _payload.avatarDecorationData
      ? {
          asset: iconBigintToHash(_payload.avatarDecorationData.asset),
          sku_id: bot.transformers.reverse.snowflake(_payload.avatarDecorationData.skuId),
        }
      : undefined,
    user: _payload.user ? bot.transformers.reverse.user(bot, _payload.user) : undefined,
  }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvcmV2ZXJzZS9tZW1iZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEaXNjb3JkTWVtYmVyLCBEaXNjb3JkVXNlciB9IGZyb20gJ0BkaXNjb3JkZW5vL3R5cGVzJ1xuaW1wb3J0IHsgaWNvbkJpZ2ludFRvSGFzaCB9IGZyb20gJ0BkaXNjb3JkZW5vL3V0aWxzJ1xuaW1wb3J0IHR5cGUgeyBCb3QgfSBmcm9tICcuLi8uLi9ib3QuanMnXG5pbXBvcnQgdHlwZSB7IE1lbWJlciwgVXNlciB9IGZyb20gJy4uL3R5cGVzLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtVXNlclRvRGlzY29yZFVzZXIoYm90OiBCb3QsIHBheWxvYWQ6IHR5cGVvZiBib3QudHJhbnNmb3JtZXJzLiRpbmZlcnJlZFR5cGVzLnVzZXIpOiBEaXNjb3JkVXNlciB7XG4gIGNvbnN0IF9wYXlsb2FkID0gcGF5bG9hZCBhcyBQYXJ0aWFsPFVzZXI+XG5cbiAgcmV0dXJuIHtcbiAgICBpZDogX3BheWxvYWQuaWQhLnRvU3RyaW5nKCksXG4gICAgdXNlcm5hbWU6IF9wYXlsb2FkLnVzZXJuYW1lISxcbiAgICBnbG9iYWxfbmFtZTogX3BheWxvYWQuZ2xvYmFsTmFtZSA/PyBudWxsLFxuICAgIGRpc2NyaW1pbmF0b3I6IF9wYXlsb2FkLmRpc2NyaW1pbmF0b3IhLFxuICAgIGF2YXRhcjogX3BheWxvYWQuYXZhdGFyID8gaWNvbkJpZ2ludFRvSGFzaChfcGF5bG9hZC5hdmF0YXIpIDogbnVsbCxcbiAgICBsb2NhbGU6IF9wYXlsb2FkLmxvY2FsZSxcbiAgICBlbWFpbDogX3BheWxvYWQuZW1haWwgPz8gdW5kZWZpbmVkLFxuICAgIGZsYWdzOiBfcGF5bG9hZC5mbGFncz8udG9KU09OKCksXG4gICAgcHJlbWl1bV90eXBlOiBfcGF5bG9hZC5wcmVtaXVtVHlwZSxcbiAgICBwdWJsaWNfZmxhZ3M6IF9wYXlsb2FkLnB1YmxpY0ZsYWdzPy50b0pTT04oKSxcbiAgICBib3Q6IF9wYXlsb2FkLnRvZ2dsZXM/LmJvdCxcbiAgICBzeXN0ZW06IF9wYXlsb2FkLnRvZ2dsZXM/LnN5c3RlbSxcbiAgICBtZmFfZW5hYmxlZDogX3BheWxvYWQudG9nZ2xlcz8ubWZhRW5hYmxlZCxcbiAgICB2ZXJpZmllZDogX3BheWxvYWQudG9nZ2xlcz8udmVyaWZpZWQsXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1lbWJlclRvRGlzY29yZE1lbWJlcihib3Q6IEJvdCwgcGF5bG9hZDogdHlwZW9mIGJvdC50cmFuc2Zvcm1lcnMuJGluZmVycmVkVHlwZXMubWVtYmVyKTogRGlzY29yZE1lbWJlciB7XG4gIGNvbnN0IF9wYXlsb2FkID0gcGF5bG9hZCBhcyBQYXJ0aWFsPE1lbWJlcj5cblxuICByZXR1cm4ge1xuICAgIG5pY2s6IF9wYXlsb2FkLm5pY2sgPz8gdW5kZWZpbmVkLFxuICAgIHJvbGVzOiBfcGF5bG9hZC5yb2xlcz8ubWFwKChpZCkgPT4gaWQudG9TdHJpbmcoKSkgPz8gW10sXG4gICAgam9pbmVkX2F0OiBfcGF5bG9hZC5qb2luZWRBdCA/IG5ldyBEYXRlKF9wYXlsb2FkLmpvaW5lZEF0KS50b0lTT1N0cmluZygpIDogbnVsbCxcbiAgICBwcmVtaXVtX3NpbmNlOiBfcGF5bG9hZC5wcmVtaXVtU2luY2UgPyBuZXcgRGF0ZShfcGF5bG9hZC5wcmVtaXVtU2luY2UpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgYXZhdGFyOiBfcGF5bG9hZC5hdmF0YXIgPyBpY29uQmlnaW50VG9IYXNoKF9wYXlsb2FkLmF2YXRhcikgOiB1bmRlZmluZWQsXG4gICAgcGVybWlzc2lvbnM6IF9wYXlsb2FkLnBlcm1pc3Npb25zPy50b1N0cmluZygpLFxuICAgIGNvbW11bmljYXRpb25fZGlzYWJsZWRfdW50aWw6IF9wYXlsb2FkLmNvbW11bmljYXRpb25EaXNhYmxlZFVudGlsID8gbmV3IERhdGUoX3BheWxvYWQuY29tbXVuaWNhdGlvbkRpc2FibGVkVW50aWwpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgZGVhZjogX3BheWxvYWQudG9nZ2xlcz8uZGVhZiA/PyBmYWxzZSxcbiAgICBtdXRlOiBfcGF5bG9hZC50b2dnbGVzPy5tdXRlID8/IGZhbHNlLFxuICAgIHBlbmRpbmc6IF9wYXlsb2FkLnRvZ2dsZXM/LnBlbmRpbmcsXG4gICAgZmxhZ3M6IF9wYXlsb2FkLmZsYWdzID8/IDAsXG4gICAgYXZhdGFyX2RlY29yYXRpb25fZGF0YTogX3BheWxvYWQuYXZhdGFyRGVjb3JhdGlvbkRhdGFcbiAgICAgID8ge1xuICAgICAgICAgIGFzc2V0OiBpY29uQmlnaW50VG9IYXNoKF9wYXlsb2FkLmF2YXRhckRlY29yYXRpb25EYXRhLmFzc2V0KSxcbiAgICAgICAgICBza3VfaWQ6IGJvdC50cmFuc2Zvcm1lcnMucmV2ZXJzZS5zbm93Zmxha2UoX3BheWxvYWQuYXZhdGFyRGVjb3JhdGlvbkRhdGEuc2t1SWQpLFxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZCxcbiAgICB1c2VyOiBfcGF5bG9hZC51c2VyID8gYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLnVzZXIoYm90LCBfcGF5bG9hZC51c2VyKSA6IHVuZGVmaW5lZCxcbiAgfVxufVxuIl0sIm5hbWVzIjpbImljb25CaWdpbnRUb0hhc2giLCJ0cmFuc2Zvcm1Vc2VyVG9EaXNjb3JkVXNlciIsImJvdCIsInBheWxvYWQiLCJfcGF5bG9hZCIsImlkIiwidG9TdHJpbmciLCJ1c2VybmFtZSIsImdsb2JhbF9uYW1lIiwiZ2xvYmFsTmFtZSIsImRpc2NyaW1pbmF0b3IiLCJhdmF0YXIiLCJsb2NhbGUiLCJlbWFpbCIsInVuZGVmaW5lZCIsImZsYWdzIiwidG9KU09OIiwicHJlbWl1bV90eXBlIiwicHJlbWl1bVR5cGUiLCJwdWJsaWNfZmxhZ3MiLCJwdWJsaWNGbGFncyIsInRvZ2dsZXMiLCJzeXN0ZW0iLCJtZmFfZW5hYmxlZCIsIm1mYUVuYWJsZWQiLCJ2ZXJpZmllZCIsInRyYW5zZm9ybU1lbWJlclRvRGlzY29yZE1lbWJlciIsIm5pY2siLCJyb2xlcyIsIm1hcCIsImpvaW5lZF9hdCIsImpvaW5lZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicHJlbWl1bV9zaW5jZSIsInByZW1pdW1TaW5jZSIsInBlcm1pc3Npb25zIiwiY29tbXVuaWNhdGlvbl9kaXNhYmxlZF91bnRpbCIsImNvbW11bmljYXRpb25EaXNhYmxlZFVudGlsIiwiZGVhZiIsIm11dGUiLCJwZW5kaW5nIiwiYXZhdGFyX2RlY29yYXRpb25fZGF0YSIsImF2YXRhckRlY29yYXRpb25EYXRhIiwiYXNzZXQiLCJza3VfaWQiLCJ0cmFuc2Zvcm1lcnMiLCJyZXZlcnNlIiwic25vd2ZsYWtlIiwic2t1SWQiLCJ1c2VyIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTQSxnQkFBZ0IsUUFBUSxvQkFBbUI7QUFJcEQsT0FBTyxTQUFTQywyQkFBMkJDLEdBQVEsRUFBRUMsT0FBb0Q7SUFDdkcsTUFBTUMsV0FBV0Q7SUFFakIsT0FBTztRQUNMRSxJQUFJRCxTQUFTQyxFQUFFLENBQUVDLFFBQVE7UUFDekJDLFVBQVVILFNBQVNHLFFBQVE7UUFDM0JDLGFBQWFKLFNBQVNLLFVBQVUsSUFBSTtRQUNwQ0MsZUFBZU4sU0FBU00sYUFBYTtRQUNyQ0MsUUFBUVAsU0FBU08sTUFBTSxHQUFHWCxpQkFBaUJJLFNBQVNPLE1BQU0sSUFBSTtRQUM5REMsUUFBUVIsU0FBU1EsTUFBTTtRQUN2QkMsT0FBT1QsU0FBU1MsS0FBSyxJQUFJQztRQUN6QkMsT0FBT1gsU0FBU1csS0FBSyxFQUFFQztRQUN2QkMsY0FBY2IsU0FBU2MsV0FBVztRQUNsQ0MsY0FBY2YsU0FBU2dCLFdBQVcsRUFBRUo7UUFDcENkLEtBQUtFLFNBQVNpQixPQUFPLEVBQUVuQjtRQUN2Qm9CLFFBQVFsQixTQUFTaUIsT0FBTyxFQUFFQztRQUMxQkMsYUFBYW5CLFNBQVNpQixPQUFPLEVBQUVHO1FBQy9CQyxVQUFVckIsU0FBU2lCLE9BQU8sRUFBRUk7SUFDOUI7QUFDRjtBQUVBLE9BQU8sU0FBU0MsK0JBQStCeEIsR0FBUSxFQUFFQyxPQUFzRDtJQUM3RyxNQUFNQyxXQUFXRDtJQUVqQixPQUFPO1FBQ0x3QixNQUFNdkIsU0FBU3VCLElBQUksSUFBSWI7UUFDdkJjLE9BQU94QixTQUFTd0IsS0FBSyxFQUFFQyxJQUFJLENBQUN4QixLQUFPQSxHQUFHQyxRQUFRLE9BQU8sRUFBRTtRQUN2RHdCLFdBQVcxQixTQUFTMkIsUUFBUSxHQUFHLElBQUlDLEtBQUs1QixTQUFTMkIsUUFBUSxFQUFFRSxXQUFXLEtBQUs7UUFDM0VDLGVBQWU5QixTQUFTK0IsWUFBWSxHQUFHLElBQUlILEtBQUs1QixTQUFTK0IsWUFBWSxFQUFFRixXQUFXLEtBQUtuQjtRQUN2RkgsUUFBUVAsU0FBU08sTUFBTSxHQUFHWCxpQkFBaUJJLFNBQVNPLE1BQU0sSUFBSUc7UUFDOURzQixhQUFhaEMsU0FBU2dDLFdBQVcsRUFBRTlCO1FBQ25DK0IsOEJBQThCakMsU0FBU2tDLDBCQUEwQixHQUFHLElBQUlOLEtBQUs1QixTQUFTa0MsMEJBQTBCLEVBQUVMLFdBQVcsS0FBS25CO1FBQ2xJeUIsTUFBTW5DLFNBQVNpQixPQUFPLEVBQUVrQixRQUFRO1FBQ2hDQyxNQUFNcEMsU0FBU2lCLE9BQU8sRUFBRW1CLFFBQVE7UUFDaENDLFNBQVNyQyxTQUFTaUIsT0FBTyxFQUFFb0I7UUFDM0IxQixPQUFPWCxTQUFTVyxLQUFLLElBQUk7UUFDekIyQix3QkFBd0J0QyxTQUFTdUMsb0JBQW9CLEdBQ2pEO1lBQ0VDLE9BQU81QyxpQkFBaUJJLFNBQVN1QyxvQkFBb0IsQ0FBQ0MsS0FBSztZQUMzREMsUUFBUTNDLElBQUk0QyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDNUMsU0FBU3VDLG9CQUFvQixDQUFDTSxLQUFLO1FBQ2hGLElBQ0FuQztRQUNKb0MsTUFBTTlDLFNBQVM4QyxJQUFJLEdBQUdoRCxJQUFJNEMsWUFBWSxDQUFDQyxPQUFPLENBQUNHLElBQUksQ0FBQ2hELEtBQUtFLFNBQVM4QyxJQUFJLElBQUlwQztJQUM1RTtBQUNGIn0=
