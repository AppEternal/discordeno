export function transformPoll(bot, payload) {
  const props = bot.transformers.desiredProperties.poll
  const poll = {}
  if (props.question && payload.question) poll.question = bot.transformers.pollMedia(bot, payload.question)
  if (props.answers && payload.answers)
    poll.answers = payload.answers.map((x) => ({
      answerId: x.answer_id,
      pollMedia: bot.transformers.pollMedia(bot, x.poll_media),
    }))
  if (props.expiry && payload.expiry) poll.expiry = Date.parse(payload.expiry)
  if (props.allowMultiselect && payload.allow_multiselect) poll.allowMultiselect = payload.allow_multiselect
  if (props.layoutType) poll.layoutType = payload.layout_type
  if (props.results && payload.results) {
    const results = {}
    const pollResultProps = bot.transformers.desiredProperties.pollResult
    if (pollResultProps.isFinalized && payload.results.is_finalized) results.isFinalized = payload.results.is_finalized
    if (pollResultProps.answerCounts && payload.results.answer_counts)
      results.answerCounts = payload.results.answer_counts.map((x) => ({
        id: x.id,
        count: x.count,
        meVoted: x.me_voted,
      }))
    poll.results = results
  }
  return bot.transformers.customizers.poll(bot, payload, poll)
}
export function transformPollMedia(bot, payload) {
  const props = bot.transformers.desiredProperties.pollMedia
  const pollMedia = {}
  if (props.text && payload.text) pollMedia.text = payload.text
  if (props.emoji && payload.emoji) pollMedia.emoji = bot.transformers.emoji(bot, payload.emoji)
  return bot.transformers.customizers.pollMedia(bot, payload, pollMedia)
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvcG9sbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpc2NvcmRFbW9qaSwgRGlzY29yZFBvbGwsIERpc2NvcmRQb2xsTWVkaWEgfSBmcm9tICdAZGlzY29yZGVuby90eXBlcydcbmltcG9ydCB0eXBlIHsgQm90IH0gZnJvbSAnLi4vYm90LmpzJ1xuaW1wb3J0IHR5cGUgeyBEZXNpcmVkUHJvcGVydGllc0JlaGF2aW9yLCBTZXR1cERlc2lyZWRQcm9wcywgVHJhbnNmb3JtZXJzRGVzaXJlZFByb3BlcnRpZXMgfSBmcm9tICcuLi9kZXNpcmVkUHJvcGVydGllcy5qcydcbmltcG9ydCB0eXBlIHsgUG9sbCwgUG9sbE1lZGlhLCBQb2xsUmVzdWx0IH0gZnJvbSAnLi90eXBlcy5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVBvbGwoYm90OiBCb3QsIHBheWxvYWQ6IERpc2NvcmRQb2xsKTogUG9sbCB7XG4gIGNvbnN0IHByb3BzID0gYm90LnRyYW5zZm9ybWVycy5kZXNpcmVkUHJvcGVydGllcy5wb2xsXG4gIGNvbnN0IHBvbGwgPSB7fSBhcyBTZXR1cERlc2lyZWRQcm9wczxQb2xsLCBUcmFuc2Zvcm1lcnNEZXNpcmVkUHJvcGVydGllcywgRGVzaXJlZFByb3BlcnRpZXNCZWhhdmlvcj5cblxuICBpZiAocHJvcHMucXVlc3Rpb24gJiYgcGF5bG9hZC5xdWVzdGlvbikgcG9sbC5xdWVzdGlvbiA9IGJvdC50cmFuc2Zvcm1lcnMucG9sbE1lZGlhKGJvdCwgcGF5bG9hZC5xdWVzdGlvbilcbiAgaWYgKHByb3BzLmFuc3dlcnMgJiYgcGF5bG9hZC5hbnN3ZXJzKVxuICAgIHBvbGwuYW5zd2VycyA9IHBheWxvYWQuYW5zd2Vycy5tYXAoKHgpID0+ICh7IGFuc3dlcklkOiB4LmFuc3dlcl9pZCwgcG9sbE1lZGlhOiBib3QudHJhbnNmb3JtZXJzLnBvbGxNZWRpYShib3QsIHgucG9sbF9tZWRpYSkgfSkpXG4gIGlmIChwcm9wcy5leHBpcnkgJiYgcGF5bG9hZC5leHBpcnkpIHBvbGwuZXhwaXJ5ID0gRGF0ZS5wYXJzZShwYXlsb2FkLmV4cGlyeSlcbiAgaWYgKHByb3BzLmFsbG93TXVsdGlzZWxlY3QgJiYgcGF5bG9hZC5hbGxvd19tdWx0aXNlbGVjdCkgcG9sbC5hbGxvd011bHRpc2VsZWN0ID0gcGF5bG9hZC5hbGxvd19tdWx0aXNlbGVjdFxuICBpZiAocHJvcHMubGF5b3V0VHlwZSkgcG9sbC5sYXlvdXRUeXBlID0gcGF5bG9hZC5sYXlvdXRfdHlwZVxuICBpZiAocHJvcHMucmVzdWx0cyAmJiBwYXlsb2FkLnJlc3VsdHMpIHtcbiAgICBjb25zdCByZXN1bHRzID0ge30gYXMgU2V0dXBEZXNpcmVkUHJvcHM8UG9sbFJlc3VsdCwgVHJhbnNmb3JtZXJzRGVzaXJlZFByb3BlcnRpZXMsIERlc2lyZWRQcm9wZXJ0aWVzQmVoYXZpb3I+XG4gICAgY29uc3QgcG9sbFJlc3VsdFByb3BzID0gYm90LnRyYW5zZm9ybWVycy5kZXNpcmVkUHJvcGVydGllcy5wb2xsUmVzdWx0XG5cbiAgICBpZiAocG9sbFJlc3VsdFByb3BzLmlzRmluYWxpemVkICYmIHBheWxvYWQucmVzdWx0cy5pc19maW5hbGl6ZWQpIHJlc3VsdHMuaXNGaW5hbGl6ZWQgPSBwYXlsb2FkLnJlc3VsdHMuaXNfZmluYWxpemVkXG4gICAgaWYgKHBvbGxSZXN1bHRQcm9wcy5hbnN3ZXJDb3VudHMgJiYgcGF5bG9hZC5yZXN1bHRzLmFuc3dlcl9jb3VudHMpXG4gICAgICByZXN1bHRzLmFuc3dlckNvdW50cyA9IHBheWxvYWQucmVzdWx0cy5hbnN3ZXJfY291bnRzLm1hcCgoeCkgPT4gKHsgaWQ6IHguaWQsIGNvdW50OiB4LmNvdW50LCBtZVZvdGVkOiB4Lm1lX3ZvdGVkIH0pKVxuXG4gICAgcG9sbC5yZXN1bHRzID0gcmVzdWx0c1xuICB9XG5cbiAgcmV0dXJuIGJvdC50cmFuc2Zvcm1lcnMuY3VzdG9taXplcnMucG9sbChib3QsIHBheWxvYWQsIHBvbGwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2xsTWVkaWEoYm90OiBCb3QsIHBheWxvYWQ6IERpc2NvcmRQb2xsTWVkaWEpOiBQb2xsTWVkaWEge1xuICBjb25zdCBwcm9wcyA9IGJvdC50cmFuc2Zvcm1lcnMuZGVzaXJlZFByb3BlcnRpZXMucG9sbE1lZGlhXG4gIGNvbnN0IHBvbGxNZWRpYSA9IHt9IGFzIFNldHVwRGVzaXJlZFByb3BzPFBvbGxNZWRpYSwgVHJhbnNmb3JtZXJzRGVzaXJlZFByb3BlcnRpZXMsIERlc2lyZWRQcm9wZXJ0aWVzQmVoYXZpb3I+XG5cbiAgaWYgKHByb3BzLnRleHQgJiYgcGF5bG9hZC50ZXh0KSBwb2xsTWVkaWEudGV4dCA9IHBheWxvYWQudGV4dFxuICBpZiAocHJvcHMuZW1vamkgJiYgcGF5bG9hZC5lbW9qaSkgcG9sbE1lZGlhLmVtb2ppID0gYm90LnRyYW5zZm9ybWVycy5lbW9qaShib3QsIHBheWxvYWQuZW1vamkgYXMgRGlzY29yZEVtb2ppKVxuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLmN1c3RvbWl6ZXJzLnBvbGxNZWRpYShib3QsIHBheWxvYWQsIHBvbGxNZWRpYSlcbn1cbiJdLCJuYW1lcyI6WyJ0cmFuc2Zvcm1Qb2xsIiwiYm90IiwicGF5bG9hZCIsInByb3BzIiwidHJhbnNmb3JtZXJzIiwiZGVzaXJlZFByb3BlcnRpZXMiLCJwb2xsIiwicXVlc3Rpb24iLCJwb2xsTWVkaWEiLCJhbnN3ZXJzIiwibWFwIiwieCIsImFuc3dlcklkIiwiYW5zd2VyX2lkIiwicG9sbF9tZWRpYSIsImV4cGlyeSIsIkRhdGUiLCJwYXJzZSIsImFsbG93TXVsdGlzZWxlY3QiLCJhbGxvd19tdWx0aXNlbGVjdCIsImxheW91dFR5cGUiLCJsYXlvdXRfdHlwZSIsInJlc3VsdHMiLCJwb2xsUmVzdWx0UHJvcHMiLCJwb2xsUmVzdWx0IiwiaXNGaW5hbGl6ZWQiLCJpc19maW5hbGl6ZWQiLCJhbnN3ZXJDb3VudHMiLCJhbnN3ZXJfY291bnRzIiwiaWQiLCJjb3VudCIsIm1lVm90ZWQiLCJtZV92b3RlZCIsImN1c3RvbWl6ZXJzIiwidHJhbnNmb3JtUG9sbE1lZGlhIiwidGV4dCIsImVtb2ppIl0sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLFNBQVNBLGNBQWNDLEdBQVEsRUFBRUMsT0FBb0I7SUFDMUQsTUFBTUMsUUFBUUYsSUFBSUcsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ0MsSUFBSTtJQUNyRCxNQUFNQSxPQUFPLENBQUM7SUFFZCxJQUFJSCxNQUFNSSxRQUFRLElBQUlMLFFBQVFLLFFBQVEsRUFBRUQsS0FBS0MsUUFBUSxHQUFHTixJQUFJRyxZQUFZLENBQUNJLFNBQVMsQ0FBQ1AsS0FBS0MsUUFBUUssUUFBUTtJQUN4RyxJQUFJSixNQUFNTSxPQUFPLElBQUlQLFFBQVFPLE9BQU8sRUFDbENILEtBQUtHLE9BQU8sR0FBR1AsUUFBUU8sT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTyxDQUFBO1lBQUVDLFVBQVVELEVBQUVFLFNBQVM7WUFBRUwsV0FBV1AsSUFBSUcsWUFBWSxDQUFDSSxTQUFTLENBQUNQLEtBQUtVLEVBQUVHLFVBQVU7UUFBRSxDQUFBO0lBQy9ILElBQUlYLE1BQU1ZLE1BQU0sSUFBSWIsUUFBUWEsTUFBTSxFQUFFVCxLQUFLUyxNQUFNLEdBQUdDLEtBQUtDLEtBQUssQ0FBQ2YsUUFBUWEsTUFBTTtJQUMzRSxJQUFJWixNQUFNZSxnQkFBZ0IsSUFBSWhCLFFBQVFpQixpQkFBaUIsRUFBRWIsS0FBS1ksZ0JBQWdCLEdBQUdoQixRQUFRaUIsaUJBQWlCO0lBQzFHLElBQUloQixNQUFNaUIsVUFBVSxFQUFFZCxLQUFLYyxVQUFVLEdBQUdsQixRQUFRbUIsV0FBVztJQUMzRCxJQUFJbEIsTUFBTW1CLE9BQU8sSUFBSXBCLFFBQVFvQixPQUFPLEVBQUU7UUFDcEMsTUFBTUEsVUFBVSxDQUFDO1FBQ2pCLE1BQU1DLGtCQUFrQnRCLElBQUlHLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUNtQixVQUFVO1FBRXJFLElBQUlELGdCQUFnQkUsV0FBVyxJQUFJdkIsUUFBUW9CLE9BQU8sQ0FBQ0ksWUFBWSxFQUFFSixRQUFRRyxXQUFXLEdBQUd2QixRQUFRb0IsT0FBTyxDQUFDSSxZQUFZO1FBQ25ILElBQUlILGdCQUFnQkksWUFBWSxJQUFJekIsUUFBUW9CLE9BQU8sQ0FBQ00sYUFBYSxFQUMvRE4sUUFBUUssWUFBWSxHQUFHekIsUUFBUW9CLE9BQU8sQ0FBQ00sYUFBYSxDQUFDbEIsR0FBRyxDQUFDLENBQUNDLElBQU8sQ0FBQTtnQkFBRWtCLElBQUlsQixFQUFFa0IsRUFBRTtnQkFBRUMsT0FBT25CLEVBQUVtQixLQUFLO2dCQUFFQyxTQUFTcEIsRUFBRXFCLFFBQVE7WUFBQyxDQUFBO1FBRW5IMUIsS0FBS2dCLE9BQU8sR0FBR0E7SUFDakI7SUFFQSxPQUFPckIsSUFBSUcsWUFBWSxDQUFDNkIsV0FBVyxDQUFDM0IsSUFBSSxDQUFDTCxLQUFLQyxTQUFTSTtBQUN6RDtBQUVBLE9BQU8sU0FBUzRCLG1CQUFtQmpDLEdBQVEsRUFBRUMsT0FBeUI7SUFDcEUsTUFBTUMsUUFBUUYsSUFBSUcsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ0csU0FBUztJQUMxRCxNQUFNQSxZQUFZLENBQUM7SUFFbkIsSUFBSUwsTUFBTWdDLElBQUksSUFBSWpDLFFBQVFpQyxJQUFJLEVBQUUzQixVQUFVMkIsSUFBSSxHQUFHakMsUUFBUWlDLElBQUk7SUFDN0QsSUFBSWhDLE1BQU1pQyxLQUFLLElBQUlsQyxRQUFRa0MsS0FBSyxFQUFFNUIsVUFBVTRCLEtBQUssR0FBR25DLElBQUlHLFlBQVksQ0FBQ2dDLEtBQUssQ0FBQ25DLEtBQUtDLFFBQVFrQyxLQUFLO0lBRTdGLE9BQU9uQyxJQUFJRyxZQUFZLENBQUM2QixXQUFXLENBQUN6QixTQUFTLENBQUNQLEtBQUtDLFNBQVNNO0FBQzlEIn0=
