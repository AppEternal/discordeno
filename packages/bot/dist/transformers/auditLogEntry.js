import { camelize } from '@discordeno/utils';
export function transformAuditLogEntry(bot, payload) {
    const auditLogEntry = {
        id: bot.transformers.snowflake(payload.id),
        changes: camelize(payload.changes),
        userId: payload.user_id ? bot.transformers.snowflake(payload.user_id) : undefined,
        targetId: payload.target_id ? bot.transformers.snowflake(payload.target_id) : undefined,
        actionType: payload.action_type,
        options: payload.options ? {
            applicationId: payload.options.application_id ? bot.transformers.snowflake(payload.options.application_id) : undefined,
            autoModerationRuleName: payload.options.auto_moderation_rule_name,
            autoModerationRuleTriggerType: payload.options.auto_moderation_rule_trigger_type,
            channelId: payload.options.channel_id ? bot.transformers.snowflake(payload.options.channel_id) : undefined,
            count: payload.options.count ? Number(payload.options.count) : undefined,
            deleteMemberDays: payload.options.delete_member_days ? Number(payload.options.delete_member_days) : undefined,
            id: payload.options.id ? bot.transformers.snowflake(payload.options.id) : undefined,
            membersRemoved: payload.options.members_removed ? Number(payload.options.members_removed) : undefined,
            messageId: payload.options.message_id ? bot.transformers.snowflake(payload.options.message_id) : undefined,
            roleName: payload.options.role_name,
            type: payload.options.type ? Number(payload.options.type) : undefined,
            integrationType: payload.options.integration_type
        } : undefined,
        reason: payload.reason
    };
    return bot.transformers.customizers.auditLogEntry(bot, payload, auditLogEntry);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvYXVkaXRMb2dFbnRyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpc2NvcmRBdWRpdExvZ0VudHJ5IH0gZnJvbSAnQGRpc2NvcmRlbm8vdHlwZXMnXG5pbXBvcnQgeyBjYW1lbGl6ZSB9IGZyb20gJ0BkaXNjb3JkZW5vL3V0aWxzJ1xuaW1wb3J0IHR5cGUgeyBCb3QgfSBmcm9tICcuLi9ib3QuanMnXG5pbXBvcnQgdHlwZSB7IEF1ZGl0TG9nRW50cnkgfSBmcm9tICcuL3R5cGVzLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQXVkaXRMb2dFbnRyeShib3Q6IEJvdCwgcGF5bG9hZDogRGlzY29yZEF1ZGl0TG9nRW50cnkpOiBBdWRpdExvZ0VudHJ5IHtcbiAgY29uc3QgYXVkaXRMb2dFbnRyeSA9IHtcbiAgICBpZDogYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5pZCksXG4gICAgY2hhbmdlczogY2FtZWxpemUocGF5bG9hZC5jaGFuZ2VzKSxcbiAgICB1c2VySWQ6IHBheWxvYWQudXNlcl9pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQudXNlcl9pZCkgOiB1bmRlZmluZWQsXG4gICAgdGFyZ2V0SWQ6IHBheWxvYWQudGFyZ2V0X2lkID8gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC50YXJnZXRfaWQpIDogdW5kZWZpbmVkLFxuICAgIGFjdGlvblR5cGU6IHBheWxvYWQuYWN0aW9uX3R5cGUsXG4gICAgb3B0aW9uczogcGF5bG9hZC5vcHRpb25zXG4gICAgICA/IHtcbiAgICAgICAgICBhcHBsaWNhdGlvbklkOiBwYXlsb2FkLm9wdGlvbnMuYXBwbGljYXRpb25faWQgPyBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLm9wdGlvbnMuYXBwbGljYXRpb25faWQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGF1dG9Nb2RlcmF0aW9uUnVsZU5hbWU6IHBheWxvYWQub3B0aW9ucy5hdXRvX21vZGVyYXRpb25fcnVsZV9uYW1lLFxuICAgICAgICAgIGF1dG9Nb2RlcmF0aW9uUnVsZVRyaWdnZXJUeXBlOiBwYXlsb2FkLm9wdGlvbnMuYXV0b19tb2RlcmF0aW9uX3J1bGVfdHJpZ2dlcl90eXBlLFxuICAgICAgICAgIGNoYW5uZWxJZDogcGF5bG9hZC5vcHRpb25zLmNoYW5uZWxfaWQgPyBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLm9wdGlvbnMuY2hhbm5lbF9pZCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgY291bnQ6IHBheWxvYWQub3B0aW9ucy5jb3VudCA/IE51bWJlcihwYXlsb2FkLm9wdGlvbnMuY291bnQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGRlbGV0ZU1lbWJlckRheXM6IHBheWxvYWQub3B0aW9ucy5kZWxldGVfbWVtYmVyX2RheXMgPyBOdW1iZXIocGF5bG9hZC5vcHRpb25zLmRlbGV0ZV9tZW1iZXJfZGF5cykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgaWQ6IHBheWxvYWQub3B0aW9ucy5pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQub3B0aW9ucy5pZCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWVtYmVyc1JlbW92ZWQ6IHBheWxvYWQub3B0aW9ucy5tZW1iZXJzX3JlbW92ZWQgPyBOdW1iZXIocGF5bG9hZC5vcHRpb25zLm1lbWJlcnNfcmVtb3ZlZCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWVzc2FnZUlkOiBwYXlsb2FkLm9wdGlvbnMubWVzc2FnZV9pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQub3B0aW9ucy5tZXNzYWdlX2lkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICByb2xlTmFtZTogcGF5bG9hZC5vcHRpb25zLnJvbGVfbmFtZSxcbiAgICAgICAgICB0eXBlOiBwYXlsb2FkLm9wdGlvbnMudHlwZSA/IE51bWJlcihwYXlsb2FkLm9wdGlvbnMudHlwZSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgaW50ZWdyYXRpb25UeXBlOiBwYXlsb2FkLm9wdGlvbnMuaW50ZWdyYXRpb25fdHlwZSxcbiAgICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgcmVhc29uOiBwYXlsb2FkLnJlYXNvbixcbiAgfSBhcyBBdWRpdExvZ0VudHJ5XG5cbiAgcmV0dXJuIGJvdC50cmFuc2Zvcm1lcnMuY3VzdG9taXplcnMuYXVkaXRMb2dFbnRyeShib3QsIHBheWxvYWQsIGF1ZGl0TG9nRW50cnkpXG59XG4iXSwibmFtZXMiOlsiY2FtZWxpemUiLCJ0cmFuc2Zvcm1BdWRpdExvZ0VudHJ5IiwiYm90IiwicGF5bG9hZCIsImF1ZGl0TG9nRW50cnkiLCJpZCIsInRyYW5zZm9ybWVycyIsInNub3dmbGFrZSIsImNoYW5nZXMiLCJ1c2VySWQiLCJ1c2VyX2lkIiwidW5kZWZpbmVkIiwidGFyZ2V0SWQiLCJ0YXJnZXRfaWQiLCJhY3Rpb25UeXBlIiwiYWN0aW9uX3R5cGUiLCJvcHRpb25zIiwiYXBwbGljYXRpb25JZCIsImFwcGxpY2F0aW9uX2lkIiwiYXV0b01vZGVyYXRpb25SdWxlTmFtZSIsImF1dG9fbW9kZXJhdGlvbl9ydWxlX25hbWUiLCJhdXRvTW9kZXJhdGlvblJ1bGVUcmlnZ2VyVHlwZSIsImF1dG9fbW9kZXJhdGlvbl9ydWxlX3RyaWdnZXJfdHlwZSIsImNoYW5uZWxJZCIsImNoYW5uZWxfaWQiLCJjb3VudCIsIk51bWJlciIsImRlbGV0ZU1lbWJlckRheXMiLCJkZWxldGVfbWVtYmVyX2RheXMiLCJtZW1iZXJzUmVtb3ZlZCIsIm1lbWJlcnNfcmVtb3ZlZCIsIm1lc3NhZ2VJZCIsIm1lc3NhZ2VfaWQiLCJyb2xlTmFtZSIsInJvbGVfbmFtZSIsInR5cGUiLCJpbnRlZ3JhdGlvblR5cGUiLCJpbnRlZ3JhdGlvbl90eXBlIiwicmVhc29uIiwiY3VzdG9taXplcnMiXSwibWFwcGluZ3MiOiJBQUNBLFNBQVNBLFFBQVEsUUFBUSxvQkFBbUI7QUFJNUMsT0FBTyxTQUFTQyx1QkFBdUJDLEdBQVEsRUFBRUMsT0FBNkI7SUFDNUUsTUFBTUMsZ0JBQWdCO1FBQ3BCQyxJQUFJSCxJQUFJSSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0osUUFBUUUsRUFBRTtRQUN6Q0csU0FBU1IsU0FBU0csUUFBUUssT0FBTztRQUNqQ0MsUUFBUU4sUUFBUU8sT0FBTyxHQUFHUixJQUFJSSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0osUUFBUU8sT0FBTyxJQUFJQztRQUN4RUMsVUFBVVQsUUFBUVUsU0FBUyxHQUFHWCxJQUFJSSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0osUUFBUVUsU0FBUyxJQUFJRjtRQUM5RUcsWUFBWVgsUUFBUVksV0FBVztRQUMvQkMsU0FBU2IsUUFBUWEsT0FBTyxHQUNwQjtZQUNFQyxlQUFlZCxRQUFRYSxPQUFPLENBQUNFLGNBQWMsR0FBR2hCLElBQUlJLFlBQVksQ0FBQ0MsU0FBUyxDQUFDSixRQUFRYSxPQUFPLENBQUNFLGNBQWMsSUFBSVA7WUFDN0dRLHdCQUF3QmhCLFFBQVFhLE9BQU8sQ0FBQ0kseUJBQXlCO1lBQ2pFQywrQkFBK0JsQixRQUFRYSxPQUFPLENBQUNNLGlDQUFpQztZQUNoRkMsV0FBV3BCLFFBQVFhLE9BQU8sQ0FBQ1EsVUFBVSxHQUFHdEIsSUFBSUksWUFBWSxDQUFDQyxTQUFTLENBQUNKLFFBQVFhLE9BQU8sQ0FBQ1EsVUFBVSxJQUFJYjtZQUNqR2MsT0FBT3RCLFFBQVFhLE9BQU8sQ0FBQ1MsS0FBSyxHQUFHQyxPQUFPdkIsUUFBUWEsT0FBTyxDQUFDUyxLQUFLLElBQUlkO1lBQy9EZ0Isa0JBQWtCeEIsUUFBUWEsT0FBTyxDQUFDWSxrQkFBa0IsR0FBR0YsT0FBT3ZCLFFBQVFhLE9BQU8sQ0FBQ1ksa0JBQWtCLElBQUlqQjtZQUNwR04sSUFBSUYsUUFBUWEsT0FBTyxDQUFDWCxFQUFFLEdBQUdILElBQUlJLFlBQVksQ0FBQ0MsU0FBUyxDQUFDSixRQUFRYSxPQUFPLENBQUNYLEVBQUUsSUFBSU07WUFDMUVrQixnQkFBZ0IxQixRQUFRYSxPQUFPLENBQUNjLGVBQWUsR0FBR0osT0FBT3ZCLFFBQVFhLE9BQU8sQ0FBQ2MsZUFBZSxJQUFJbkI7WUFDNUZvQixXQUFXNUIsUUFBUWEsT0FBTyxDQUFDZ0IsVUFBVSxHQUFHOUIsSUFBSUksWUFBWSxDQUFDQyxTQUFTLENBQUNKLFFBQVFhLE9BQU8sQ0FBQ2dCLFVBQVUsSUFBSXJCO1lBQ2pHc0IsVUFBVTlCLFFBQVFhLE9BQU8sQ0FBQ2tCLFNBQVM7WUFDbkNDLE1BQU1oQyxRQUFRYSxPQUFPLENBQUNtQixJQUFJLEdBQUdULE9BQU92QixRQUFRYSxPQUFPLENBQUNtQixJQUFJLElBQUl4QjtZQUM1RHlCLGlCQUFpQmpDLFFBQVFhLE9BQU8sQ0FBQ3FCLGdCQUFnQjtRQUNuRCxJQUNBMUI7UUFDSjJCLFFBQVFuQyxRQUFRbUMsTUFBTTtJQUN4QjtJQUVBLE9BQU9wQyxJQUFJSSxZQUFZLENBQUNpQyxXQUFXLENBQUNuQyxhQUFhLENBQUNGLEtBQUtDLFNBQVNDO0FBQ2xFIn0=